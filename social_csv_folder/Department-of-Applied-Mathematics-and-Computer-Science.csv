COURSE NUMBER,COURSE NAME,LANGUAGE OF INSTRUCTION,CREDIT LOAD,YEAR,SCHEDULE,COURSE TYPE,DEPARTMENT,GENERAL COURSE OBJECTIVES,LEARNING OBJECTIVES,CONTENT,RECOMMENDED PREREQUISITES,COURSE RESPONSIBLE
,,,,,,,,,,,,
01003, Advanced Engineering Mathematics 1,Danish , 0 ECTS , 2016/2017 ,Outside schedule structure,BSc,Department of Applied Mathematics and Computer Science,"
The course content is the mathematical basis for a broad range of
technical fields and also provides a starting point for further
studies in mathematics and applied mathematics. The dominating
theme of the course is linearity. The goal is to give students the
ability to employ fundamental tools of mathematics in theoretical
studies as well as in applied projects. The use of modern computer
software supports both of these aspects. 
","A student who has met the objectives of the course will be able to:
Apply the algebraic and geometric representation of the complex numbers and the complex exponential.
Using matrix algebra and Gaussian elimination for solving systems of linear equations, and
Analyze and describe solution sets in vector spaces sentence.
Do simple calculations with the elementary functions, including their inverse.
Apply the various versions of Taylor's formula for approximations and limits.
Solve simple first and second order differential equations and differentialligningssytemer.
Extrema of functions of several variables, including in areas with rand.
Could parameterize simple curves, surfaces and spatial areas, and calculate simple line, surface and volume integrals.
Could use Gauss' and Stokes phrases in simple contexts.
Be able to use mathematical terminology and reasoning associated with oral and written presentation.
Organize collaboration in a project about mathematical concepts and methods in a larger application context.
Apply symbolic software tools currently Maple to solve and illustrate mathematical problems.","
Linear equations and linear maps. Matrix algebra. Vektor spaces.
Eigenvalue problems. Symmetric and orthogonal matrices. Complex
numbers. Linear differential equations. Standard functions.

Functions of one and several real variables: linear approximations
and partial derivatives, Taylor expansions and quadratic forms,
extrema and level curves, line, surface and volume integrals.
Vector fields, Gauss' and Stokes' theorem.

Applications of MAPLE in the above areas. Examples of applications
in the engineering sciences. 
",None,"
Karsten Schmidt,
Michael Pedersen"
,,,,,,,,,,,,
01005, Advanced Engineering Mathematics 1,Danish , 20 ECTS , 2016/2017 ,Fall and Spring,BSc,Department of Applied Mathematics and Computer Science,"
The course content is the mathematical basis for a broad range of
technical fields and also provides a starting point for further
studies in mathematics and applied mathematics. The dominating
theme of the course is linearity. The goal is to give students the
ability to employ fundamental tools of mathematics in theoretical
studies as well as in applied thematic exercises and projects. The
use of modern computer software supports both of these aspects. 
","use the algeraic and the geometric representation of complex
numbers including the complex exponential. use matrix algebra and Gaussian elimination for solving systems
of linear equations. analyse and explain the linear structure of solution sets in
vector spaces. perform calculations with the elementary functions including
their inverse functions. use Taylor's formulas for approximizations and limits. solve elementary first and second order differential equations
and systems of differential equations. calculate extremas for multivariate functions, especially on
domains with boundary. parameterise elementary curves, surfaces and massive solids and
calculate elementary curve, surface and volume integrals. use Gauss's and Stokes's theorems in simple
applications. use mathematical terminology and reasoning in oral as well as
written presentation. coordinate joint work in groups around thematic exercises and
applications. use computer algebraic systems (at present Maple) for solving
and visualisation of mathematical problems.","
Linear equations and linear maps. Matrix algebra. Vektor spaces.
Eigenvalue problems. Symmetric and orthogonal matrices. Complex
numbers. Linear differential equations. Standard functions.
Functions of one and several real variables: linear approximations
and partial derivatives, Taylor expansions and quadratic forms,
extrema and level curves, line, surface and volume integrals.
Vector fields, Gauss' and Stokes' theorem.

Applications of MAPLE in the above areas. Examples of applications
in the engineering sciences. 
",None,"
Karsten Schmidt,
Michael Pedersen"
,,,,,,,,,,,,
01006, Advanced Engineering Mathematics 1,English , 20 ECTS , 2016/2017 ,Fall and Spring,BSc,Department of Applied Mathematics and Computer Science,"
The course content is the mathematical basis for a broad range of
technical fields and also provides a starting point for further
studies in mathematics and applied mathematics. The dominating
theme of the course is linearity. The goal is to give students the
ability to employ fundamental tools of mathematics in theoretical
studies as well as in applied thematic exercises and projects. The
use of modern computer software supports both of these aspects. 
","use the algebraic and the geometric representation of complex
numbers including the complex exponential function. use matrix algebra and Gaussian elimination for solving systems
of linear equations. analyse and explain the linear structure of solution sets in
vector spaces. perform simple calculations with the elementary functions
including their inverse functions. use Taylor's formulas for approximizations and limits. solve elementary first and second order differential equations
and systems of differential equations. calculate extremas for multivariate functions, especially on
domains with boundary parameterise elementary curves, surfaces and massive solids and
calculate elementary curve, surface and volume integrals. use Gauss's and Stokes's theorems in simple
applications. use mathematical terminology and reasoning in oral as well as
written presentation. coordinate joint work in groups around thematic exercises and
applications. use computer algebraic systems (at present Maple) for solving
and visualisation of mathematical problems.","
Linear equations and linear maps. Matrix algebra. Vektor spaces.
Eigenvalue problems. Symmetric and orthogonal matrices. Complex
numbers. Linear differential equations. Standard functions.
Functions of one and several real variables: linear approximations
and partial derivatives, Taylor expansions and quadratic forms,
extrema and level curves, line, surface and volume integrals.
Vector fields, Gauss' and Stokes' theorem.

Applications of MAPLE in the above areas. Examples of applications
in the engineering sciences. 
",None,"
Karsten Schmidt,
Michael Pedersen"
,,,,,,,,,,,,
01015, Advanced Engineering Mathematics 1,Danish , 17.5 ECTS , 2016/2017 ,Fall and Spring,BSc,Department of Applied Mathematics and Computer Science,"
The course content is the mathematical basis for a broad range of
technical fields and also provides a starting point for further
studies in mathematics and applied mathematics. The dominating
theme of the course is linearity. The goal is to give students the
ability to employ fundamental tools of mathematics in theoretical
studies as well as in applied projects. The use of modern computer
software supports both of these aspects. 
","A student who has met the objectives of the course will be able to:
Apply the algebraic and geometric representation of the complex numbers and the complex exponential.
Using matrix algebra and Gaussian elimination for solving systems of linear equations, and
Analyze and describe solution sets in vector spaces sentence.
Do simple calculations with the elementary functions, including their inverse.
Apply the various versions of Taylor's formula for approximations and limits.
Solve simple first and second order differential equations and differentialligningssytemer.
Extrema of functions of several variables, including in areas with rand.
Could parameterize simple curves, surfaces and spatial areas, and calculate simple line, surface and volume integrals.
Could use Gauss' and Stokes phrases in simple contexts.
Be able to use mathematical terminology and reasoning associated with oral and written presentation.
Organize collaboration in a project about mathematical concepts and methods in a larger application context.
Apply symbolic software tools currently Maple to solve and illustrate mathematical problems.","
Linear equations and linear maps. Matrix algebra. Vektor spaces.
Eigenvalue problems. Symmetric and orthogonal matrices. Complex
numbers. Linear differential equations. Standard functions.

Functions of one and several real variables: linear approximations
and partial derivatives, Taylor expansions and quadratic forms,
extrema and level curves, line, surface and volume integrals.
Vector fields, Gauss' and Stokes' theorem.

Applications of MAPLE in the above areas. Examples of applications
in the engineering sciences. 
",None,"
Karsten Schmidt,
Michael Pedersen"
,,,,,,,,,,,,
01016, Advanced Engineering Mathematics 1,Danish , 17.5 ECTS , 2016/2017 ,Fall and Spring,BSc,Department of Applied Mathematics and Computer Science,"
The course content is the mathematical basis for a broad range of
technical fields and also provides a starting point for further
studies in mathematics and applied mathematics. The dominating
theme of the course is linearity. The goal is to give students the
ability to employ fundamental tools of mathematics in theoretical
studies as well as in applied projects. The use of modern computer
software supports both of these aspects. 
","A student who has met the objectives of the course will be able to:
Apply the algebraic and geometric representation of the complex numbers and the complex exponential.
Using matrix algebra and Gaussian elimination for solving systems of linear equations, and
Analyze and describe solution sets in vector spaces sentence.
Do simple calculations with the elementary functions, including their inverse.
Apply the various versions of Taylor's formula for approximations and limits.
Solve simple first and second order differential equations and differentialligningssytemer.
Extrema of functions of several variables, including in areas with rand.
Could parameterize simple curves, surfaces and spatial areas, and calculate simple line, surface and volume integrals.
Could use Gauss' and Stokes phrases in simple contexts.
Be able to use mathematical terminology and reasoning associated with oral and written presentation.
Organize collaboration in a project about mathematical concepts and methods in a larger application context.
Apply symbolic software tools currently Maple to solve and illustrate mathematical problems.","
Linear equations and linear maps. Matrix algebra. Vektor spaces.
Eigenvalue problems. Symmetric and orthogonal matrices. Complex
numbers. Linear differential equations. Standard functions.

Functions of one and several real variables: linear approximations
and partial derivatives, Taylor expansions and quadratic forms,
extrema and level curves, line, surface and volume integrals.
Vector fields, Gauss' and Stokes' theorem.

Applications of MAPLE in the above areas. Examples of applications
in the engineering sciences. 
",None,"
Karsten Schmidt,
Michael Pedersen"
,,,,,,,,,,,,
01017, Discrete Mathematics,Danish , 5 ECTS , 2016/2017 ,E2B (Thurs 8-12),BSc,Department of Applied Mathematics and Computer Science,To provide a part of the mathematics that are necessary for the modern engineering and to illustrate its applications.,"A student who has met the objectives of the course will be able to:
Operate with volumes and volume terms.
Explain the relationship between set theory and propositional logic.
Construct and implement simple mathematical proofs.
Operate with recursive definitions and implementation by induction over the natural numbers.
Solve simple combinatorial problems.
Translate simple natural language descriptions to formal language (propositional logic and predicate logic).
Operate with logical consequences and logical equivalences.
Operate with logical proof systems.
Understand moduloregning both algorithmic and theoretical (Euclid's algorithms side classes).
Argue logically and persuasively choice of solution.
Avail the technical specialist concepts in a clear and unambiguous manner.
Submit and present solutions short and precise.","Quantities relationships, induction and recursion, moduloregning linear rekursioner, propositional logic, predicate logic and proof systems.",None,"
Thomas Bolander,
Christian Henriksen"
,,,,,,,,,,,,
01018, Discrete mathematics 2: algebra,English , 5 ECTS , 2016/2017 ,E3B (Fri 13-17),MSc,Department of Applied Mathematics and Computer Science,"
The goal with this course is to introduce several algebraic
constructions (specifically: groups, rings and fields). These
constructions will be exemplified in different areas, among others
geometry and discrete mathematics.

Apart from this, the course strengthens the ability to formulate
and carry out a mathematical proof as well as to handle
mathematical concepts. 
","give the definition of a group apply group theory to solve counting problems describe symmetries of geometric object (eg platonic
solids) give the definition of a ring explain the notion of an ideal and use this to construct
quotient rings understand the construction of fields from rings (especially
finite fields) describe how finite fields are applied carry out a mathematical proof","
Algebra is the foundation of many applications, especially in
coding theory and cryptography.

The goal with this course is to introduce several algebraic
constructions (groups, rings and fields). These constructions will
be exemplified in different areas, among others geometry and
discrete mathematics. Also an impression is given as to how this
theory is applied and as such the course is a preparatory course
for further courses in discrete mathematics. 
",01017,"
Peter Beelen"
,,,,,,,,,,,,
01025, Advanced Mathematics 2 for Mathematics and Technology,Danish , 5 ECTS , 2016/2017 ,E1A (Mon 8-12),BSc,Department of Applied Mathematics and Computer Science,"
To provide the participants with tools, e.g., infinite series, to
solve ordinary linear differential equations. By the mathematical
approach the student will gain sufficient matureness to be able to
deal with more advanced topics within mathematical analysis and its
aplications. 
","Determine the solutions to nth order homogeneous differential
equations Determine the solutions to linear homogeneous systems of
differential equations Master the transfer function and apply it to solution of
inhomogeneous differential equations Distinguish between linear/nonlinear systems and test the
behaviour of nonlinear systems Determine and argue for the stability of linear systems of
differential equations Master central convergence issues Estimate the number of terms which is needed in order to obtain
a desired approximation of an infinite series Find the Fourier series for simple periodic functions, clarify
their convergence properties, and approximation-theoretic
properties Apply Maple to calculations and verification of results Apply Fourier series and various other types of infinite series
to solution of differential equations Master selected proofs within the theory for infinite series
and differential equations Construct proofs for simple claims within the theory for
infinite series and differential equations","
Transfer functions. Infinite series, power series, Fourier series.
Applications of infinite series on differential equations, the
exponential matrix. Introduction to non-linear differential
equations. Stability. Solutions via MAPLE. Central definitions,
concepts, and proofs within these topics. 
",01005,"
Ole Christensen,
Peter Røgen"
,,,,,,,,,,,,
01035, Advanced Engineering Mathematics 2,Danish , 5 ECTS , 2016/2017 ,E1A (Mon 8-12)  or  E2B (Thurs 8-12)  or  F2B (Thurs 8-12)  or  August,BSc,Department of Applied Mathematics and Computer Science,"
To provide participants with tools, e.g., infinite series, to solve
differential equations and systems of differential equations. 
","Determine the solutions to nth order homogeneous differential
equations Determine the solutions to linear homogeneous systems of
differential equations Master the transfer function and apply it to solution of
inhomogeneous differential equations distinguish between linear/nonlinear systems and test the
behaviour of simple nonlinear systems Determine and argue for the stability of linear systems of
differential equations Know the differences between various types of convergence
(absolute, conditional, point-wise, uniform) of infinite series and
identify them Estimate the number of terms which is needed in order to obtain
a desired approximation of an infinite series Find the Fourier series for simple periodic functions, clarify
their convergence properties, and approximation-theoretic
properties Apply Maple to calculations and control of the results Apply Fourier series and various other types of infinite series
to solution of differential equations","
Solution of homogeneous/​inhomogeneous differential equations and
systems of differential equations. Transfer functions. Infinite
series, power series, Fourier series. Applications of infinite
series for solving differential equations, the exponential matrix.
Stability. Introduction to nonlinear differential equations.
Solutions via MAPLE. 
","01907,01906,01005,01901","
Mads Peter Sørensen,
Ole Christensen"
,,,,,,,,,,,,
01036, Mathematical Methods in Structural Engineering,Danish , 5 ECTS , 2016/2017 ,January,MSc,Department of Applied Mathematics and Computer Science,"
To provide students with basic mathematical knowledge and problem
solving skills within theoretical construction mechanics. 
","Establish differential equations and boundary conditions for
simple systems in construction mechanics. Derive equations to determine eigenvalues for simple systems in
construction mechanics. Use numerical methods (currently involving MAPLE or MATLAB) in
the computation of eigenvalues and zeros of real functions. Identify regular and singular Sturm-Liouville problems Use methods from Sturm-Liouville theory to determine families
of orthogonal eigenfunctions. Use separation of variables to transform a partial differential
equation to a set of ordinary differential equation problems Use (generalized) Fourier series to solve problems in partial
differential equations Solve the wave, heat, catenary, beam, etc. equation Analyze vibrations of strings and kables Work with Bessel functions as solutions to problems with
rotational symmetry","
Modeling in selected problems from construction mechanics (e.g.
beams and columns) and mathematical tools in the analysis of such
models. Differential equations, in particular boundary and
eigenvalue problems for linear ordinary differential equations,
solution methods and the structure of solution spaces,
Sturm-Liouville Theory, partial differential equations, separation
of variables, Fourier Series revisited. The course will blend
mathematics and construction mechanics in exercises and projects. 
",01035,"
Jakob Lemvig,
Jan Becker Høgsberg"
,,,,,,,,,,,,
01125, Fundamental topological concepts and metric spaces,Danish , 5 ECTS , 2016/2017 ,January,BSc,Department of Applied Mathematics and Computer Science,"
All advanced mathematical disciplines used in mathematical
modelling of continuous phenomena have a common foundation
incorporating among others metrical (topological) structures in
point sets. It is the purpose of this course to enhance the
knowledge of mathematical analysis and linear algebra obtained in
Mathematics 1 and Mathematics 2 with fundamental notions about
metrical and linear structures. In this way a firm mathematical
foundation is established for advanced couses and for studies of
modern literature in mathematics and the theoretical engineering
sciences. 
","Transform intuitive notions about continuity and convergence to
exact mathematics. Construct mathematical proofs of a methodological
character. Operate and argue with abstract notions of distances. Work with abstract notions of distance in the study of
continuity and convergence. Operate and argue with abstract topological concepts. Work with abstract topological concepts in the study of
continuity and convergence. Exploit knowledge about the topology of point sets in the study
of extremal properties of continuous functions. Construct the completion of a metric space.","
Metric Topology: Topology in the real numbers spaces and in metric
spaces. Convergence of sequences, Continuity of functions,
Compactness. Concrete introduction to proofs in mathematics.
Connectedness. Complete metric spaces. Completion of a metric
space. 
","01025,01018,01035","
Jens Gravesen,
Poul G. Hjorth"
,,,,,,,,,,,,
01227, Graph Theory,English , 5 ECTS , 2016/2017 ,F1B (Thurs 13-17),MSc,Department of Applied Mathematics and Computer Science,"
The main aim of this course is to present to the students some
basic results and proof techniques in graph theory, in particular
in connection with graph theoretic algorithms and with electrical
networks. 
","combine fundamental graph theoretic concepts and results to
answer questions concerning the structure of graphs find distances, number of shortest paths, minimal spanning
trees, and minimal walks through all edges find maximal flows and minimal cuts, critical and optimal
edges find maximal matchings and minimal coverings in bipartite
graphs, find maximal job assignments and optimum scheduling calculate Pauling bonds in benzoids apply current spaces and voltage spaces and Kirchhoff's
tree theorem to find currents and voltages and driving point
resticances in electrical networks calculate resistances in connection with random walks (Markov
processes) apply Euler's formula to planar graphs","
Basic graph theory, including Euler graphs, Menger's theorem on
connectivity, planarity, matchings with applications to structure
rank, scheduling problems, and Pauling bonds in benzoids. Network
flows which constitute the foundation of combinatorial optimization
with applications in e.g. operations research. Description and
complexity of algorithms (shortest paths, spanning trees of minimal
weight, the Chinese Postman's problem, maximum matchings, job
assignment) of interest in computer science. The mathematical
foundation of electrical networks, including effective resistances
expressed by spanning trees and determinants. Random walks. Planar
graphs. 
","01017,01005","
Carsten Thomassen,
Inge Li Gørtz"
,,,,,,,,,,,,
01236, Differential Geometry of Curves and Surfaces,English , 5 ECTS , 2016/2017 ,F2B (Thurs 8-12),MSc,Department of Applied Mathematics and Computer Science,"
The aim of this course is to provide the students with basic tools
and competences regarding the analysis of curves and surfaces in 3D
in order to establish a firm theoretical background both for
further studies in Riemannian geometry and global analysis on
manifolds as well as for a plethora of advanced applications to
mathematical modeling and data-analysis. 
","Calculate the curvature, the torsion, and the Frenet-Serret
basis for a given space curve. Apply the first and second fundamental forms to the local and
global analysis of surfaces in space when they are given
explicitly, implicitly, or in parametric form. Recognize isometries and conformal maps between surfaces. Determine the principal curvatures and principal directions at
every point of a given surface. Calculate the Gauss curvature and the mean curvature at every
point of a given surface. Apply the Gauss map for the local and global (total curvature)
analysis and description of a given surface. Recognize the classical minimal surfaces and other examples of
surfaces with constant mean curvature or constant Gauss
curvature. Find the asymptotic curves and geodesic curves on given
surfaces. Explain and apply the invariance of Gauss curvature under
isometries. Apply the Gauss-Bonnet theorem to find the Euler-characteristic
of compact surfaces. Explain the inner-geometric properties of parallel transport on
given surfaces. Apply first and second variation of arc length to obtain global
geometric and topological consequences from bounds on the Gauss
curvature.","
Curves and surfaces in 3D - with particular focus on metric and
curvature properties. The specific list of contents includes:

The Frenet-Serret 'apparatus' for curves in 3D, first and
second fundamental forms for surfaces, Gaussian curvature and mean
curvature, isometries, conformal maps, fundamental results of Gauss
and Gauss-Bonnet, the first elements of inner-geometric analysis on
Riemannian manifolds (parallel transport), and more recent results
from global differential geometry. 
","01125,01330","
Steen Markvorsen,
David Brander,
Jens Gravesen,
Peter Røgen"
,,,,,,,,,,,,
01237, Differential geometry and parametric design,Danish , 5 ECTS , 2016/2017 ,E4B (Fri 8-12),BSc,Department of Applied Mathematics and Computer Science,"
To provide the students with solid framework for understanding and
applying a number of geometric techniques as they are used in
engineering and architectural design contexts. To apply families of
2x2 and 3x3 matrices to construct and analyze geometric shapes in
plane and space. To introduce effective methods for parametric
design of curves and surfaces. To apply computer experiments as an
integrated part of the course for illustrations, learning, and
calculations. 
","Calculate the SVD decomposition of matrices - in particular 2x2
and 3x3 matrices. Apply basic kinematic concepts and methods to analyze rigid
motions in plane and space. Find kinematically motivated parametrizations of curves and
surfaces. Calculate lengths, areas, and volumes of parametrized
objects. Calculate the Frenet-Serret data for curves in plane and
space. Find and apply the first and second fundamental forms for
parametrized surfaces. Calculate the Weingarten matrix, the principal curvatures, and
the principal directions. Calculate the Gaussian and the mean curvature for parametrized
surfaces. Apply the curvature concepts to analyze and solve
design-related problems. Apply the general theory of surfaces for surfaces of
revolution, ruled surfaces, and other design-motivated standard
surfaces. Recognize and suggest applications of geometric methods for the
solution of design problems. Apply the respective methods and concepts in an individually
chosen project exercise and present the findings in a
report.","
Time-dependent deformation matrices and their SVD decompositions.
Rotation matrices. Kinematics in plane and space. The Frenet-Serret
basis for curves and the ensuing curvature and torsion.
Parametrization of curves and surfaces, in particular via sweeping.
Analysis of surfaces via the first and second fundamental form. The
Weingarten matrix and the principal curvatures and principal
directions. The Gauss curvature and mean curvature of surfaces.
Applications of these methods and concepts in architectural
engineering and sculptural design. Applications of computer
experiments, illustrations, and calculations to support all the
learning elements of the course. 
","01005,01901","
Steen Markvorsen,
David Brander"
,,,,,,,,,,,,
01257, Advanced Modelling ,English , 5 ECTS , 2016/2017 ,January,MSc,Department of Applied Mathematics and Computer Science,"
To introduce the students to advanced mathematical modelling
through the solution of a project problem from engineering,
medicine or physics. 
","Discuss essential principles of mathematical modelling Explain a mathematical model listing its assumptions Analyse a mathematical model using mathematical analysis Set up and do relevant numerical experiments Give correct mathematical arguments for the particular
model Organize project work in small groups Make conclusions concerning the technical problem based on the
obtained results Write a well-structured report that concisely explains the
model, the mathematical analysis, the numerical calculations, and
the conclusions made.","
We make a mathematical model of a scientific problem originating in
for instance engineering or physics, and we analyse the model using
mathematical theory. In addition the model is implemented
numerically and through numerical simulations the phenomena are
investigated. The problem could for instance arise from structural
mechanics. Students that have taken course 01617: Dynamical Systems
1 will be offered tailored projects where students will be able to
apply dynamical systems theory to real-world problems. Students are
expected to work in groups (2-4 persons) with the concrete project.

","01418,01246,01617,02631,02632,02633","
Kristian Uldall Kristiansen"
,,,,,,,,,,,,
01325, Mathematics 4 Real Analysis,English , 5 ECTS , 2016/2017 ,F5B (Wed 13-17),MSc,Department of Applied Mathematics and Computer Science,"
To provide the students with the mathematical background that is
needed for studies in physics and applied mathematics 
","distinguish between normed spaces and Hilbert spaces understand various types of convergence and how to verify
them master basic operations in Hilbert spaces understand the role of linear algebra in analysis know the role of $L^2$ and perform basic operations herein master the basic manipulations with Fourier transform know when one should apply Fourier series or the Fourier
transform expand square-integrable functions in various bases perform calculations on B-splines perform calculations with the L^p-spaces and the corresponding
sequence spaces master basic wavelet theory","
Normed vector spaces, Hilbert spaces, bases in Hilbert spaces,
basic operator theory, the spaces L^p and l^p, approximation, the
Fourier transform, convolution, the sampling theorem, B-splines,
special basis functions (e.g, Legendre and Hermite polynomials), an
introduction to wavelet theory. 
","01025,01035","
Jakob Lemvig"
,,,,,,,,,,,,
01405, Algebraic error,English , 5 ECTS , 2016/2017 ,F4B (Fri 8-12),MSc,Department of Applied Mathematics and Computer Science,"
To introduce the student to the theory of algebraic
error-correcting codes.We emphasize both the mathematical and
algorithmic aspects. 
","Implement a systematic encoder for block codes Construct a syndrome decoder Explain how algebraic codes are used in various
applications Construct Reed-Solomon codes Implement and and understand the operation of decoders for
Reed-Solomon and BCH codes using the euclidean algorithm Conduct a project in which algebraic codes are used in a larger
setting Implement and explain list decoding of Reed-Solomon codes Estimate the error probability after decoding","
Linear block codes, en- and decoding algorithms, application of
algebraic codes, Reed-Solomon codes and their decoding, bounds for
the error probability afterv decoding, list decoding 
",01018,"
Peter Beelen,
Johan Sebastian Heesemann Rosenkilde"
,,,,,,,,,,,,
01410, Cryptology 1,English , 5 ECTS , 2016/2017 ,F2A (Mon 13-17),MSc,Department of Applied Mathematics and Computer Science,"
The main purpose of this course is to introduce the student to
central concepts and methods in cryptology. 
","Do calculations in modular arithmetic, including Euclid's
algorithms and the Chinese Remainder Theorem. Discuss the differences between classical (symmetric)
cryptology and public-key (asymmetrical) cryptologi. Define the discrete logarithm problem modulo a prime number and
demonstrate the applications in cryptology. Explain how to find big prime numbers for use in public-key
cryptology. Define the properties of a digital signature and explain the
details in El-Gamal's signature system. Outline the applications of cryptographic hash functions in
cryptology, and describe the desired properties of the functions in
the particular application. Explain how the symmetric cryptosystems, DES and AES, are used
for encryption and authentication. Present the RSA public-key cryptosystem in all details, and
explain how the system is used for encryption and to construct
digital signatures. Explain what secret-sharing is for and how to share a
secret. Demonstrate how to exchange a key for symmetric encryption
securely.","
Classical cryptology, DES and AES, the RSA-System, digital
signatures, key exchange, the discrete logarithm problem and its
applications and secret-sharing. 
","01017,01005","
Lars Ramkilde Knudsen,
Andrey Bogdanov"
,,,,,,,,,,,,
01415, Computational Discrete Mathematics,English , 5 ECTS , 2016/2017 ,E3A (Tues 8-12),MSc,Department of Applied Mathematics and Computer Science,"
An introduction to fundamental algorithms that play an important
role in modern engineering science: finite field arithmetic
(crucial for cryptography and coding theory) as well as solving
systems of nonlinear equations (central to many areas of computer
science and enigeering). The focus is on acquiring mathematical
tools to solve problems in practice. 
","Efficiently compute over finite fields: addition,
multiplication, squaring, exponentiation Apply the algorithms for efficient finite field arithmetic to
implement real-world cryptographic protocols Represent classes of real-world problems as systems of
nonlinear equations Solve systems of nonlinear equations by applying such
algorithms as Buchberger's algorithm and SAT solvers Apply a computer algebra system to solve computational problems
in practice Determine complexity of algorithms Write quality technical reports Present results concisely and informatively Efficiently work and communicate in teams","
Rings, finite fields, arithmetic in finite fields (efficient
addition, multiplication, squaring), algorithms for exponentiation,
algorithms for solving nonlinear systems of equations (such as SAT
solvers or Gröbner-basis finding Buchberger's algorithm),
computer algebra systems 
","01018,01426","
Andrey Bogdanov,
Peter Beelen"
,,,,,,,,,,,,
01418, Introduction to Partial Differential Equations,English , 5 ECTS , 2016/2017 ,E5A (Wed 8-12),MSc,Department of Applied Mathematics and Computer Science,"
The purpose of the course is to enable the students to pose, study,
and solve problems in partial differential equations by using
methods and tools from mathematical analysis. 
","Model simple problems using partial differential Equations Solve the diffusion equation in simple geometries Solve the wave equation in simple geometries Use separation of variables to transform a partial differential
equation to a set of ordinary differential equation problems Apply Fourier series to solve problems in partial differential
equations Compute and investigate numerical solutions to partial
differential equations using standard software Solve problems in partial differential equations using
Green's functions. Solve linear PDE's of order one by the method of
characteristic curves Analyze PDE problems and retrieve qualitative information about
solutions Solve the Laplace equation in simple geometries","
Linear Partial Differential Equations (PDE's). Wave equation.
Diffusion and heat equations. Laplace, Poisson equations. Sources
in PDE's. Initial and boundary value problems. Expansion of
solutions in orthonormal series. Green's functions. 
",01035,"
Mirza Karamehmedovic"
,,,,,,,,,,,,
01426, Cryptology 2,English , 5 ECTS , 2016/2017 ,E3A (Tues 8-12),MSc,Department of Applied Mathematics and Computer Science,"
To introduce the students to advanced concepts and techniques in
cryptology. 
","Make computations in rings and finite fields. Explain how the symmetric cryptosystem AES works, including the
underlying mathematics. Outline possible symmetric systems for authentication of data,
and explain the advantages and disadvantages of systems, which are
computationally secure and systems, which are unconditionally
secure. Explain the basic ideas of provable security in symmetric
cryptography. Explain the basic ideas of provable security in asymmetric
cryptography. Explain the security of the RSA system and its relation to
factoring. Define elliptic curves modulo a prime number, and discuss the
applications of these in cryptology. Apply algorithms to compute discrete logarithms.","
Rings and finite fields. The Advanced Encryption Standard. Message
Authentication Codes. Discrete logarithm algorithms.

Factorisation algorithms. Elliptic curves modulo a prime number.
Ideas of provable security. 
",01410,"
Lars Ramkilde Knudsen,
Andrey Bogdanov"
,,,,,,,,,,,,
01427, Advanced topics in cryptology,English , 5 ECTS , 2016/2017 ,F5B (Wed 13-17),MSc,Department of Applied Mathematics and Computer Science,"
To give the student knowledge about cryptanalytic methods in
symmetric encryption (block ciphers and stream ciphers) and hash
functions. To update and inform them about current topics of
interest, e.g. Quantum Cryptography, Crypto-Currencies like
Bitcoin. 
","explain the ideas of linear cryptanalysis, higher order
differential attacks, truncated differential attacks, impossible
differential attacks on block ciphers explains the concepts of collision attacks, preimage attacks
and of multi-collisions for hash functions understand and quantum cryptography can and can not do understand how crypto-currencies like bitcoin work evaluate critically the presented topics from a
technical-scientific point of view make an oral presentation of a selected scientific article search the scientific literature for further information in
relation to the selected article act as an active listener at scientific seminars","
Block ciphers: linear cryptanalysis, higher order differential
attacks, truncated differential attacks, impossible differential
attacks, interpolation attacks.

Hash functions: collision attacks, preimage attacks,
multi-collisions, the SHA3 competition.

Current Topics: Quantum Cryptography, Proof-of-work schemes,
Bitcoin 
","01410,01426","
Lars Ramkilde Knudsen,
Elmar Wolfgang Tischhauser"
,,,,,,,,,,,,
01527, Graph Theory II,English , 5 ECTS , 2016/2017 ,E1B (Thurs 13-17),Ph.D.,Department of Applied Mathematics and Computer Science,"
The course includes a number of classical results such as the
theorems of Tutte, Ramsey, Turan, Kuratowski, Brooks, Dirac, Smith,
and Vizing, respectively, and also the Jordan Curve Theorem. The
course also includes more recent themes, for example
list-colorings. 
","Apply generating functions Apply counting technique illustrated by Ramsey's
theorem Apply the foundation for planar graphs: The Jordan Curve
Theorem Apply the Kuratowski Planarity Criterion Understand and apply the classical theorems by Turan, Brooks,
Dirac, Smith and Vizing Apply algebraic methods illustrated by the chromatic
polynomial Apply the list color methods Understand the implications of large minimum valency","
1.Generating functions, the Catalan numbers.

2.Tutte’s 1-factor theorem. Petersen’s theorem.

3.The theorems of Ramsey og Turan.

4.The Jordan Curve Theorem.

5.Kuratowski’s theorem on planar graphs.

6.Hamilton cycles. Dirac’s theorem and the Grinberg criterion.

7.The number of hamilton cycles (Smith’s theorem) , chromatic
number and maximum degree (Brooks’ theorem).

8.Vizing’s theorem on chromatic index.

9.Chromatic polynomial.

10.List-coloring. 5-coloring of planar graphs.

11.Graphs of large chromatic number and large girth.

12.Mader’s results on configurations in graphs of large minimum
degree. 
",01227,"
Carsten Thomassen"
,,,,,,,,,,,,
01617, Dynamical Systems 1,English , 5 ECTS , 2016/2017 ,E2A (Mon 13-17),MSc,Department of Applied Mathematics and Computer Science,"
This is the introductory course on dynamical systems offered at
DTU. Many models in science and engineering are differential
equations describing the evolution of some variables. Dynamical
systems theory is the study of such evolution aiming to answer
questions like: What is the long term dynamics? How does the system
depend on parameters? These are very important questions in
applications and hence dynamical systems theory is a very important
topic in science and engineering. Dynamical systems is also a
fascinating field of mathematics as it combines most of the core
mathematical disciplines, in particular, analysis and geometry.

The course will lay the mathematical foundation for the following
more advanced courses: 01257 Advanced Modelling - Applied
Mathematics, where the students get to apply dynamical systems
theory to concrete problems in modelling, and the more advanced and
theoretical course 01618: Dynamical Systems 2. 
","Determine phase portraits for linear ordinary differential
equations. Prove or disprove stability in systems. Decide and exploit hyperbolicity in the analysis of equilibrium
points. Operate with stable, unstable and center manifolds. Apply Poincaré-Bendixon theorem to show the existence of limit
cycles. Classify local bifurcations in general and find the possible
local bifurcations in a specific system. Apply Hartman-Grobman theorem about linearisation to give a
qualitative description of the dynamics in a vicinity of a
hyperbolic equilibrium Combine the aforementioned points to give a global description
of certain dynamical systems.","
Phase portraits of linear systems. Stability analysis including the
Hartman-Grobman theorem. Stable, unstable and center manifolds.
Local bifurcation theory. Theory of planar systems including
Poincaré-Bendixon theorem. The mathematical techniques will be
applied to problems from physics and chemistry. 
","01025,01035","
Christian Henriksen,
Poul G. Hjorth,
Morten Brøns,
Jens Starke,
Kristian Uldall Kristiansen"
,,,,,,,,,,,,
01618, Dynamical Systems 2,English , 5 ECTS , 2016/2017 ,F3B (Fri 13-17),MSc,Department of Applied Mathematics and Computer Science,"
Nonlinear differential equation models occur in many branches of

engineering and the natural sciences. The course covers a range of

important advanced concepts and techniques from the theory of

dynamical systems that can be used to analyze such equations. In
the

last three weeks of the course the students will work in groups or

individually on projects related to current research activities
within

dynamical dystems at DTU. The course

will provide a solid background for a Master's thesis in
dynamical

systems. 
","Work independently with open problems in dynamical systems Formulate mathematical results orally and in writing Perform a bifurcation analysis of a dynamical system nderstand the basic properties of a chaotic dynamical system
and compute Lyapunov exponents to decide if a given dynamical
system is chaotic Read, understand and reproduce central proofs in the theory of
dynamical systems Construct simple proofs within the theory of dynamical
systems Read and understand research papers in dynamical systems Orally present advanced material within the subject.","
Bifurcation theory, chaos and other topics within dynamical systems
chosen together with the participants. 
",01617,"
Morten Brøns,
Christian Henriksen,
Jens Starke,
Poul G. Hjorth,
Kristian Uldall Kristiansen,
Mads Peter Sørensen"
,,,,,,,,,,,,
01666, Project work ,Danish , 10 ECTS , 2016/2017 ,F5A (Wed 8-12) and June,BSc,Department of Applied Mathematics and Computer Science,"
To qualify and train students in project work and provide a deeper
understanding of one or more subjects within mathematics and
mathematical modelling of technical systems. 
","Set up his/her own learning objectives for the project
work. Organize collaboration in a project group. Limit a subject area, suitable for a project of 10 ECTS, within
mathematics and/or mathematical modelling with sound professional
qualifications. Formulate relevant professional problems and hypotheses, which
can limit and guide the project. Plan and conduct a realistic project, make work plans and time
schedules, and adjust the plan according to new conditions and
acquired knowledge. Choose and apply resonable methods for the investigations of
problems and hypotheses. Collect and analyse data. Evaluate and summarize results. Write a structured technical report, including references and
citations. Presentation of methods and results oraly and in short written
form.","
The project content is chosen by the students and the teacher in
common. Project subjects are published in previous semesters. The
students may suggest projects themselves and find supervisors at
the DTU departments for Applied Mathematics and Computer Science
and and Management Engineering. The projects will typically include
one or more of the disciplines statistics, numerical
analysis/scientific computing, operations analysis, signal
processing, image analysis, geoinformatics, computer graphics,
geometry, coding theory, cryptology, discrete mathematics

and dynamical systems/differential equations. Beside the actual
project work, there will be given instructions in report writing,
group work, short intensive teaching in specific topics and more.
The course is finished by oral presentations for all participants
and an oral examination. The presentations will take place at the
end of the 13-week period and at the end of the 3-week period. 
",None,"
Mads Peter Sørensen"
,,,,,,,,,,,,
01715, Functional Analysis,English , 5 ECTS , 2016/2017 ,E4B (Fri 8-12),MSc,Department of Applied Mathematics and Computer Science,"
Many advanced mathematical disciplines, e.g., Fourier analysis,
numerical analysis, the calculus of variations, the theory of
differential and integral operators, have a common foundation
incorporating among others fundamental notions and abstractions
associated with linear spaces of functions (functional analysis).
It is the purpose of this course to provide students with basic
concepts from functional analysis to facilitate the study of
advanced mathematical structures arising in the natural sciences
and the engineering sciences and to grasp the newest technical and
mathematical literature. 
","List function spaces and sequence spaces used in functional
analysis, and list their main properties. State and relate the definitions of metric spaces, normed
vector space, Banach spaces, dual spaces, reflexive spaces, inner
product spaces, and Hilbert spaces. Explain fundamental concepts as isomorphisms, completeness,
separability, orthogonality, and dimension. State, relate, and determine different types of convergence in
normed vector spaces. Construct mathematical proofs of a methodical character. State, explain, and prove the fundamental theorems in
functional analysis. Identify and recast concrete problems in theoretical parts of
the natural and engineering sciences in terms of abstract
functional analytic notions, such as Banach spaces and Hilbert
spaces. Solve concrete mathematical problems by abstract results from
functional analysis","
Bounded and unbounded linear operators in normed vector spaces.
Completion of normed vector spaces. Construction of L^p-spaces by
completion of spaces of continuous functions. General Banach space
and Hilbert space theory. The projection theorem. Bounded and
unbounded operators on Hilbert spaces. Weak, weak-*, and strong
convergence. Baire's category theorem. The Hahn-Banach theorem.
The Open Mapping Theorem. The Uniform Boundedness theorem. The
Closed Graph theorem. The Spectral Theorem for compact,
self-adjoint operators on separable Hilbert spaces. Applications of
functional analytical methods within, e.g., PDEs, wavelet theory,
frame theory, or optimization. 
","01125,01330,01325","
Ole Christensen"
,,,,,,,,,,,,
01716, Advanced Topics in Applied Functional Analysis,English , 5 ECTS , 2016/2017 ,F2B (Thurs 8-12),MSc,Department of Applied Mathematics and Computer Science,"
The primary goal is to utilize and apply fundamental notions,
abstractions, and principles of functional analysis towards solving
concrete mathematical problems arising in engineering and natural
sciences. In addition we aim at strengthening students'
analytical, logical reasoning, and problem solving abilities. 
","Identify functional analytic abstractions in statements of
concrete model problems Interpret model problems in functional analytic terms and
formally verify prerequisites for such interpretations Utilize and apply fundamental functional analytic principles
towards analyzing and solving model problems Interpret certain computational algorithms in functional
analytic terms Follow and apply logical strategies of formal mathematical
arguments Establish the validity mathematical statements about models by
constructing and providing formal arguments Know and master the relevant mathematical language and be able
to communicate abstract and precise mathematical statements and
reasoning orally and in writing. Know and master advanced topics in functional analysis such as
the spectral theorem for compact operators, compact embeddings and
the Lax-Milgram Theorem.","
This is a topical course and its content may vary from one year to
another. Representative topics include: calculus of variations,
frames, harmonic analysis, integral and partial differential
equations, inverse problems, numerical functional analysis,
PDE-constrained optimization, wavelet and multiresolution analysis.
Please contact course responsible for more information.

In the spring 2017, the course theme is: functional analytic
methods for integral and/or partial differential equations. Some
specific keywords include: compact sets and operators, Sobolev
spaces, fixed point theorems, Galerkin method, and FEM. Moreover,
we will consider variational analysis and optimization. 
",01715,"
Kim Knudsen"
,,,,,,,,,,,,
01901, Calculus and algebra 1,Danish , 5 ECTS , 2016/2017 ,E1A (Mon 8-12) and E3A (Tues 8-12)  or  E2B (Thurs 8-12) and E4B (Fri 8-12)  or  F3A (Tues 8-12) and F4B (Fri 8-12),BEng,Department of Applied Mathematics and Computer Science,"
To provide the student with thorough knowledge and practical skills
in the parts of mathematics necessary in modern engineering and
introduce the students to various work methods used in further
studies. 
","Apply the algebraic and geometric representation of the complex
numbers and the complex exponential function Apply the complex exponential function. Do calculations with complex numbers both by hand and using a
computer. Use polynomials with complex coefficients Do calculations with polynomials, both by hand and using a
computer. Solve simple differential equation of first and second
order Use Taylor polynomials for the approximation of functions in
one variable Use partial derivatives to characterize functions of two
variables Apply mathematics to solve simple engineering problems Apply symbolic software tools, currently Maple to solve and
graphically display mathematical problems and solutions","
Complex numbers, polynomials, differential equations of order one
and two, partial derivatives, Taylor's formula for functions of
one variable. 
",None,"
Peter Hoffmann,
Morten Brøns"
,,,,,,,,,,,,
01902, Calculus and algebra 2,Danish , 5 ECTS , 2016/2017 ,E4B (Fri 8-12)  or  F4B (Fri 8-12)  or  F3A (Tues 8-12),BEng,Department of Applied Mathematics and Computer Science,"
To provide the student with thorough knowledge and practical skills
in the parts of mathematics necessary in modern engineering and
introduce the students to various work methods used in further
studies.

To give the students the ability to read scientific papers that use
mathematics.

Learning objectives: 
","Apply Gaussian elimination to solve systems of linear
equations Perform elementary computations involving matrices and
determinants Find real and complex eigenvalues and eigenvectors for
matrices Solve homogeneous and inhomogeneous systems of linear
differential equations Apply symbolic software tools, currently Maple to solve and
graphically display mathematical problems and solutions Know the notion of convergence of an infinite series and
specifically be able to understand the convergence of geometric
series. Know Fourier series on real and complex form Be able to compute and identify Fourier series of simple
periodic functions","
systems of linear equations, Gaussian elimination, matrices,
determinants, eigenvalues, eigenvectors, systems of differential
equations, infinite series, the notion of convergence, Fourier
series 
",01901,"
Hans Christian Pedersen,
Morten Brøns"
,,,,,,,,,,,,
01903, Calculus and algebra 2 (first halve),Danish , 2.5 ECTS , 2016/2017 ,F4B (Fri 8-12),BEng,Department of Applied Mathematics and Computer Science,"
To provide the student with thorough knowledge and practical skills
in the parts of mathematics necessary in modern engineering and
introduce the students to various work methods used in further
studies.

To give the students the ability to read scientific papers that use
mathematics.

Learning objectives: 
","Apply Gaussian elimination to solve systems of linear
equations Perform elementary computations involving matrices Perform elementary computations involving determinants Find real and complex eigenvalues of matrices Find eigenvectors of matrices Solve homogeneous systems of linear differential equations Solve inhomogeneous systems of linear differential
equations Apply symbolic software tools, currently Maple to solve and
graphically display mathematical problems and solutions","
systems of linear equations, Gaussian elimination, matrices,
determinants, eigenvalues, eigenvectors, systems of differential
equations 
",01901,"
John Kryger Sørensen,
Morten Brøns"
,,,,,,,,,,,,
01904, Discrete mathematics,Danish , 5 ECTS , 2016/2017 ,E5A (Wed 8-12),BEng,Department of Applied Mathematics and Computer Science,"Learning a number of concepts from logic, set theory and Boolean algebra. These concepts are andvendt to gennemfølre directly, indirectly and by induction. Being able to solve some simple recurrence relations and use the concept of generating function.","A student who has met the objectives of the course will be able to:
Formulate and develop logical expressions, quantity expressions and expressions of Boolean algebra.
Reduce logical expressions, quantity expressions and expressions of Boolean algebra.
Handle canonical forms of logical expressions.
Explain the principles of direct and indirect evidence
Implement direct and indirect evidence
Rede Lead for principles by induction and carry out simple proof by induction
Prepare simple recurrence relations
Could solve simple linear recurrence
Handle simple generating functions","This course will cover a series of concepts from logic, set theory and Boolean algebra. These concepts are andvendt to gennemfølre directly, indirectly and by induction. Being able to solve some simple recurrence relations and use the concept of generating function.",None,"
Elmar Wolfgang Tischhauser"
,,,,,,,,,,,,
02001," Research Immersion, DTU Compute",English , 5 ECTS , 2016/2017 ,July,MSc,Department of Applied Mathematics and Computer Science,"
The overall objective is that the student should learn research
method, develop her work ethos, and improve her scientific writing
competencies. Through participation in a research project the
student will try to answer a question related to work carried out
in a section of the department and learn how to communicate
scientific results. 
","Work in a focused and strategic manner to retrieve scientific
literature Read scientific literature and extract information of relevance
to a scientific project Set clearly delimited goals for a small scientific project Plan, carry out and finalize a project under tight time
constraints Describe in writing: the societal relevance and scientific
importance of a particular problem Describe in writing: how a proposed method relates to prior
work Describe in writing: through analysis of a problem how one is
led to a particular solution Describe in writing: the results of an experiment Describe in writing: the implications and conclusions drawn
from an analysis of the results of an experiment","
Introductory material on the scientific method. Participation in a
short-term research project in collaboration with a supervisor from
DTU Compute. Independent research work. The results of the research
are communicated in a report that must be structured according to a
provided template which closely follows the structure of a
scientific paper 
",,"
Jan Madsen,
Jakob Andreas Bærentzen"
,,,,,,,,,,,,
02101, Introductory Programming,Danish , 5 ECTS , 2016/2017 ,E3A (Tues 8-12),BSc,Department of Applied Mathematics and Computer Science,"
The aim of the course is to convey the basic concepts of imperative
and object-oriented programming

and to enable the student to apply these concepts to common
object-oriented programming languages.

The student will be able to develop smaller programming projects
and to document the work in a report.

The student will be able to read program code and analyse the
behavior of the program independent of an implementation. 
","Design and document the structure of an object-oriented
program. Implement a worked out design. Understand and apply the basic items of the programming
language. Choose and apply suitable data types and data structures. Understand and apply the facilities of the actual programming
language to handle polymorphism, inheritance and
encapsulation. Recognize a few, simple design patterns. Analyse the run-time behavior of a program. Write a clear and well-structured report documenting all the
central aspects of a programming project. To be familiar with and to be able to express oneself in the
Danish and English terminology.","
The course uses Java as programming language and covers the
following topics:

- types, primitive and referenced

- basic programming constructs (loops, branching statements, etc)

- values, operators and expressions

- classes, objects, fields and methods

- use of libraries

- design of classes, hierarchies, inheritance

- abstraction (abstract classes, interfaces)

- error/exception handling

- use of development tools 
",None,"
Paul Fischer"
,,,,,,,,,,,,
02102, Introductory Programming,Danish , 5 ECTS , 2016/2017 ,F3A (Tues 8-12),BSc,Department of Applied Mathematics and Computer Science,"
The aim of the course is to convey the basic concepts of imperative
and object-oriented programming and to enable the student to apply
these concepts to common object-oriented programming languages.

The student will be able to develop smaller programming projects
and to document the work in a report.

The student will be able to read program code and analyse the
behavior of the program independent of an implementation. 
","Design and document the structure of an object-oriented
program. Implement a worked out design. Understand and apply the basic items of the programming
language. Choose and apply suitable data types and data structures. Understand and apply the basic object-oriented functionalities
of the programming language. Recognize a few, simple design patterns. Analyse the run-time behavior of a program. Write a clear and well-structured report documenting all the
central aspects of a programming project.","
The course uses Java as programming language and covers the
following topics:

- types, primitive and referenced

- basic programming constructs (loops, branching statements, etc)

- values, operators and expressions

- classes, objects, fields and methods

- use of libraries

- design of classes

- basic error/exception handling

- use of development tools

In addition the C programming language is introduced. 
",None,"
Jørgen Villadsen"
,,,,,,,,,,,,
02105, Algorithms and Data Structures 1,Danish , 5 ECTS , 2016/2017 ,F2B (Thurs 8-12),BSc,Department of Applied Mathematics and Computer Science,"
The course introduces a number of fundamental concepts and
techniques for construction and analysis of efficient algorithms
and data structures. To be able to describe, evaluate, and apply
fundamental/basic algorithms and data structures. And to be able to
analyze an algorithm with respect to running time and use of
resources. 
","Describe an algorithm in an understandable way, i.e.,
accurately, concise and unambiguous. Argue for the correctness of algorithms. Analyze algorithms, including being able to determine the
running time and space consumption in asymptotic notation. Identify and formulate the underlying algorithmic problem in a
given problem. Apply basic data structures like stacks, queues, linked lists
and hash tables. Use graphs to model a given problem. Apply and analyze basic graph algorithms, for example BFS, DFS
and Dijkstra's algorithm. Analyze, evaluate, and compare algorithms / data structures and
in the light of this, select an appropriate algorithm / data
structure for solving a given problem. Modify known algorithms to solve a given problem. Describe and compare different algorithmic paradigms, including
recursion, greedy algorithms, and divide-and-conquer. Implement and test data structures and algorithms, and make
appropriate tests and empirical analysis of them. In a clear understandable language argue for choices made when
solving a problem.","
The concept of algoritthms, graphs and trees, recursion and
iteration, fundamental algorithms for sorting of data, techniques
to analyze complexity of algorithms (running time analysis,
analysis of space usage), O-notation, etc. Elementary data
structures (stacks, queues, linked lists, etc), advanced data
structures (hash tabels, binary search trees, etc), graph
algorithms (BFS, DFS, topological ordering, ...), greedy algorithms
and divide-and-conquer algorithms. 
","01017,01917","
Philip Bille,
Inge Li Gørtz"
,,,,,,,,,,,,
02110, Algorithms and Data Structures 2,English , 5 ECTS , 2016/2017 ,E2B (Thurs 8-12),MSc,Department of Applied Mathematics and Computer Science,"
To provide the student with an understanding of the techniques
involved in the construction and analysis of advanced algorithms.
To strengthen the student's ability to construct algorithms. 
","classify advanced data structures and algorithms design
patterns. describe the properties of advanced data structures and
algorithms. analyse algorithms with respect to the use of resources. prove the correctness of algorithms. recover the underlying abstract structure of a real
problem. adapt generic algorithms to new problem settings. design efficient data structures and algorithms. implement advanced algorithms. describe an algorithm in a comprehensible way.","
Basic graph algorithms (balanced search trees, shortest paths,
flows). Algorithms for string matching. Techniques for the design
and analysis of algorithms (dynamic programming,
divide-and-conquer). Algorithms in Computational Geometry.
Randomized algorithms. 
",02105,"
Inge Li Gørtz,
Philip Bille"
,,,,,,,,,,,,
02121, Introduction to Software Technology,Danish , 10 ECTS , 2016/2017 ,E4B (Fri 8-12) and January,BSc,Department of Applied Mathematics and Computer Science,"
To know of the contents, methods and challenges in studying and
subsequent professional work within software technology and to be
able to document the work and results. 
","Make a study plan. Identify, analyze, and compare known methods for solving a
simple problem within software technology. Adapt known methods for the solution of a simple problem within
software technology. To implement a solution in form of a product. Evaluate a solution of a problem within software
technology Explain briefly in writing and orally relevant aspects of a
problem or the solution of a problem within software
technology. Organize, plan, and carry out collaborative work in a smaller
project group. Apply relevante software technologies and tools.","
Relevant topics in programming, software tools, computing systems,
problem solving, and project work. Study techniques and planning of
study. 
",,"
Carsten Witt"
,,,,,,,,,,,,
02122, Software Technology Project,Danish , 10 ECTS , 2016/2017 ,F5B (Wed 13-17) and June,BSc,Department of Applied Mathematics and Computer Science,"
To develop, evaluate and document a larger software project. 
","Starting from a partial problem description, identify, delimit,
and define a problem within software technology. Identify, analyze, and compare known methods for solving a
problem within software technology. Apply, combine, and further develop known methods for solving a
problem within software technology. Seek out new methods for solving a problem within software
technology. Evaluate a solution of a problem within software
technology Explain briefly in writing and orally all relevant aspects of a
problem or the solution of a problem within software
technology. Organize, plan, and carry out collaborative work in a smaller
project group. Present briefly and precisely a problem or the solution of a
problem within software technology. Write a coherent technical report documenting a software
development project. Be familiar with the English technical terminology to be able
to search for information, read manuals and communicate with other
professionals.","
Project work in small groups related to software development. One
can choose among a number of standard projects.

Alternatively, one can before the start of the course choose
another project (also related to software development) with a
teacher. 
",None,"
Paul Fischer"
,,,,,,,,,,,,
02128, Software Project,Danish , 5 ECTS , 2016/2017 ,June,BSc,Department of Applied Mathematics and Computer Science,"
To enable partipants to study a given software technology by
themselves and use this for the development and documentation of a
smaller software prototype. 
","acquire detailed knowledge about a given software technology by
self-tuition. give an account of the principles of a given software
technology. utilize tools related to a given software technology. draw up ideas for a software solution to a problem. analyze and delimit solution ideas. carry out the development of a smaller software solution from
idea to prototype. document the development of a smaller software product through
a report. demonstrate and explain a software product. give an account of innovation aspects of software
development.","
Introduction to a given software technology. Exercises and labs
with the technology. Introduction to software product development.
Sketch and an narrowing of a product idea. Development of a
software product. Test and documentation. Product demonstration. 
","02121,02101,02161,02105","
Hans Henrik Løvengreen"
,,,,,,,,,,,,
02131, Embedded systems,Danish , 10 ECTS , 2016/2017 ,E5 (Wed 8-17),BSc,Department of Applied Mathematics and Computer Science,"
The course covers the development of systems where parts can be
implemented in either hardware or software. The course emphasize a
technical and theoretical correspondence between development of
hardware and software, and introduces the fundamental techniques of
codesign.

Passing the course will enable participants to describe the most
essential components in a computer as well as the relation between
the components. They will be able to describe and use selected
programs to assist software development. They will understand and
use the field’s terminology in technical reports. They will be able
to design small digital systems and make reasonable predictions
about their properties, especially with respect to speed, size, and
energy consumption. They will be able to develop and document both
programs and routine libraries bridging the gap between machine
specific details and programs written in traditional programming
languages. 
","identify software and hardware components of embedded
systems identify and describe functioning of the execution platform,
including general purpose processor, application specific
instruction set processor, dedicated hardware, and operating system
and middleware use a software program as an executional specification develop a software program for an embedded processor analyse correctness and performance of a software program design a hardware architecture using a hardware description
language (HDL) analyse correctness and performance of a hardware
architecture propose a hardware architecture by seperating software or
executional specification into control and dataflow compare and contrast software and hardwre implementations of an
executional specification propose and argue a software/hardware architecture from an
executional specification (codesign) use a tool chain of embedded systems design write a technical report which documents results and analysis
in a precise and clear form","
The structure of general processors, including the datapath, the
control unit and

the memory elements. Design and construction of specialised
processors, including

combinatorial and sequential logic, state machines, and composition
of complex

components by use of busses.

Programming at a machine specific level; tools for program

development; compilation and interpretation; test and verification;
computers as layered systems; a user's and a program's
interface to an operating system;

elementary multiprogramming. 
","02102,02199,02100,02101,02115","
Jan Madsen,
Paul Pop"
,,,,,,,,,,,,
02138, Digital Electronics 1,Danish , 5 ECTS , 2016/2017 ,E4B (Fri 8-12),BSc,Department of Applied Mathematics and Computer Science,"
To introduce the basics of digital electronics and to enable
participants to specify, analyze, synthesize and implement simple
digital circuits (combinatorial logic and finite state machines). 
","Explain the basic principles and underlying assumptions for
synchronous digital circuits – the 'discrete abstraction'
and the fundamental implementation using logic functions
(combinatorial circuits) and memory elements (flip-flops
etc.). Explain the operation of the MOS-transistor as an ideal logic
switch, and describe how transistors are used to implement CMOS
logic (logic gates and memory elements). Explain the basics of Boolean algebra and use it for
describing, developing and reducing logic expressions – including
the canonical forms: sum-of-products and products-of sums. Transform between a logic expression and a digital circuit
implemented using logic gates such as AND, OR, NOT, NAND and
NOR. Describe commonly used number and data representation formats
and convert between different number representations. Implement and operate small combinatorial circuits in the lab
using discrete logic gates (simple 74xxx components). Explain the operation and implementation of fundamental
arithmetic circuits and other typical combinatorial circuit
building blocks (multiplexor, decoder, etc.). Explain the operation and implementation of fundamental memory
elements (D flip-flop’s and D-latches). Calculate propagation delay (critical path) of a combinatorial
circuit. Explain the structure and operation of a finite state machine
(Moore type), and explain step-by-step how such a finite state
machine is designed (state graph, state table, state minimization,
state encoding, etc.). Transform a verbal description of an intended circuit into a
specification using Boolean algebra, truth tables, state-graphs,
etc., and subsequently to synthesize and implement the
circuit. Demonstrate basic knowledge about simulation and synthesis
tools for digital circuits, including the ability to describe small
combinatorial circuits using a hardware description language (such
as VHDL).","
The digital abstraction (binary signals and discrete time). Number
representation. The MOS-transistor as a logic switch.
Implementation of basivc digital components: gates, combinatorial
circuits, latches and flip-flops. Boolean algebra. State graphs.
Specification and synthesis of combinatorial circuits and finite
state machines. 
",None,"
Flemming Stassen,
Jens Sparsø"
,,,,,,,,,,,,
02139, Digital Electronics 2,Danish , 5 ECTS , 2016/2017 ,F1B (Thurs 13-17),BSc,Department of Applied Mathematics and Computer Science,"
To provide the participants with the competences necessary to
design digital circuits that perform simple calculations or
control-tasks using typical synthesis and simulation tools
(currently VHDL, ModelSim and Xilinx ISE), and to implemente these
circuits using reconfigurable hardware (FPGA technology). 
","Design digital circuits that implement simple computations or
control-tasks, and assess design alternatives with respect to area,
speed and energy consumption. Describe such circuits using a hardware description language,
VHDL, and apply common simulation and synthesis tools to implement
these circuits using reconfigurable hardware (FPGA-technology) by
using VHDL-templates and predefined design-flows. Document a design project in a technical report. Explain the difference between a Mealy type and a Moore type
finite state machine and analyze and design such synchronous finite
state machines. Use R-C-switch models to calculate propagation delay and energy
consumption of a given combinatorial circuit. Define and explain timing parameters for RTL-level components
(registers and logic). Use these parameters to calculate the
critical signal paths in a given sequential circuit, and determine
the minimum possible clock period for the circuit. Explain the phenomenon meta-stability and describe how input
signals may be synchronized. Document a design project in a technical report. Explain the structure and operation of a sequential circuit
consisting of a so-called data-path and a finite state machine
control unit. Design such FSMD implementations of simple algorithms
and control circuits. Design such an FSMD-implementation of simple algorithms and
control circuits. Explain the phenomenon logic hazard, and eliminate such hazards
in a given circuit.","
Calculation of circuit delay and energy consumption of
combinatorial circuits using R-C-switch models. Macromodels and
timing parameters for combinatorial circuits and flip-flops.
Calculation of critical path, i.e., the minimum period of the clock
signal for which the circuit will operate correctly.

Metastability and synchronization of asynchronous input signals.

FPGA technology: Basics of structure and principles of operation.

FSMD-style implementation template for a digital circuit (a
so-called data-path controlled by a finite state machine).

Elementary VHDL: (a) basic language constructs, (b) undestanding
its semantics based on how a given circuit simulates, (c)
code-templates for combinatorial and sequential circuits.

Lab exercises covering VHDL and related CAD-tools for simulation,
synthesis and prototype implementation using FPGA technology
(currently Modelsim and Xilinx). 
",02138,"
Jens Sparsø,
Martin Schoeberl"
,,,,,,,,,,,,
02141, Computer Science Modelling,English , 10 ECTS , 2016/2017 ,"F4 (Tues 13-17, Fri 8-12)",BSc,Department of Applied Mathematics and Computer Science,"
The students learn to understand and apply the central models and
formalisms introduced in the course and to use software tools
related to these formalisms. 
","state the difference in expressive power of some of the formal
models covered interpret the meaning of a given description in a formal model
(e.g., automata, grammars, semantics) derive a description in a formal model (e.g., automata,
grammars, semantics) of a desired property or behaviour given in a
textual description translate into another model (e.g. regular expressions to
NFA) modify a given description according to certain criteria (e.g.
minimization of automata, removal of useless productions, adding
language constructs) operate selected tools relating to the formal models (e.g.,
lexers, parsers) dectermine whether a description in a given formal model
satisfies a given property derive properties using given proof strategies (e.g. structural
induction, stated theorems) select formal models may be necessary or useful for a given
problem achieve the goals as part of a group effort, while maintaining
individual accountability communicate his or her constructions and solutions in a clear
and precise manner","
The course covers three main topics:

(1) Regular languages and their relation to (deterministic and
non-deterministic) finite automata, practical applications
(searching in texts, lexical analysis, security automata, etc.) and
some key theoretical properties (including closure and decidability
properties).

(2) Context free languages and their applications (in parsing and
XML documents) together with a brief introduction to pushdown
automata and their relationship to context free languages.

(3) Transition systems and their applications in operational
semantics for a variety of language constructs as well as formal
techniques for reasoning about them.

The course includes hands-on experience with various tools and the
students are required to solve theoretical as well as practical
exercises. 
",,"
Hanne Riis Nielson,
Sebastian Alexander Mödersheim,
Flemming Nielson,
Alberto Lluch Lafuente"
,,,,,,,,,,,,
02148, Introduction to Coordination in Distributed Applications,Danish , 5 ECTS , 2016/2017 ,January,BSc,Department of Applied Mathematics and Computer Science,"
Distributed applications exploit all kind of networked resources
(from local networks, to clouds, to the entire Internet) to offer
ubiquitous and performant services. Typical examples are smartphone
apps that delegate part of the computation to a remote server.
Programming a distributed application may be tedious and
challenging, due to the need to consider different kinds of
devices, and integrate communication via many different channels.

High-level programming and coordination paradigms simplify this
task, by offering suitable abstractions that hide low level
concurrency and communication issues thus allowing one to
concentrate on the business logic of the application. Good examples
for this support are high-level coordination paradigms such as
actors and tuple spaces which have been adopted in mainstream
languages and frameworks such as Java, Python, .NET, C++ and Scala.

This course will provide students a first experience with the
development of distributed applications. The course will focus on a
Java-based framework that provides a simple, high-level approach to
the coordination of distributed applications based on distributed
tuple spaces, where the network is abstracted as a set of
localities and communication is based on distributed data items
that can be queried or retrieved using pattern matching.

The course will include lectures providing the basic background,
project work, and presentations by the students. Students will work
in groups on self-defined projects where they develop some simple
distributed applications. 
","Understand, explain and apply the distributed tuple space
coordination paradigm; Model a simple distributed application based on tuple
spaces; Identify and solve some typical concurrency and communication
issues; Implement a simple distributed application using tuple
spaces; Deploy a simple distributed application on different
networks; Organize, plan, and carry out collaborative software
development in a small group; Write a technical report on the design and implementation of a
simple distributed application; Expose orally (in english) some basic aspects in the design and
implementation of a simple distributed application.","
This course will cover:

(1) The distributed tuple space coordination paradigm;

(2) A Java-based run-time framework supporting the tuple space
coordination paradigm;

(3) A set of simple distributed algorithms and applications. 
","02102,02101,02161,02105","
Alberto Lluch Lafuente,
Christian W. Probst"
,,,,,,,,,,,,
02155, Computer Architecture and Engineering,English , 5 ECTS , 2016/2017 ,E2A (Mon 13-17),BSc,Department of Applied Mathematics and Computer Science,"
To provide the participants with in depth knowledge on computer
organization, and an associated understanding of issues which
influence the run-time of programs as well as an understanding of
the interplay between hardware and software.

Today processors are used in all forms of electronic equipment and
hence the course is relevant for software developers as well as
(electrical) engineers designing embedded systems where it is often
important to make efficient use of the resources of the processor
in order to optimize performance, cost or energy consumption 
","Describe the internal structure of a processor, including
pipeline, cache memory, memory hierarchy, virtual memory, buses,
etc. Explain the function of these elements and explain how they
influence the runtime of programs, and the complexity of the
underlying hardware (area, speed and energy). Apply this knowledge to calculate and optimize the run-time of
programs; both small program fragments and large programs for which
key parameters like cache-miss rates have been established. Explain the parameters throughput and latency, and explain the
relationship between these parameters. Explain how hardware (e.g. technology and architecture) and
software (i.g. instruction set, compiler and operating system)
forms a whole, and that the interface between the two is a key
element in all systems Give examples of trade-off and optimizations involving both
hardware and software Explain the instruction set architecture of a typical
processor. Document project work in the form of a technical report
addressing engineers in the field. The report must conform to usual
requirements to form, content and level of abstraction.","
Computer organization: Introduction to computer organization and
instruction sets. Organization of the processor in a modern
RISC-computer (control unit, data path, pipelining). The
relationship between processor organization and instruction set.
Buses and I/O units and between processor organization and
operating systems. Memory hierarchies, cache memories and virtual
memory. New architectures which exploit different forms of
parallelism.

In parallel with the lectures students work on problems and
exercises and towards the end of the course students work on a
final small project. The project can for example be to analyze and
optimize the runtime of a given program by considering the
processors pipeline structure and memory hierarchy using a
simulator. 
","02102,02139,02131","
Alberto Nannarelli,
Martin Schoeberl"
,,,,,,,,,,,,
02156, Logical Systems and Logic Programming,English , 5 ECTS , 2016/2017 ,E4A (Tues 13-17),BSc,Department of Applied Mathematics and Computer Science,"
The aim of the course is to give the students an introduction to
some of the basic declarative formalisms from formal computer
science and logic that can be used for describing, analysing and
constructing IT-systems.

It will cover theoretical insight as well as practical skills in
relevant high-level programming languages. 
","relate different kinds of proof systems construct formal proofs in elementary logics exploit selected classical and non-classical logics use the backtracking algorithm for simple problem solving analyze the effect of a declarative program establish a functional design for a given problem, so that the
main concepts of the problem are directly traceable in the
design master logical approaches to programming in terms of defining
recursive predicates communicate solutions to problems in a clear and precise
manner","
The course covers logic programming (in particular Prolog as a
rapid prototyping tool), elementary logics (including propositional
and first-order logics), proof systems (deductive systems and/or
refutation systems), and problem solving techniques (for instance
the backtracking algorithm). 
",,"
Jørgen Villadsen"
,,,,,,,,,,,,
02157, Functional programming,English , 5 ECTS , 2016/2017 ,E4B (Fri 8-12),BSc,Department of Applied Mathematics and Computer Science,"
To provide the participants with a conceptual and practical basis
for modelling, analysis and construction of systems using a
functional, declarative approach. 
","master functional approaches to programming master the concept recursive function master application of functional data types apply the concept of functions as ""first-class
citizens"" derive types for functional programs analyze the effect of a functional program explain the resource demands of simple functional programs establish a functional design for a given problem, so that the
main concepts of the problem are directly traceable in the
design communicate solutions to problems in a clear and precise
manner","
Functional programming, covering recursive functions, recursively
defined detatypes, higher-order functions, a strong type system,
and problem solving techniques.

Declarative modelling using a functional programming language with
a strong type system. 
",,"
Michael Reichhardt Hansen"
,,,,,,,,,,,,
02158, Concurrent Programming,English , 5 ECTS , 2016/2017 ,E1B (Thurs 13-17),BSc,Department of Applied Mathematics and Computer Science,"
To provide the participants with a conceptual and practical basis
for construction of systems comprising multiple interacting
concurrent activities. 
","model and analyse concurrent activities using mathematical
models explain the workings of classical synchronization and
communication mechanism as well as their mutual relationships apply knowledge of number of common communication and
coordination solutions for solving new problems verify correctness of concurrent algorithms using formally
based verification tools identify relevant usage of concurrent activities within
development of usual applications implement concurrent activities efficiently using threads and
processes apply concurrency for utilization of modern machine
architectures use concurrency related concepts for concise problem analysis
and documentation of solutions","
Concurrent programming: Processes, synchronization, communication.
Process models, atomic actions.

Safety and liveness properties. Deadlock. Verification techniques
and tools.

Critical regions, semaphores, monitors, synchronous and
asynchronous message passing, call mechanisms, distributed objects,
tupple spaces. Concurrent data structures.

System design: Common communication patterns and algorithms.
Client-server paradigm. Transactions and concurrency control. 
","02141,02102,01017,02101,02105,02131","
Hans Henrik Løvengreen"
,,,,,,,,,,,,
02159, Operating Systems,English , 5 ECTS , 2016/2017 ,E1A (Mon 8-12),BSc,Department of Applied Mathematics and Computer Science,"
Operating systems provide computer programs with the necessary
execution environment. They are used in computer systems ranging
from very small embedded systems to large scale server
installations. Although these different systems require different
forms of operating systems, the services provided are very similar.
In this course, you will be able to explore operating systems and
also investigate their implementation and function. 
","explain the role of the operating system and how computer
programs are executed. program at the operating system interface. define in own words basic operating system concepts such as
processes, threads and scheduling. design and implement parts, such as the scheduler, of operating
systems. critically analyze an operating system and propose some
applications for which it is particularly suitable. evaluate operating systems and propose a suitable operating
system for a given computer system. design and implement device drivers and other programs which
access hardware directly. propose and design strategies for implementing operating
systems for multi-processor systems. use English as a working language","
Operating systems: Processes, threads, scheduling. System calls.
Support for synchronization and communication. Operating system
organizations. Device drivers. Virtual memory. File systems.
Virtualization. Security aspects. 
","10000,02102,02101,02115,02105,02131","
Sven Karlsson"
,,,,,,,,,,,,
02161, Software Engineering 1,Danish , 5 ECTS , 2016/2017 ,F2A (Mon 13-17),BSc,Department of Applied Mathematics and Computer Science,"
To give students an introduction to software development. To give
students skills concerning the solution of a small software
development problem, spanning from the problem statement to the
implementation and use of the concrete software product. 
","establish a requirements specification in the form of use case
descriptions on the basis of a given problem statement. apply the class and sequence diagrams of UML in order to
describe a program design. plan a functional test on the basis of a given requirements
specification. plan a structural test on the basis of a given program. complete a small software project and produce a technical
documentation, so that important concepts of the problem statement
are tracable in the implementation. present their results and analyses in a succinct manner. explain typical phases and roles in a software development
process. complete problem, design, and implementation-oriented analyses
and explain pros and cons for alternative solutions. use concepts from design-by-contract in connection with the
documentation of a program. use program libraries in connection with the development of
programs. use some design patterns.","
Softwaredevelopment, comprising the typical phases in the
development and different roles in development teams and agile
processes.

Software documentation, comprising analysis of problem statement,
requirements specification, software design, test and
implementation. For this purpose, parts of UML is introduced, e.g.
use cases, class diagrams and sequence diagrams.

A development environment will be used. 
",02101,"
Hubert Baumeister"
,,,,,,,,,,,,
02162, Software Engineering 2,English , 10 ECTS , 2016/2017 ,"E3 (Tues 8-12, Fri 13-17)",MSc,Department of Applied Mathematics and Computer Science,"
To give the students skills in professional development of large
software systems. 
","list the different activities in developing software list software development process models and choose an
appropriate software development process model for a given
task analyse a problem domain and build a domain model capture and document requirements design a software system choose an appropriate architecture for a software system document software designs and software architectures analyse/evaluate a design implement a design devise and implement a test plan","
Domain engineering.

Requirements engineering.

Software architeture.

Software design.

Implementation techniques.

Test, validation, and verification.

Software development process models.

Project management. 
","02161,02105","
Ekkart Kindler"
,,,,,,,,,,,,
02165, Development of Software Products,English , 5 ECTS , 2016/2017 ,January,MSc,Department of Applied Mathematics and Computer Science,"
To introduce servioce oriented product development from an
industrial perspective, covering processes, phases, roles and
aspects of the development of cloudbased services. To give students
experience in product development from the following point of
views: Product Management, Program Management, Development and
Release. This experience is given on the basis of a simple
(fictive) case study. 
","Analyze and apply principles for agile software development in
the context of a given project. Explain central concepts of software development processes Produce documents for the envisioning phase Produce documents for the planning phase, including, scenarios,
persoa, story boards, personas, quality of service, iteration plan,
risk analysis, system architecture, design and test Produce documents (deliverables) for the developing phase,
including code, unit test, end-to-end test, code coverage report,
test scenarios, test quality of service, automation, and threat
model Produce documents for the stabilizing phase, including bug
reports and test reports Apply an advanced, industrial development tool Complete a software development project in teams Plan and carry out release plan Communicate your product development work in a precise and
clear manner","
Development processes, where focus is on agile development
processes, team models, cloud / service oriented development
(Azure), and tools (VS.net and Visual Studio Team System), in order
to ensure the timely delivery of large, complex products or systems
with a long development time.

Product planning spanning from requirements capture, vision/scope
and pricing to rollout at the customers.

Program management, including project structure and plan, usability
design and test, project follow-up (including how to handle change
of plans), and the stabilization phase and release.

Development, including choice of technology, prototyping,
architecture, source control and build, coding (including
engineering excellence, security and privacy), unit test, build
verifications test and stabilization.

Testing, including strategies and exit criteria, tools, planning,
infra structure, test coding, configuration test, system test and
performance test. 
",,"
Stig Høgh,
Finn Gustafsson"
,,,,,,,,,,,,
02170, Database Systems,English , 5 ECTS , 2016/2017 ,F2B (Thurs 8-12),"BSc,,MSc",Department of Applied Mathematics and Computer Science,"
The course objective is to give an introduction to databases,
fundamental database concepts, and the usage of databases. As a
database is often the central component in an IT system, a basic
knowledge of database concepts is most useful in order to undertand
the design and working of most IT systems used by private and
public enterprises.

Students will become familiar with database theory and fundamental
database concepts, be able to make data models, be able to convert
these to simple databases, and be able to perform operations on
databases. Students will also get a basic knowledge of the tasks
normally performed by database designers and administrators. 
","Analyse a description of a problem to be solved as obtained by
discussion with clients Write a data dictionary to solve a given problem Design the entities and their relationships to solve a given
problem Design a conceptual modeling diagram for a given problem Convert a conceptual modeling diagram into a set of relations
(or tables) Normalise a set of relations into higher normal forms (better
data model) Program queries that will allow one to solve a given
problem Optimize queries (to lessen usage of resources and cut waiting
time) Optimise the physical storage of data Create databases in a widespread database management
system Perform basic programming tasks to perform computations and/or
automated updates on the database Understand tasks normally solved by database designers and
administrators","
Course lectures include:

- An introduction to databases

- The relational model and query language SQL

- Algebra and calculus based computations

- Entity-Relationship diagrams and relational schemas

- Extended E-R diagrams and alternative notations for modelling

- Features of good relational designs, atomic domains, and normal
forms

- Data storage and file structures

- Performance enhancements by indexing and hashing

- Query processing and optimization

- Some advanced database topics in database architectures

- Case studies. External guests will present database design,
maintenance and usage based on their own work experience.

Exercises and Group Project include:

- Exercises will follow lectures to clarify database theory and
concepts

- Exercises will use a free downloadable database system to build
data models & databases

- In a Group Project, students will do data modelling and build a
simple database 
","02110,01017,02105,01917","Flemming Schmidt,Bjarne Poulsen "
,,,,,,,,,,,,
02180, Introduction to Artificial Intelligence,English , 5 ECTS , 2016/2017 ,F3A (Tues 8-12),MSc,Department of Applied Mathematics and Computer Science,"
The aim is to provide the student with an understanding of basic
notions and techniques in artificial intelligence and to train the
student's abilities to apply these techniques. 
","explain search principles such as breadth-first and iterative
depth first search describe advantages and disadvantages of different search
principles choose adequate search principle for the problem at hand coin search principles into an algorithm and integrate it in a
system analyze and choose search heuristics describe game tree principles including optimization and
formulation of these as programs apply problem reduction analysis including use of AND/OR graphs
and BNF grammars explain representation of knowledge and reasoning using
predicate logic and graphs. describe basic machine intelligence scenarios for discussing
limitations of machine intelligence","
Search principles and state-space search algorithms Heuristic
search. Form and properties of the heuristic function.

Game tree analysis; mini-max algorithms with optimizations.

Problem reduction using AND/OR graphs.

Knowledge representation in predicate logic. Limitations of
artificial intelligence; Turing's test and the Chinese room
scenario. 
","02102,02101,02348,02312,02105","
Jørgen Fischer Nilsson"
,,,,,,,,,,,,
02190, IT Security (Health & IT),English , 7.5 ECTS , 2016/2017 ,E5B (Wed 13-17),BSc,Department of Applied Mathematics and Computer Science,"
To give participants an introduction to basic concepts of IT
security, which will give the students a broad understanding of
computer security and the security process, focussing on the health
sector. 
","Give an account of the most important problems to be addressed
in a security analysis of a given system Define security targets for a given IT system Analyse the use of a IT-system and identify threats,
vulnerabilities and risks Apply a standard method for risk analysis in connection with IT
security Give an account of possible measures to counter common threats,
vulnerabilities and risks in a given IT system Analyse and discuss the necessary measures to achieve given
security targets in a given IT system Give an account of relevant legal and organisational
requirements for IT security in the health sector Design a security system which can implement a given security
policy Document their work on the security process in a well-written
and concise report","
Basic security concepts: Confidentiality, integrity,
authentication, availability etc. Threats, vulnerabilities and
risks. Risk analysis for IT security. Security policies and
security targets. Mechanisms for protection against significant
security threats in individual computers and in computer networks,
with special focus on the Internet. Administration of IT security.
Legal and organisational aspects of IT security. 
",,"
Angelo Spognardi"
,,,,,,,,,,,,
02203, Design of Digital Systems,English , 5 ECTS , 2016/2017 ,E2B (Thurs 8-12),MSc,Department of Applied Mathematics and Computer Science,"
To enable students to design larger digital circuits in a
systematic way and to implement these in FPGA-technology using
typical CAD-tools (currently: VHDL, ModelSiM, XILINX ISE).

To enable students to analyze and optimize the speed and area of a
givren digital circuit. 
","Design a digital circuit that performs a given computation as a
sequential circuit consisting of a finite state machine and a
data-path. Systematically pipeline a given circuit and identify errors in
a given circuit where pipelining has been attempted. Explain the performance parameters throughput and latency,
explain the relationship between these and optimize the performance
of a given circuit. Analyze the timing-correctness of a given sequential circuit;
possibly a circuit suffering from clock skew. Explain the internal organization of a typical FPGA component
(XILINX) and explain how its resources are best exploited when
implementing a given circuit. Explain how the a given VHDL-description syntesize to hardware
(i.e., a structure of registers and combinational logic blocks) and
estimate the hardware resources used for the implementation.
Optimize the circuit by modifying the VHDL-code. Explain the phenomenon ""metastability"" and describe
how to correctly design a circuit comprising multiple clock
domains. Write efficient register transfer level VHDL code that
synthesize to the intended circuit implementation. Develop and apply testbenches for simulation and verification
of the functional correctness of a digital circuit Design complex digital circuits by stepwise refinement from a
specification down to a level from which a hardware implementation
can be synthesized. Organize and plan the design of a larger digital circuit in a
group comprising several students. Document this work (design, implementation and test) in the
form of a technical report addressing engineers in the field. The
report must conform to usual requirements to form, content and
level of abstraction.","
The course addresses design of digital systems at the RT-level, the
VHDL language, synthesis, and FPGA technology. Focus is on writing
efficient VHDL and on the relationship between VHDL-constructs and
the corresponding synthesized hardware implementations.

Design of digital systems. Data-path and Control. Pipelining. From
algorithm to circuit. Performance measures (throughput and
latency). The VHDL hardware description language. Simulation and
synthesis. Introduction of FPGA technoology. Design flow
(specification, stepwise refinement, simulation, synthesis,
implementation and test). Timing analysis of sequential circuits;
possibly circuits suffering from clock-skew.

A sequence of exercises supplements the lectures and provides
hands-on experience using VHDL and the associated CAD-tools. A
small project concludes the course. 
","02102,02131,30090,02139","
Jens Sparsø"
,,,,,,,,,,,,
02204, Design of Asynchronous Circuits,English , 5 ECTS , 2016/2017 ,F2A (Mon 13-17),MSc,Department of Applied Mathematics and Computer Science,"
The aim of the course is to introduce the participants to the
design of asynchronous circuit. This comprises circuits which
operate in a self-timed manner without a clock signal as well as
so-called globally-asynchronous locally-synchronous circuits, i.e.,
synchronous circuits with multiple clock domains. The course will
motivate the use of asynchronous circuits and teach the basic
theory and concepts, such that the participants will be able to:
(1) design control and data-processing circuits, and (2) read and
understand the literature in the field. 
","Evaluate and explain whether it is advantageous to use
asynchronous circuits when implementing a digital circuit for a
given application, and assess the effect on the properties of the
circuit (energy, speed, area etc.). Implement typical handshake components using typical handshake
protocols. Specify and design ”speed independent” control circuits using
relevant design methods and CAD tools. Construct smaller computing circuits by manually composing
so-called handshake components. Assess which handshake protocol is most appropriate to use in a
given situation. Explain what it means that a circuit is ”speed independent” or
”delay insensitive”, and analyze if a given smaller
(control)circuit possesses one of these properties. Analyze and optimize the speed of a circuit which is built from
handshake components; by using qualitative reasoning and by
performing quantitative calculations. Identify and explain the problems (synchronization and
metastability) related to communicating between several clock
domains, devise possible solutions and reason about the performance
and reliability of these.","
Motivation for using asynchronous circuits. Basic concepts,
communication protocols, and circuit implementation styles. Simple
circuit examples. Performance analysis: qualitatively and
quantitatively (latency, wavelength, and cycle time). Fundamental
theoretical concepts: classification (self-timed,
speed-independent, delay-insensitive), hazards isochronic forks and
arbitration. Control circuits: synthesis of speed-independent
control circuits from signal transition graph specifications.
Data-path circuits: design of efficient data-path circuits with
completion detection/indication. Relationship between handshake
protocols and circuit implementation. Design strategies/methods:
static data-flow structures and compilation from asynchronous
HDL's. Globally synchronous locally synchronous systems,
including digital circuits with multiple clock domains..
Synchronization when transferring data between independent clock
domains. Case studies: some recent (commercial) asynchronous
IC's. Current research trends. 
","02154,02203,02139,31090","
Jens Sparsø"
,,,,,,,,,,,,
02205, VLSI Design,English , 5 ECTS , 2016/2017 ,F3A (Tues 8-12),MSc,Department of Applied Mathematics and Computer Science,"
To enable the students to understand the basis of MOS technology,
including the MOS field effect transistor, and to choose a proper
production technology with due consideration of technical and
economical terms. To provide the students with complete
understanding of the design process for digital systems. To enable
students to a comprehensive design space exploration based on
models evaluation. To provide techniques and strategies aiming at
both low power and high speed design.

To understand design tradeoffs and different design approaches for
different technologies: ASICs, FPGAs, and SoCs. 
","Describe and explain the basis of MOS technology, including the
MOS field effect transistor Describe and explain basic methods and conditions in digital
integrated circuit design Describe combinational and sequential digital systems and list
their properties and characteristics (timing, area, power
dissipation) Explain, construct and analyze parts of a digital system,
including interconnections, with due consideration of technical and
economical terms Illustrate the main tasks to be performed in the design of a
digital system: simulation, logic synthesis and
place-and-route Apply suitable techniques to design of systems for high-speed
and low-power Design a digital system, or part of it, based on given
specifications and the methods learned Analyze the system designed, compare the results with some
reference design and evaluate system's performance","
Overview on MOS technology (masks, design rules and electrical
parameters) and basic components of MOS circuits (MOSFETs,
resistors, capacitors, switches).

Technology scaling.

Timing and power dissipation of combinational and sequential
components.

Design flow: levels of abstraction, design flow for ASICs.

Design tasks: simulation, synthesys, place&route.

Design for low-power: high-level, RT-level and gate-level
techniques.

Memory families (static, dynamic, flash).

System level issues: clock distribution, packaging, signal
integrity. 
","02139,02138","
Alberto Nannarelli,
Flemming Stassen"
,,,,,,,,,,,,
02209, Test of digital systems,English , 5 ECTS , 2016/2017 ,E1B (Thurs 13-17),MSc,Department of Applied Mathematics and Computer Science,"
Introduction to the testing problem for integrated circuits,
enabling the participants to design integrated circuits of high
test quality. 
","Describe and explain basic methods and concepts in test and
design for test of integrated circuits (e.g. stuck-at faults,
D-algorithm, built-in self-test) Describe what a testable system implies and analyze, whether a
digital circuit or parts hereof are testable analyze smaller parts of a testable digital circuit, using
well-known methods for test and design for test choose and optimise the test resources that are useful under
certain circumstances given a digital circuit, describe the circuits test properties
(e.g., overhead, complexity) and suggest and compare different
options to improve the test properties investigate a technical problem [based on an introduction] and
communicate the results of the examination in a clear and precise
manner, using a standard format for technical reports assess different methods to solve a selected technical problem
and evaluate their advantages and disadvantages as solutions to the
problem constructively criticise a written report [on an academic
problem], provide eventual missing parts in the report, and
conclude on the entirety of the report discuss the methods presented [in technical papers] and relate
these methods to similar findings, indicating similarities and
differences","
The course treats the fundamental theory for test of electronic
circuits with specific emphasis on the design of highly testable
digital integrated circuits.

The course covers the topics of:

- physical failure mechanisms and logic fault models,

- testability analysis (controllability and observability),

- algorithms for test pattern generation,

- fault simulation (fault coverage),

- design for test,

- boundary scan techniques,

- test planning in the design phase,

- test systems. 
","02155,02203,02205,02139","
Flemming Stassen"
,,,,,,,,,,,,
02211, Advanced computer architecture,English , 5 ECTS , 2016/2017 ,F4A (Tues 13-17),MSc,Department of Applied Mathematics and Computer Science,"
Computer architecture, the art and science of designing hardware,
is an exciting and fast changing research and development field. In
this course we intend to transfer this excitement to the students.

Students will learn the organization and design of contemporary
processor architectures. The foundations such as instruction set,
pipelining, and memory hierarchies are reviewed. We will cover
advanced concepts such as instruction-level parallelism,
out-of-order execution, and chip-multiprocessing. As the current
trend in computer architecture is towards chip-multiprocessing, the
architecture of shared memory multiprocessors and chip level
interconnect (network-on-chip) will be a central focus of the
course.

Most processors (99+%) are used in embedded systems, and many of
those embedded systems are real-time systems. Therefore, processors
need to be designed in a way that worst-case execution time
analysis is feasible. We will cover current research in the field
of time-predictable architectures. 
","Understand advanced computer architecture aspects Design pipelined processors Describe and explain instruction level parallelism with static
scheduling and out-of-order execution Understand the architecture and limitations of
chip-multiprocessing Describe and explain network-on-chip architectures Explain time-predictable computer architcture Evaluate a scientific paper (from conference or journal) Prepare a conference-style paper","
Review of pipelining and caches; instruction-level parallelism;
chip-multiprocessing; network-on-chip; time-predictable computer
architecture 
","02332,02333,02203,02321,02131,31070,30090,02139","
Martin Schoeberl,
Jens Sparsø"
,,,,,,,,,,,,
02213, Digital Systems Laboratory,English , 5 ECTS , 2016/2017 ,January,MSc,Department of Applied Mathematics and Computer Science,"
To give the participants a substantial practical experience in
design and implementation of digital systems using a simulation and
synthesis based design flow. 
","Explain the internal organization of a typical FPGA Use the design language VHDL and associated simulation tools to
develop complex digital circuits by stepwise refinement from a
specification down to a level from which a hardware implementation
can be synthesized. Use typical CAD-tools for synthesizing complex digital circuits
which are implemented in FPGA or VLSI technology. Exploit knowledge of the synthesis process to optimize the
area, speed and/or energy consumption of the designed circuit. Upload a synthesized design into an FPGA and operate the actual
circuit. Organize and plan this work in a group comprising several
students. Document this work (design, implementation and test) in a
technical report which addresses engineers in the field with no
knowledge about the specific problem, and which conforms to the
usual requirements to form, content and level of abstraction. Give a short oral presentation of the project and the results
obtained.","
VHDL coding for synthesis. Synthesis from VHDL to an FPGA or a VLSI
circuit. Implementation and test.

The course represents a continuation of one or more of the courses:
02203, 02204, 02205, 02209, 02211 and 02217. The aim is to provide
a deeper knowledge about and substantial parctical experience in
design of digital systems and their implementation in FPGA or VLSI
technology.

Design flow based on VHDL coding, simulation and synthesis.

A number of projects related to the preceeding lecture courses are
proposed. Examples are peripheral units for a processor, a
pipelined processor, an embedded system for some particular
application. 
","02203,02211,02205,02204,02209,02217","
Jens Sparsø,
Alberto Nannarelli"
,,,,,,,,,,,,
02217, Design of Arithmetic Processors,English , 5 ECTS , 2016/2017 ,E5B (Wed 13-17),MSc,Department of Applied Mathematics and Computer Science,"
Arithmetic processors are today present in Graphics Processing
Units (GPUs) and CPUs of high-end computers. They implement complex
arithmetic operations necessary to render 3D graphics and to
execute computation intensive applications.

In this course, students will learn the background in computer
arithmetic, such as number representation, rounding modes and
precision, the basics of implementing numerical processors and the
solutions adopted in the state-of-the-art arithmetic processors. 
","Describe standards for number representation, operations and
rounding modes Describe and explain methods of implementing arithmetic
operators such as adders, multipliers and dividers Apply suitable algorithms to perform a given computation
according to given constraints (delay, area, power) Design arithmetic processors based on given specifications and
the methods learned Synthesize specific (small) parts of the processor Analyze processors performances, compare and evaluate the
results with some reference processors Evaluate a scientific paper (from conference or journal) Communicate the results of the paper evaluation in an oral
presentation and a technical report","
Introduction to computer arithmetic. Basic operations: addition,
multiplication, division, square-root. Floating-point (FP)
arithmetic and FP-units. Processors for graphics applications.
Decimal processors for financial applications. Alternative number
systems. 
",None,"
Alberto Nannarelli"
,,,,,,,,,,,,
02220, Distributed systems,English , 7.5 ECTS , 2016/2017 ,F1B (Thurs 13-17),MSc,Department of Applied Mathematics and Computer Science,"
To illustrate the types of problems which arise and methods used in
the design and analysis of systems of interconnected computing
devices. 
","Describe important characteristics of distributed systems and
the salient architectural features of such systems. Describe the features and applications of important standard
protocols which are used in distributed systems. Characterise different implementation paradigms for distributed
systems. Explain the working of a distributed algorithm. Perform simple proofs of system properties, given a description
of a system. Select an appropriate distributed algorithm to satisfy given
design requirements for a distributed system. Select an appropriate implementation paradigm to satisfy given
design requirements for a distributed system. Develop an implementation of a distributed system from a formal
or informal description of its function and purpose.","
Characterization of distributed systems.

Distributed system models.

Paradigms for distributed systems.

Interprocess communication.

Distributed objects.

Peer-to-Peer computing.

Logical time.

Distributed algorithms for coordination and agreement. 
","02158,02152","
Nicola Dragoni"
,,,,,,,,,,,,
02223, Fundamentals of Modern Embedded Systems,English , 7.5 ECTS , 2016/2017 ,E4B (Fri 8-12),MSc,Department of Applied Mathematics and Computer Science,"
The course will look at challenges of designing modern embedded
systems, in varied application areas, such as high performance
systems, real-time systems, wireless sensor networks and biochips
(Lab-on-a-Chip). The course will focus on using modeling and
simulation to support design decisions during the systems
engineering of embedded systems. Students will be able to
understand the impact of design choices on non-functional
requirements of applications, with an emphasis on performance,
executing on modern embedded systems platforms, and to apply the
right models and methods to analyse and design such systems. 
","Explain the basic concepts and characteristics of embedded
systems Explain the difference between functional and non-functional
requirements Understand and apply basic systems engineering methods in the
context of embedded systems Explain modeling formalisms and apply them in settings of
relevance to embedded systems Understand and apply simulation methods to evaluate an embedded
system implementation model Apply methods for determining relevant metrics for embedded
systems, such as performance, energy, and cost Understand the basic behavioural mechanisms of embedded systems
in selected areas such as high performance systems, real-time
systems, wireless sensor networks and biochips (Lab-on-a-Chip) Understand and apply the appropriate abstraction level to solve
the system design problem Model, simulate and reason about a given embedded system design
problem Communicate the systems engineering process and results in a
clear and precise manner using technical reports, presentations,
posters and demos","
The course has three parts: (1) The first part covers an
introduction to embedded systems; embedded systems design
challenges; introduction to systems engineering, modeling and
simulation. (2) The second part consists of presentations of types
of embedded systems, such as, hard real-time safety critical
systems (e.g., automotive, avionics), soft real-time multimedia
systems (e.g., consumer electronics, smartphones), wireless sensor
networks (e.g., for environment monitoring, localization),
multicore field-programmable gate arrays (FPGAs), and even
labs-on-a-chip devices. (3) In the third part, the students will do
a project, which means choosing a type of embedded system,
constructing a model to reason about functional and non-functional
requirements, and developing a simulator to evaluate implementation
choices. The purpose of the project is to help the students to
understand how an embedded system functions and to understand the
challenges involved in the design of embedded systems. 
","02101,02151,02131","
Jan Madsen,
Paul Pop,
Sven Karlsson"
,,,,,,,,,,,,
02224, Modelling and Analysis of Real,English , 5 ECTS , 2016/2017 ,F3A (Tues 8-12),MSc,Department of Applied Mathematics and Computer Science,"
To make the participants able to construct safe real-time
computer-based systems using formal modelling and verification
techniques. 
","model real-time systems using formal models of timed
behaviour. state properties of timed system behaviour. use simulation tools for analysis of formal real-time
models. explain various principles underlying automated
verification. use tools to assist verification of real-time properties. understand selected verification techniques and know their
advantages and limitations. use different abstraction levels during real-time systems
development. implement real-time programs on suitable execution
platforms use real-time concepts for clear and concise presentation of
problems and solutions.","
High-level modelling of timed behaviour. Modelling techniques for
hybrid systems. Specification and verification of real-time
properties. Modelling, simulation and verification tools. Design
principles. Implementation techniques. 
",02158,"
Hans Henrik Løvengreen,
Michael Reichhardt Hansen"
,,,,,,,,,,,,
02228, Fault,English , 7.5 ECTS , 2016/2017 ,E3A (Tues 8-12),MSc,Department of Applied Mathematics and Computer Science,"
The course covers the design and development of fault-tolerant
systems, where fault-occurrences may lead to financial loss or may
have catastrophic consequences.

Application areas: safety—space, defense, transport and medical
applications; availability—cluster and cloud applications;
telecommunication, banking and infrastructure grids,
systems-of-systems; reliability—software and hardware design and
implementation.

Project: the students can choose their own project topic (a large
list of suggested topics is available); literature surveys;
presentation of existing techniques; tool use on case studies;
software and hardware implementations, etc.

Passing the course will enable participants to: understand and use
the concepts and terminology in the field; understand and evaluate
the dependability attributes of fault-tolerant systems, such as
safety, reliability and availability; analyze, design and implement
fault-tolerant systems. 
","Define the fundamental concepts of dependability Identify the hazards and risks associated with a system Be familiar with the state-of-the art models and
techniques Apply reliability and safety analysis techniques Define and classify the different types of redundancy
techniques Compare and contrast any two given redundancy techniques Be familiar with and apply software reliability techniques Propose solutions to improve the dependability of a
system","
Fault-tolerant systems: application areas

Fundamental concepts: fault, error, failure

Reliability analysis of software and hardware

Hazard and risk analysis

Fault tolerance: the concept of redundancy

Software, hardware, information and time redundancy; checkpointing;
fault-tolerant networks

Developing safety-critical systems: the safety life-cycle;
certification standards 
",None,"
Paul Pop,Florin Popentiu"
,,,,,,,,,,,,
02232, Applied Cryptography,English , 5 ECTS , 2016/2017 ,E1B (Thurs 13-17),MSc,Department of Applied Mathematics and Computer Science,"
To provide an introduction to the practical design and analysis of
cryptographic solutions. 
","analyse an application scenario and identify common threats,
vulnerabilities and risks; survey the research literature and select relevant solutions
for a given security problem in a distributed system; compare and contrast these techniques with respect to achieving
a specific security goal in a specific security context; design a distributed application or system that employs
advanced cryptographic techniques and protocols; evaluate a proposed cryptographic solution for a specific
security problem in a distributed system; document their work with the security process in a clear and
concise report; present and defend (orally) a complex cryptographic
solution; provide constructive criticism (orally and written) on
cryptographic solutions proposed by third parties.","
The course introduces practical design and security analysis of
cryptographic solutions. The necessary cryptographic basics and
methodology are introduced in the course.

Students will work in groups on a given security problem, going
through the phases of analysis, design, evaluation and
documentation of a cryptographic solution to the particular
problem. Students will be required to analyse the solutions
proposed by other groups and to provide constructive criticism on
those solutions. 
","01410,02239,02345","
Christian D. Jensen"
,,,,,,,,,,,,
02233, Network Security,English , 5 ECTS , 2016/2017 ,F4A (Tues 13-17),MSc,Department of Applied Mathematics and Computer Science,"
To provide a working knowledge of network security in theory and
practice. 
","List commonly-seen threats arising from the use of particular
protocols in networked computer systems. Exploit and know how to fix common vulnerabilities and attacks
against websites and web servers. Explain mechanisms commonly used by intruders and designers of
malware in order to compromise a computer system's
security. Explain the basic mechanisms used for the detection of
intrusion attempts in computer systems. Perform a network scanning and a vulnerability assessment
against a computer network. Select appropriate firewall rules expressed in a commonly-used
rule language in order to implement a given firewall security
policy. Select appropriate mechanisms to protect a networked computer
system against given risks. Know the principles of common tunneling mechanisms and how to
configure and set up a VPN.","
Basic network security in LAN and WAN environments; Protocols for
client-server communication in high risk environments; Web
vulnerabilities; Secure communications to ensure confidentiality,
authenticity and integrity.

Security architecture: firewalls and DMZs. VPN, proxies, intrusion
detection and protection systems (IDS/IPS), malware and malware
detection , audit and analysis of attacks. 
","02230,02345,02239","
Angelo Spognardi"
,,,,,,,,,,,,
02234, Current Topics in System Security,English , 5 ECTS , 2016/2017 ,E4A (Tues 13-17),MSc,Department of Applied Mathematics and Computer Science,"
To provide knowledge of selected advanced topics in IT system
security. To give participants practice at investigating topics in
the literature and producing oral and written presentations which
distill the essential features of a topic on the basis of a
literature study. 
","Search the literature for relevant information on recent
advances in system security Evaluate the quality and reliability of information on system
security found from various information sources Present the salient features of an approach to a given topic
found in the available literature Analyse possible applications of methods and theories found in
teh literature, in order to achieve given targets for system
security. Discuss possible applications of methods and theories found in
the literature, in order to achieve given targets for system
security. Demonstrate corret use of the terminology used in modern
presentations of advanced topics in computer security Give a coherent oral presentation of a chosen topic or topics
in system security, based on a study of relevant literature Give a written presentation, in the form of a conference or
journal article, a technical report or a contribution to a
compendium, on a chosen topic in system security, based on a study
of relevant literature","
The topics considered in this course will change from year to year.
Typical topics could include: Trust and reputation systems,
Systematic desig of secure IT systems, Security in pervasive
systems, Privacy-enhancing techniques. 
","02232,02233","
Christian D. Jensen,
Angelo Spognardi,
Nicola Dragoni"
,,,,,,,,,,,,
02238, Biometric Systems,English , 5 ECTS , 2016/2017 ,June,MSc,Department of Applied Mathematics and Computer Science,"
The students should develop:

- an understanding of the principles used in biometrics algorithms
and systems.

- a knowledge of the most important biometric approaches.

- the capability to select a suitable algorithm / system for a
given application context (e.g. physical access control)

- a good understanding of the complex relationships between
biometric systems and environmental conditions (e.g. illumination,
pose variations etc.) and their impact on biometric performance.

- the capability to assess the security properties of a biometric
system.

- an understanding of data privacy principles and the impact on the
design and configuration of biometric systems. 
","Explain concrete biometric models introduced in the course Analyse the suitability of biometric models for a given
scenario Use the biometric ingredients of existing systems to obtain a
given security goal Indicate the potential limitations biometric ingredeints in
existing systems for achieving a given security goal Judge the appropriateness of proposals in research papers and
text books for a given application Design a biometric solution for a given application
scenario The students should be able to achieve the above goals in a
group effort while maintaining individual accountability The student should be able to communicate his/her results in a
clear and precise manner","
Authentication of individuals based on the biological and
behavioural characteristics such as the face, the iris or
fingerprints is a promising research domain. Biometric algorithms
allow the recognition of individuals in physical or logical access
control systems and thus provide an efficient and convenient
alternative to knowledge based or token based systems.

The lecture covers the most important mechanisms in today's
commercial biometric systems: Face recognition, iris recognition
and fingerprint recognition. The course covers sensors, biometric
image processing, feature extraction and classification methods.
Furthermore evaluation schemes for biometric systems will be
discussed such as biometric performance testing and security
testing. The lecture will also map data privacy principles to the
biometric system design process.

The complementary seminar extends the content of the lecture with
topics on current application areas. Theses topics are researched
and analysed. Specific Focus is given on applications that are
specific for the European data privacy culture .

Furthermore the seminar will discuss interoperability issues and
international standardization in the field.

The seminar will address selected topics from current biometric
research regarding 3D face recognition, biometric sample quality,
multimodal biometrics and biometric template protection (e.g.
www.3dface.org) 
","02239,02502","
Rasmus Larsen,
Christian D. Jensen,Christoph Busch"
,,,,,,,,,,,,
02239, Data Security,English , 7.5 ECTS , 2016/2017 ,E5B (Wed 13-17),MSc,Department of Applied Mathematics and Computer Science,"
To give students an introduction to fundamental concepts in
computer security and introduce central theories and techniques for
the development and analysis of secure IT systems. 
","identify all major factors that have to be addressed in a
security analysis of a particular system; define operational security goals for a given computing
system; analyse an application scenario and identify common threats,
vulnerabilities and risks; identify possible countermeasures against threats and
vulnerabilities in a given security scenario; compare and contrast the underlying security mechanisms needed
to implement security countermeasures; define operational security policies to achieve specific
security goals using specific security mechanisms; design a security infrastructure that implements an operational
security policy; use contemporary tools to analyse and implement (part of) a
security infrastructure; evaluate (informally) a given set of security policies and
mechanisms in a given application context in order to determine
whether they are likely to satisfy a given list of security
goals; document their work with the security process in a clear and
concise report.","
Security concepts: confidentiality, integrity, authenticity,
availability etc. Symmetric and asymmetric cryptography and their
uses; key distribution and digital signatures; discretionary and
mandatory access control policies for confidentiality and
integrity. Communication protocols for authentication,
confidentiality and message integrity; network security; system
security, intrusion detection and malicious code. Security models
and security evaluation. Administration of security. Legal aspects
of computer security. 
","02101,02159,02161","
Christian D. Jensen,
Sebastian Alexander Mödersheim"
,,,,,,,,,,,,
02242, Program Analysis,English , 7.5 ECTS , 2016/2017 ,E2A (Mon 13-17),MSc,Department of Applied Mathematics and Computer Science,"
The students will be able to understand and apply basic program
analysis formalisms and to construct and apply the analysis tools
and techniques facilitated by these formalisms. 
","explain the basic concepts introduced; explain concrete analyses and apply them to simple
programs; explain the role of analysis frameworks and their
instances; formulate new analyses as variations of existing ones and
categorise them in the appropriate analysis frameworks; explain semantic as well as algoritmic aspects related to the
analyses; design and construct a generic software tool supporting
analyses based on analysis frameworks; design and motivate a series of experiments using this software
tool and interpret the results obtained; achieve the above goals in a group effort while at the same
time maintaining individual accountability; and communicate his/her results in a clear and precies manner using
a standard form for technical reports.","
The course covers techniques for data flow analysis formulated
using monotone frameworks. This includes the theoretical
foundations within fixed point theory as well as algorithmic
techniques for solving constraint systems.

The students will be presented for a number of classical program
analyses and as a part of the course they will develop a minor
verification system for the proactive analysis of a security
problem. 
",02141,"
Hanne Riis Nielson"
,,,,,,,,,,,,
02244, Language Based Security,English , 7.5 ECTS , 2016/2017 ,F2A (Mon 13-17),MSc,Department of Applied Mathematics and Computer Science,"
The students should be able to understand and apply the security
formalisms introduced, and to apply the relevant tools and
techniques with the aim of solving related problems. 
","explain the basic concepts introduced in the course and explain
the role of language based security in concrete settings; apply advanced tools for modeling and analyzing protocols; design and motivate a series of experiments for analysing
security properties; analyse and interpret the results obtained from advanced
analysis tools; describe the ideas of methods for automated security tools and
apply them to small examples; identify strengths and weaknesses of different methods; given a formal description of a policy, explain its meaning and
determine if a given program satisfies the policy; given a textual description of a desired policy, adapt an
existing formalisation; determine the applicability of compositional reasoning for
security; communicate the results in a clear and precise manner, using a
standard format for technical reports.","
The course covers security protocols, their modeling and analysis,
including techniques and tools that can be used to either detect
confidentiality and authentication errors or to guarantee that no
such errors can occur. The course also covers other techniques for
language based security such as Information Flow, Access Control,
and low-level support for security. 
","02142,02141","
Sebastian Alexander Mödersheim,
Flemming Nielson"
,,,,,,,,,,,,
02246, Model Checking,English , 7.5 ECTS , 2016/2017 ,E4A (Tues 13-17),MSc,Department of Applied Mathematics and Computer Science,"
The students will be able to understand and apply high-level
modelling, specification and validation/verification techniques for
systems, such as service oriented systems and embedded systems. The
methods will include discrete techniques as well as stochastic
techniques. 
","explain the the characteristic features of systems, including
reactive systems like service oriented systems and embedded
systems; explain the basic concepts of the process oriented
approach; explain the covered modelling formalisms and use them to model,
e.g., service oriented systems and embedded systems; explain the covered logical specification formalisms and use
them to specify properties related, e.g., to safety, security and
performance; understand and operate state-of-the-art verification tools and
explain the overall workings of such tools; identify situations where the covered techniques apply; motivate and design a series of experiments using verification
tools and interpret the results obtained; achieve the above goals in a group effort while at the same
time maintaining individual accountability; and communicate his/her results in a clear and precise manner using
a standard form for technical reports.","
The course covers three main topics:

(1) Methods for modeling systems, such as service oriented systems
and embedded systems.

(2) Logical formalisms for expressing properties related to the
safety, security and performance of systems.

(3) Validation and verification tools that determine the
relationship between models and properties in order to establish
strong guarantees related to safety, security, and performance. 
",02141,"
Flemming Nielson,
Alberto Lluch Lafuente"
,,,,,,,,,,,,
02247, Compiler Construction,English , 5 ECTS , 2016/2017 ,F2B (Thurs 8-12),MSc,Department of Applied Mathematics and Computer Science,"
Compilers contribute to the reliability of software systems by
analyzing and optimizing the system's code, and by guaranteeing
properties of the generated executables. For key players in the
software market such as Microsoft and Google, compilers are such an
integral part of their projects, that they even compile their
compilers from source code as part of the build process.

This course teaches techniques to efficiently implement modern
functional and object-oriented languages, and to guarantee
reliability of the generated executables. We cover essential
techniques in modern compilers, from implementation of high-level
concepts over optimizations to run-time support for new hardware
architectures. During the course, students will work in groups on a
compiler for a realistic programming language. 
","explain the contribution of compilers to the reliability of
software systems; explain the structure of optimising compilers and the
functionality of the different phases; explain the covered forms of intermediate representations, and
choose a form based on functional requirements; explain the relation between high-level language, intermediate
representation, analyses, and optimisations; explain the process of code generation for modern
processors; choose the right phase for adding new functionality based on a
description of requirements; identify situations in software development where compiler
techniques can be applied, and design and implement the
application; use modern tools to implement parts of compilers, and explain
their functionality; implement a compiler for a realistic programming language; achieve the above results in a group effort while at the same
time maintaining individual accountability; and communicate the obtained results in a clear and precise manner
using a standard form for technical reports.","
The course covers three main topics:

(1) Compilers for different language paradigms, e.g., functional
and object-oriented languages, and abstract machines as target
architecture for compilers;

(2) Intermediate representations and their role for compilations;
and

(3) Code generation, code selection, and optimizations.

The project is based on the compiler framework LLVM, which is used
in many commercial compilers. 
",,"
Christian W. Probst"
,,,,,,,,,,,,
02249, Computationally Hard Problems,English , 7.5 ECTS , 2016/2017 ,E3A (Tues 8-12),MSc,Department of Applied Mathematics and Computer Science,"
For many real world problems, an optimal solution cannot be found
efficiently. Such problems are called computationally hard. For
such problems only approximate solutions can be found in reasonable
time. The aim is to enable the students to identify a problem as
being not efficiently solvable and to supply them with algorithmic
schemes for finding approximate solutions. 
","to design an input representation for a given problem define the various levels of hardness of problems define when a problem is hard identify the abstract structure behind a real world
problems determine whether a given problem is computationally hard analyse a given problem with respect to its complexity analyse randomized algorithms with respect to the use of
resources analyse randomized algorithms with respect to quality of the
solution they provide recognize the potential for a randomized solution in a given
hard problem design randomized algorithms for specific problems evaluate and assess different solution methods and select the
most promising one","
There are many important problems in Computer Sciences and other
areas for which optimal solutions can be found but the time to do
so is so long that it is not practical. Examples of such problems
are optimal assignment of tasks to processors, finding an optimal
tour for the local postman, optimal packing of a suitcase,
optimizing the payload for a space mission or selecting a
profitable stock portfolio.

In the course we will first specify what we mean by a
""computationally hard'' problem. Then some examples of
such that problems are presented and methods are described to
identify a problem as being hard. In order to become accessible to
an analysis real world problems have to be converted into abstract
mathematical models which capture the essence of the original
problem.

We shall then look at problems where randomization helps in solving
them. This means that there are fast algorithms for solving the
problem that use ""coin flips'', i.e. a random number
generator. Hence repeatedly running such an algorithm on the same
input might lead to different solutions. We shall consider problems
where a ""good'' solution will be found with high
probability by randomized algorithms. 
","02110,02141","
Carsten Witt"
,,,,,,,,,,,,
02255, Practical Cryptology,English , 5 ECTS , 2016/2017 ,E2B (Thurs 8-12),MSc,Department of Applied Mathematics and Computer Science,"
The course is aimed at developing skills needed for the deployment,
analysis and implementation of cryptographic algorithms in the real
world. 
","Explain the security and implementation constraints for
cryptographic primitives both in hardware and software Apply the state-of-the-art primitives in suitable practical
settings to meet real-world security needs Develop implementations of cryptographic algorithms in various
settings Develop attacks on cryptographic algorithms using side-channel
leakage Evaluate the mathematical security of lightweight symmetric-key
cryptographic algorithms using elements of cryptanalysis Write quality technical reports Present results informatively and concisely Efficiently work and communicate in teams","
The course deals with practical aspects of modern cryptology. It
covers design and cryptanalysis of ciphers, their implementation in
practice, as well as real-world attacks on ciphers.

On the design side, a selection of advanced modes of operation are
studied - including those for authenticated encryption. In terms of
cryptanalysis, the focus is on time-memory tradeoff attacks
(Hellman tables and Rainbow tables) and meet-in-the-middle attacks
(partial matching, 3-subset attacks, initial structures).

Regarding implementations, a wide spectrum of possible
implementations is covered: low-area ASIC hardware to attain
minimal silicon footprint, high-performance modern CPUs with
Intel's AES instructions AES-NI, and lightweight embedded
software at the example of Atmel's ATMega16.

For the real-world attacks, we study passive side-channel attacks
such as differential power analysis that extract secret data from a
physical parameter such as power consumption of a device or its
electromagnetic radiation. 
","02102,01410,02101,02105","
Andrey Bogdanov"
,,,,,,,,,,,,
02257, Applied functional programming,English , 5 ECTS , 2016/2017 ,January,MSc,Department of Applied Mathematics and Computer Science,"
To enable that the participants can apply functional programming in
the solution of practical as well as more theoretical problems. 
","apply functional programming on practical problems comprehend functional theories and exploit them in program
construction analyze the resource consumption of a functional program create a functional program design analyze a functional program design assess the role of functional programming in a system
context give a critical analysis of a program design document a software product succinctly","
The course will provide insights in advanced functional programming
topics and their use in concrete applications. Theoretical topics
will be covered. They will have a role in program constructions
inspired by practical and/or research oriented problems.

The course is centered around 2-3 mini projects. A mini project is
introduced through lectures and possibly exercises. A mini project
results in a product in the form of a program and a mini report.

The contents may change on a yearly basis. Examples of themes are:
Resource planning, parallel gathering of information, reactive
programs, apps for mobile phones, domain specific languages,
decision procedures, interpreters, compilers, analysis tools,
monadic programming. 
",02157,"
Michael Reichhardt Hansen"
,,,,,,,,,,,,
02263, Formal Aspects of Software Engineering,English , 5 ECTS , 2016/2017 ,F4B (Fri 8-12),MSc,Department of Applied Mathematics and Computer Science,"
The aim of the course is to give the participants skills in
mathematically based methods for developing reliable software
systems. 
","establish a formal specification from an informal problem
description use distinguished specification styles and techniques to
achieve models at an appropriation level of abstract stepwise refine a specification establish verification obligations (e.g. refinement conditions
and required system properties) verify simple verification obligations translate a specification into an executable program apply selected tools relating to formal methods explain what can be achieved by using formal methods communicate results in a clear and precise manner solve problems as a group while keeping individual
responsibility","
Formal specification using one or more typical examples of
specification languages. Various specification techniques and
styles

for constructing models at different levels of abstraction.
Stepwise development and verification by means of a series of
models of decreasing level of abstraction. Implementation
relation(s). Application of computer based specification tools. 
","02157,02156,02141,01017,01904,02158,02161,01917","
Anne Elisabeth Haxthausen"
,,,,,,,,,,,,
02264, Requirements Engineering,English , 10 ECTS , 2016/2017 ,"E3 (Tues 8-12, Fri 13-17)",MSc,Department of Applied Mathematics and Computer Science,"
This course provides a hands-on introduction to requirements
engineering (RE) based on case study work. Students will obtain a
broad and profound overview of the field of RE so that they
understand the key challenges of requirements engineering in
organizations. The course aims at educating its participants to be
able to act as Requirements Engineer in industry - which includes
teamwork. 
","elicit, elaborate, and maintain system requirements on their
own and in small teams evaluate, check, and improve existing requirements
specifications create written requirements specifications of professional
quality, and present them in public apply modeling techniques for domain models (e.g. business
processes, information models, context and data flow models, and so
on) use appropriate CASE and CARE tools plan, conduct, and follow-up on reviews for various
requirements artifacts discuss and compare techniques and styles of RE appropriate in
the given context communicate requirements clearly discuss typical problems related to requirements, how they
occur, and how to prevent them work as a team, recognize and address group dynamic issues compare and discuss the different aspects and levels of
requirements derive and explain the various definitions and technical terms
used in RE","
Requirements Engineering (RE) is a key activity in software
development (actually, in all kinds of product development). It is
probably the single most complex part of software development as it
comprises the ""hard"" technical issues as well as the
""soft"" social and organizational issues. RE is not just a
phase, but covers the whole software life cycle. There are many
different methods and styles for eliciting, specifying, and
validating requirements, and there is no single ""best"" or
""right"" approach to RE. On the contrary, one of the most
important aspects of RE is to objectively evaluate the factors and
forces in a specific context, and select a suitable system of
complementary RE methods to maximize the fit. For this, it is
indispensable to acquire a broad knowledge of the field and get to
know alternative approaches for the same issue. Thus, in this
course, we will work on creating requirements specifications for
case studies based on different approaches. As a result, students
should be able to master RE not just from a practical perspective,
but should also be able to compare and discuss different approaches
with their respective capabilities and contributions in a given
context. With a view to practical relevance are communication and
cooperation skills among the most important elements of this
course's topics. Good command of English in writing and orally
is indispensable. 
","02102,02101,02161,02162,02815,02291,02312","
Harald Störrle"
,,,,,,,,,,,,
02265, Advanced Topics in Software Engineering,English , 5 ECTS , 2016/2017 ,F5B (Wed 13-17),MSc,Department of Applied Mathematics and Computer Science,"
The course gives more insights into modern sofware engineering
technologies (i.e. principles, concepts, methods, notations,
formalisms, techniques, and tools). The students will develop
skills in acquiring new technologies from a practical as well as
from a theoretical point of view; though the focus will be on
acquiring and using technologies, it will also cover the
mathematical foundation of technologies. 
","have knowledge and understanding of some modern
technologies have a deeper understanding of the objectives and purpose of
modelling and abstraction be able to acquire new technologies be able to evaluate and select appropriate technologies (with
respect to a specific software engineering task) be able to formalise modelling notations be able to implement tools for supporting new technologies have good communication skills (orally and in writing) be able to use tools for the automatic discovery of
models","
The course focus is on Model Based Software Engineering and some
supporting technologies and their foundation. Moreover, it
establishes relations to more formal modelling technologies (cf.
02263). It covers advanced and relevant topics of modern and future
software engineering technologies.

- Different modern software development approaches

- Modelling notations on different levels of abstraction

- Technologies for automatically executing models (simulation,
interpretation, code generation)

- Relation to underlying mathematical models

- Evaluation, analysis, and application of existing technologies
and tools 
",02161,"
Ekkart Kindler,
Barbara Weber"
,,,,,,,,,,,,
02266, User Experience Engineering,English , 5 ECTS , 2016/2017 ,January,MSc,Department of Applied Mathematics and Computer Science,"
The course provides students with a foundation to apply lean
methods to UX design of ""cognitive computing"" interfaces,
by combining business canvas modeling with hierarchical user story
mapping, as a basis for agile development and validation of
prototypes as MVP minimum viable products. 
","Identify user needs for a market segment Optimize UVP unique value proposition using a lean business
model canvas Model user needs hierarchically as goals, activities and
tasks Prioritize user needs to scope a UX prototype design Model microinteractions for a UX system design Implement design patterns for a UX prototype design Design an MVP minimum viable product based on iterative UX
prototyping Validate an MVP minimum viable product based on iterative UX
prototyping","
The course is focused on development of UX design prototypes of
next generation ""cognitive computing"" interfaces
incorporating biometric data related to e.g. heart rate, eye
tracking or emotional responses based on facial gestures. 
","02809,02291,02161","
Michael Kai Petersen"
,,,,,,,,,,,,
02267, Software Development of Web Services,English , 5 ECTS , 2016/2017 ,E1A (Mon 8-12),MSc,Department of Applied Mathematics and Computer Science,"
The goal of this course is to understand the basic concepts of Web
service technology and the problems and solutions in service
oriented architectures. 
","work in a team and to build a larger service-oriented
application based on Web services analyse messages exchanged between Web service create Web services based on their description use Web services according to their description compose new Web services from existing Web services describe the coordination between several Web services document a larger service-oriented application based on Web
services discuss the security of Web services interpret standard documents related to Web services discuss service-oriented architectures","
Basic technologies for Web Services like XML, SOAP, WSDL, REST,
etc.

Problems and solutions in service oriented architectures, including

orchestration and choreography of Web services, long living

transactions, security, etc. 
",,"
Hubert Baumeister"
,,,,,,,,,,,,
02281, Data logic,English , 5 ECTS , 2016/2017 ,F2B (Thurs 8-12),MSc,Department of Applied Mathematics and Computer Science,"
The aim is to strengthen student's skill in logic programming
and further to introduce to notions and techniques for computer
processing of natural language based on logical methods. 
","apply recursive logic progr. techniques describe natural language fragments by means of grammars develop and apply definite clause grammars for machine
processing of language translate simple subsets of natural language into predicate
logic explain basic principles in Montague semantics for natural
language translate simple natural language queries into logical database
queries explain principles of ontological semantics for natural
language phrases explain how to compute database queries as Datalog logic
programs implement inference procedures for language and ontology
processing in logic programs","
Logic programming with recursion forms. Definite clause grammars.

Grammars for natural language fragments. Logical semantics for
natural language.

Translation of natural language into logic. Computation of database
queries.

Software systems processing natural language. 
",02156,"
Jørgen Fischer Nilsson"
,,,,,,,,,,,,
02282, Algorithms for Massive Data Sets,English , 7.5 ECTS , 2016/2017 ,F1A (Mon 8-12),MSc,Department of Applied Mathematics and Computer Science,"
To know, apply, analyze, and design algorithms for massive data
sets using state-of-the-art algorithmic techniques in the area. 
","Describe an algorithm in a comprehensible manner, i.e.,
accurately, concise, and unambiguous. Prove correctness of algorithms. Analyze, evaluate, and compare the performance of algorithms in
models of computation relevant to massive data sets. Analyze, evaluate, and compare the quality and reliability of
solutions. Apply and extend relevant algorithmic techniques for massive
data sets. Design algorithms for problems related to massive data
sets. Lookup and apply relevant research literature for problems
related to massive data sets. Systematically identify and analyze problems and make informed
choices for solving the problems based on the analysis. Argue clearly for the choices made when solving a problem. Express oneself in writing at a scientific level.","
State-of-the-art algorithmic techniques and models for massive data
sets. Including advanced data structures and approximation
algorithms. 
","02110,02105","
Inge Li Gørtz,
Philip Bille"
,,,,,,,,,,,,
02284, Knowledge,English , 5 ECTS , 2016/2017 ,E2A (Mon 13-17),MSc,Department of Applied Mathematics and Computer Science,"
The aim is to provide the student with an understanding of logical
theories for conceptual modelling, formal ontologies and
computational knowledge representation. 
","formulate models of application domains using
entity-relationship modelling explain properties of the ontological inclusion relation formulate lattice specifications of domains and apply
elementary lattice notions apply lattices for inductive database querying explain relationship between Hasse diagrams and algebraic
lattices explain relationship between lattices and description
logic formulate specifications of domains using description
logic discuss the various parthood relations formulate axioms for parthood and and apply parthood in
conceptual modelling formulate axioms for parthood and and apply
parthood in conceptual modelling formulate axioms for parthood and
and apply parthood in conceptual modelling formulate axioms
fo","
The relational datamodel and the relational database algebra.

Conceptual modelling with ER-diagrams. Ontologies and properties of
the

ontological inclusion operation. Order-oriented and algebraic
lattices.

Distributive lattices. use of lattices for ontologies and
conceptual modelling

Description logic with relation to lattices.

The parthood generic relation and its properties.

Material: Compendium of material from scientific literature;

supplementary material from Wikipedia 
",02156,"
Jørgen Fischer Nilsson"
,,,,,,,,,,,,
02285, Artificial intelligence and multi,English , 7.5 ECTS , 2016/2017 ,F4A (Tues 13-17),MSc,Department of Applied Mathematics and Computer Science,"
This course introduces students to advanced techniques within
artificial intelligence (AI), with particular focus on automated
planning and multi-agent systems. The objective of the course is to
become able to explain, analyse and implement advanced AI
techniques. 
","describe a number of the most prevalent techniques in
artificial intelligence - both in overall terms and on a detailed
technical level compare and assess the appropriateness of various AI techniques
for solving a given concrete problem combine different AI techniques in a theoretically sound and
practically useful way apply a given AI technique to a given concrete problem clarify the general complications and pitfalls involved in
practical uses of AI techniques independently explore the literature relevant to a specific AI
project implement non-trivial AI techniques in a relatively large
software system write a report in the style of a conference article documenting
an implemented AI system and its underlying theories","
The course primarily focuses on topics within automated planning
and multi-agent systems, but will also address other areas of AI
(e.g. problem-solving by searching, knowledge representation and
reasoning with logical agents).

The programming project concerns the implementation of advanced AI
techniques in a relatively large software system. The programming
project is carried out in groups, and should result in a working
system and a relatively short report written in the style of a
conference article.

In addition to the programming project there will be smaller
individual written assignments during the course. 
","02180,02156,02153,01017,02101,02105","
Thomas Bolander"
,,,,,,,,,,,,
02287, Logical Theories for Uncertainty and Learning,English , 5 ECTS , 2016/2017 ,E2B (Thurs 8-12),MSc,Department of Applied Mathematics and Computer Science,"
Reasoning with and managing uncertainty is important in many areas
of artificial intelligence, for example, in expert systems and
robotics, but also in various approaches to automated learning. The
course will overview a representative selection of different
mathematical models for dealing with uncertain knowledge and
learning in an interactive context, such as (Multi-agent Epistemic)
Modal Logic, Belief Revision Theory, Bayesian Probability Theory,
and Game Theory. The aim of the course is to provide the student
with theory and tools necessary to apply the models in research and
in programming practice. 
","Describe a number of the most prevalent techniques in modelling
uncertainty and learning. Describe the role of logic in the modelling of knowledge,
uncertainty, and knowledge change. Describe the respective limitations of logic and probability in
modelling learning. Compare and assess the appropriateness of various techniques
for solving a given knowledge modelling problem. Assess difficulties specific to single-agent modelling of
knowledge. Assess difficulties specific to multi-agent modelling of
knowledge. Independently explore the literature relevant for the
project. Write a paper in the style of a conference article.","
1. From Propositional Logic to Epistemic Logic: Language and
Models,

2. Logical Properties of (Group) Knowledge,

3. Axiomatic Systems and Proofs, Soundness and Completeness of
Epistemic Logic

4. Knowledge Change: Public Announcement Logic, Belief Revision

5. Probability Based Modelling of Uncertainty: Bayes Theorem,
Bayesian Update

6. Modelling Uncertainty about Probability Distribution: Belief
Functions, Possibility Measures, Ranking Functions, Relative
Likelihood, Plausibility Measures

7. Game Theory: Cooperation and Conflict, Nash Equilibrium, Mixed
strategies, Pareto Efficiency

8. Extensive Form Games: Harsanyi Transformation, Bayesian Update
in Games, Backward Induction, Infinite Payoffs 
","01017,02156,02180","
Nina Gierasimczuk"
,,,,,,,,,,,,
02291, System integration,English , 5 ECTS , 2016/2017 ,F5A (Wed 8-12),MSc,Department of Applied Mathematics and Computer Science,"
To provide the participants with a theoretical foundation necessary
to understand, model, analyze and design complex heterogeneous
systems assembled from different components. The aim is to cover
different levels of abstraction as well as the different layers of
a system. 
","analyze a problem and model the requirements of a software
system model the design of a software system formulate safety and liveness properties of models validate model properties describe modeling techniques for domain modeling, requirements,
design, and systems explain and discuss models describe and apply methods for modeling model in a team document models","
- Object-oriented modeling using the Unified Modeling Language

- Other Modeling languages

- Methods for Modelling

- Analysis of models 
",,"
Hubert Baumeister"
,,,,,,,,,,,,
02312, Introductory Programming,Danish , 10 ECTS , 2016/2017 ,E4B (Fri 8-12) and January  or  E2A (Mon 13-17) and January,BEng,Department of Applied Mathematics and Computer Science,"
The goal of the course is to make the student able to use the basic
concepts and techniques in an imperative- and object oriented
programming language. The course will use a programming language
that is used in industries (for the time being JAVA). The main
purpose of the course is to make the student able to design,
implement and test smaller programs. 
","Understand the different number representations Use loops and branching. Understand classes and the anatomy of objects. Use simple UML notations for classes and associations. Use arrays. Use inheritance. Use simple I/O operations without corresponding exception
handling. Explain simple test methods and use these in simple
examples. Work in groups to design a smaller software system based on a
problem description in a predefined task and implement the most
important parts of this design. Use simple time and activity planning of a project
progress.","
• Planning methods for programs: Pseudo-code, data-flow diagrams.

• Program structure: Modules, functions and parameter passing.

• Variable and data types (integers, booleans, floating points and
strings )

• Control sentences (for-, if- and while sentences, nested loops).

• Data structures (array).

• Methods (parameter passing, functions with return values, simple
values, tables, objects/references).

• Classes and objects (attributes and methods)

• Inheritance (extension of classes with attributes and methods)

• Input/output: Monitor, keyboard, files)

• Use of a IDE, administration of projects, debug and interdiction
to test. (fx JUnit) 
","02315,02313","
Stig Høgh"
,,,,,,,,,,,,
02313, Development methods for IT,Danish , 5 ECTS , 2016/2017 ,E2A (Mon 13-17) and E4A (Tues 13-17),BEng,Department of Applied Mathematics and Computer Science,"
The purpose of the course is to train an engineeering approach to
developing software systems in small project groups 
","Plan, control and carry out a small software project in project
groups Definé and describe common UML diagrams Use and explain a modern software development process Use UML to model software Produce requirement specifications Design programs Develop smaller programs based on a particular design Develop program documentation Evaluate code and documentation using review techniques Prepare a report which document the product Prepare a report which document the process To be able to write technical reports.","
• Planning and control:

o Project management, project control, project plans, risk
assesment, time estimate and role division

• Requirement specification:

o Requirement discovery, requirement description, requirement
control, requirement validation, requirement prioritizing

• Design:

o Architectural models, design models, dynamic and static models

• Programming:

o From requirements to program, code quality

• Program documentation

o Source code comments, description of algorithments, documenting
design models (static and dynamic), architecture models, data
models

• Review techniques

o Formal reviews, walk throughs

• Documentation

o Product documentation, process documentation, status rapports

Report writing 
","02315,02314,02312","
Ian Bridgwood,
Henrik Bechmann,
Henrik Tange,
Mads Nyborg"
,,,,,,,,,,,,
02314, Introductory Programming,Danish , 5 ECTS , 2016/2017 ,E4B (Fri 8-12),BEng,Department of Applied Mathematics and Computer Science,"
The goal of the course is to make the student able to use the basic
concepts and techniques in an imperative- and object oriented
programming language. The course will use a programming language
that is used in industries (for the time being JAVA). The main
purpose of the course is to make the student able to design,
implement and test smaller programs. 
","Understand the different number representations Use loops and branching. Understand classes and the anatomy of objects. Use simple UML notations for classes and associations. Use arrays. Use inheritance. Use simple I/O operations without corresponding exception
handling. Explain simple test methods and use these in simple
examples. Work in groups to design a smaller software system based on a
problem description in a predefined task and implement the most
important parts of this design.","
• Planning methods for programs: Pseudo-code, data-flow diagrams.

• Program structure: Modules, functions and parameter passing.

• Variable and data types (integers, booleans, floating points and
strings )

• Control sentences (for-, if- and while sentences, nested loops).

• Data structures (array).

• Methods (parameter passing, functions with return values, simple
values, tables, objects/references).

• Classes and objects (attributes and methods)

• Inheritance (extension of classes with attributes and methods)

• Input/output: Monitor, keyboard, files)

• Use of a IDE, administration of projects, debug and interdiction
to test. (fx JUnit) 
","02315,02313","
Stig Høgh"
,,,,,,,,,,,,
02315, Version control and test methods,Danish , 5 ECTS , 2016/2017 ,E2A (Mon 13-17)  or  E4B (Fri 8-12),BEng,Department of Applied Mathematics and Computer Science,"
The objective of the course is to introduce methods and techniques
in software development and to train participants in the testing of
smaller programmes. The participants should be capable of
organizing software development projects and implementing
configuration and version control. 
","Locate and correct software defects (debug). Choose appropriate test methods Plan, implement and document test activities Acquire fundamental knowledge of test management Can define test scenarios and perfom testing on the basis of
these Can use modern development tools corresponding to those used in
industry Achieve fundamental knowledge of version and configuration
control in relation to development arbejde. Implement verification and validation","
Configuration control:

Document managementl.

Source control management and related operations e.g. branching,
commit etc.

Release management

Version control, such as svn, cvs or git.

Configuration control

Use of IDE for configuration control.

Software test

Test phases

Test management.

General test techniques including black and white box testing.

Unit testing, integration testing, performance testing, acceptance
testing.

Use of IDE for test and debug 
","02315,02313","
Stig Høgh,
Daniel Kolditz Rubin-Grøn"
,,,,,,,,,,,,
02318, Elementary Programming for Diplom,Danish , 5 ECTS , 2016/2017 ,E5A (Wed 8-12)  or  F5A (Wed 8-12),BEng,Department of Applied Mathematics and Computer Science,"
The aim of the course is to make the students able to design, code,
test and document programs in the programming language C 
","work with ordinary data types and declare variables use selections: if-, if-else- and switch-statements use loops: while-, do-while- and for-statements and tell about
recursion prepare functions with arguments: call by value and call by
reference use standard I/O (keyboard and display) as well as text
files use structured data types: structs use arrays: with 1- and 2-dimensions use pointers in relations to the arrays use the data structure linked list: stack and queue perform tests of programs use flowchart and module diagrams as documentation of
programs participate and cooperate in small groups to solve a specific
task","
Program structure: From pseudo code through data-flow diagrams to
modules, functions parameter transfer, loops and selections. I/O:
Display, keyboard, and files. Simple search and sorting. At the end
of the course, you are supposed to make an application for the 1.
semester CDIO-Project 
",None,"
Finn Gustafsson,
Bjarne Poulsen"
,,,,,,,,,,,,
02320, Digital systems,Danish , 10 ECTS , 2016/2017 ,F5A (Wed 8-12) and June,BEng,Department of Applied Mathematics and Computer Science,"
The aim of the course is to introduce the organisation of a simple
computer system,

and to provide the participants the skills how to analyse, design,
simulate, implement, test and document

- Digital systems at Register Transfer Level (RTL)

- Synchronous sequential circuits

using reconfigurable hardware.

The course gives a general understanding of how a simple computer
system is organized, covering the topics:

- processor microarchitecture and instruction set

- memory organisation and addressing modes

- buses, memory mapping, interfacing with IO devices

The course provides the participants the competences necessary to
design digital circuits that perform simple calculations or
control-tasks using typical synthesis and simulation tools
(currently VHDL, ModelSim and Xilinx), and to implement these
circuits using reconfigurable hardware (FPGA technology) 
","Explain the architecture of a simple computer Explain the operation and implementation of fundamental memory
elements (D flip-flop’s and D-latches) Explain the structure and operation of a synchronous finite
state machine, and explain step-by-step how such a finite state
machine is designed (state graph, state table, state minimization,
state encoding, etc.) Transform a verbal description of an intended circuit into a
specification using Boolean algebra, truth tables, state-graphs,
etc., and subsequently to synthesize and implement the circuit Demonstrate basic knowledge about simulation and synthesis
tools for digital circuits, including the ability to describe
smaller circuits using a hardware description language (such as
VHDL) Define and explain timing parameters for RTL-level components
(registers and logic). Use these parameters to calculate the
critical signal paths in a given sequential circuit, and determine
the minimum possible clock period for the circuit Explain and construct simple programs written in assembly
code Explain the structure and operation of a sequential circuit
consisting of a data path and a finite state machine control unit
and design such FSMD implementations of simple algorithms and
control circuits Explain the phenomenon meta-stability and describe how input
signals may be synchronized Act as a member of a small design-team (2-3 students) and
participate constructively in its management Document a design project in a technical report","
• Architecture and instruction set of a simple CPU.

• FSM (Finite state machine) and FSMD (Finite state machine with
datapath).

• Hardware design using hardware description language (currently
VHDL).

• Low-level programming in machine code or assembly.

• Operation and internal organization of a simple computer.

• FPGA technology: Basics of structure and principles of operation.

• Lab exercises covering VHDL and related CAD-tools for simulation,
synthesis and prototype implementation using FPGA technology
(currently Modelsim and Xilinx). 
","62506,62507","
Flemming Stassen,
Edward Alexandru Todirica"
,,,,,,,,,,,,
02321, Hardware/Software Programming,Danish , 10 ECTS , 2016/2017 ,E5B (Wed 13-17) and January,BEng,Department of Applied Mathematics and Computer Science,"
To give a general understanding of how an embedded computer system
is organized and works by considering the components involved and
the layers of abstractions used to handle the complexity of such a
system.

To give an understanding of how an embedded
processor/​microcontroller interfaces with peripheral devices.

To enable participants to design, implement, debug, test and
document a computer system for an embedded application consisting
of hardware and software components. 
","Describe the different layers of abstraction used in an
embedded system. Understand the differences and similarities between an embedded
system and a PC. Construct an embedded system that interfaces with I/O
devices. Partition the design of an embedded computer system of some
complexity into smaller and manageable parts of hardware and
software. Explain memory mapped input/output and use it to allow the
processor communicate with devices on a computer system. Construct programs that allows the processor to control
input/output devices that use various protocols such as for example
i2c, spi etc. Construct software programs using a high level programming
language. Describe and use pointers in programs, for example to create
simple dynamic data structures like linked lists. Understand how variables in a program are stored in memory
(heap vs. stack vs. global variables) Understand the relation between assembly and a high level
language (for example C). Act as a member of a small design-team (2-5 participants) and
participate constructively in its management. Write a technical report that documents the project
work.","
* ANSI C programming or other similar language

* Memory layout (Stack, heap etc.)

* Hardware design and implementation using FPGA and VHDL

* Memories

* Interacting with I/O devices: polling, interrupts, memory mapping

* Programs that control I/O devices

* Project involving the structuring, design, implementation and
test of an application, which runs on a computer system of some
complexity where functionality is provided by a combination of HW
& SW

* This course is the bearing course for the 3rd semester CDIO
project. 
","02320,62515,62507","
Edward Alexandru Todirica"
,,,,,,,,,,,,
02323, Introduction to Statistics,Danish , 5 ECTS , 2016/2017 ,E4B (Fri 8-12)  or  F4B (Fri 8-12),BEng,Department of Applied Mathematics and Computer Science,"
To give the participants an introduction to statistical methods and
applications, and to provide them with an understanding of random
variation and of the use of statistical models. Important
statistical principles for collection and analysis of data are
introduced, and methods for model choice, estimation, testing and
model verification are presented. The participants learn to handle
a number of elementary problems which occur frequently in
engineering practice and are thus enabled to critically assess
statistical (empirical) investigations and references. 
","Estimate and interpret simple summary statistics, such as mean,
standard deviation, variance, median and quartiles as well as
correlation Apply simple graphical techniques, including histograms,
normal-score plots, and box plots Identify and describe probability distributions, including
Poisson, binomial, exponential and the normal distribution using
the computer program R Compare different statistical methods Apply and interpret important statistical concepts, such as the
formulation of models, parameter estimation, construction of
confidence intervals and hypothesis testing Apply and interpret simulation based statistical methods Apply and interpret simple statistical methods within one- and
two sample situations and for count data Apply and interpret simple statistical methods within simple
and multiple linear regression and analysis of variance Use the program R and interpret its output Interpret power considerations and perform sample size
calculations in different settings using the program R Debate and criticize empirically based information","
Simple methods for graphical and tabular assessments of collected
or measured data: empirical distributions, histogram, normal
probability plot, box plot. Model formulation. Model control:
control of distribution function. Application of especially
Poisson-, binomial-, exponential- and normal distribution.
Estimation and test of parameters and construction of confidence
intervals in frequently occuring situations (e.g. means, variances,
proportions). Regression analysis with one independent variable and
introduction to the analysis of variance and to the analysis of
contingency tables, estimation theory and simulation based methods.

","01005,01901","
Per B. Brockhoff,
Lasse Engbo Christiansen,
Jan Kloppenborg Møller,
Elisabeth Wreford Andersen,
Peder Bacher,
Niels Landvad,
Helle Rootzén"
,,,,,,,,,,,,
02324, Advanced programming,Danish , 10 ECTS , 2016/2017 ,F2A (Mon 13-17) and June,BEng,Department of Applied Mathematics and Computer Science,"
The purpose of the course is to train the participants in
developing larger Java programs, which are deployed either as
stand-alone applications or web applications.

The most important libraries in the API will be treated as well as
more advanced facets of the language.

Furthermore, appropiate design patterns will be part of the course.

",Describe essential parts of the API Develop stand-alone apllications of a certain complexity Develop web-applications of a certain complexity Illustrate a design by using simel UML diagrams Choose appropiate design patterns for a given problem Use design patterns i building applications Divide applications into a 3-layer architecture Organize code according to the chosen architecture Carry out structured test Time- and activity planning Collaborate in project groups and document a project,"
• I/O

• Exception handling

• Generic types

• Design patterns

• Threads

• GUI-programming

• Web programming with GWT

• 3-layer erchitecture

• MVC (Model / View / Control) 
",,"
Stig Høgh,
Finn Gustafsson"
,,,,,,,,,,,,
02326, Algorithms and Data Structures,Danish , 5 ECTS , 2016/2017 ,F2B (Thurs 8-12),BEng,Department of Applied Mathematics and Computer Science,"
The course introduces a number of fundamental concepts and
techniques for construction and analysis of efficient algorithms
and data structures. To be able to describe, evaluate, and apply
fundamental/basic algorithms and data structures. And to be able to
analyze an algorithm with respect to running time and use of
resources. 
","Describe an algorithm in an understandable way, i.e.,
accurately, concise and unambiguous. Perform basic analyses of algorithms, including being able to
calculate running times and space usage Identify and formulate the underlying algorithmic problem in a
given problem. Apply basic data structures like stacks, queues, linked lists
and hash tables. Apply and analyze basic graph algorithms, for example BFS, DFS
and Dijkstra's algorithm. Implement and test data structures and algorithms, and make
appropriate tests and empirical analysis of them. Analyze, evaluate, and compare algorithms / data structures and
in the light of this, select an appropriate algorithm / data
structure for solving a given problem. Modify known algorithms to solve a given problem. Describe and compare different algorithmic paradigms, including
recursion, greedy algorithms, and divide-and-conquer. Communicate solutions to problems in a clear and precise
manner In a clear understandable language argue for choices made when
solving a problem. Analyse a given problem and make qualified choices to solve the
problem based on the analysis.","
The concept of algoritthms, graphs and trees, recursion and
iteration, fundamental algorithms for sorting of data, techniques
to analyze complexity of algorithms (running time analysis,
analysis of space usage), O-notation, etc. Elementary data
structures (stacks, queues, linked lists, etc), advanced data
structures (hash tabels, binary search trees, etc), graph
algorithms (BFS, DFS, topological ordering, ...), greedy algorithms
and divide-and-conquer algorithms. 
",,"
Philip Bille,
Inge Li Gørtz"
,,,,,,,,,,,,
02327, Preliminary databases and database programming,Danish , 5 ECTS , 2016/2017 ,F3A (Tues 8-12),BEng,Department of Applied Mathematics and Computer Science,"
The aims and objectives of the course is to make the student able
to choose suitable storing methods for object persistence and
especially able to use and develop databases for that purpose. This
also includes selection and use of a DBMS. Furthermore, the student
shall be able to use and access the database via a Java Program and
JDBC. Test of both program and database. 
","Prepare a conceptual data model (E/R-diagrams) Analyse a
description of a problem to be solved as obtained Design the entities and their relationships togehter wit
attributes Mapping of the logical data modelling frrom the conceptual data
model Prove normalisation of the logical model to 3NF or transform
the logical model to 3NF Carry out the activities to produce the physical database
design (i.e. convert a logical model's relations to
tables) Using advanced SQL for implementation of different kinds of
database access Design and implement persistens between an objectoriented
(Java) Program and a relationel databse by using JDBC Optimise queries (to lessen usage of resources and cut waiting
time) Optimise the physical storage of data Use SQL's grant-clause to at least 3 levels","
• Conceptual database design.

o ER-modelling with ER- and EER diagrams

o Structural constraints

o Keys, domains and other constraints

• Logical database design

o Mapping from ER-model to relational model

o Normalization of relational model to 3NF

• Physical database design

o Optimization of queries using indexes

o Administration of access rights.

o Design and implementation of transaction control.

• Design and implement mapping between a relation database and an
object oriented program.

o Methods for object persistence.

• SQL

o Advanced SQL queries

o Views

o Triggers

o Stored Procedures

• JDBC 
",None,"
Bjarne Poulsen,
Ian Bridgwood"
,,,,,,,,,,,,
02332, Compiler Construction,Danish , 5 ECTS , 2016/2017 ,E4A (Tues 13-17),BEng,Department of Applied Mathematics and Computer Science,"
The students learn to understand principles of compilers and
virtual machines. The students learn to use and construct software
tools to implement parts of a working compiler. 
","explain the different phases in compilation and execution operate selected tools relating to the compiler phases (e.g.,
lexers, parsers) explain the different elements in the description of a
programming language derive specifications of the compiler phases, given a textual
description of the syntax of a programming language implement an analysis and code generation phase, given a
textual description of the semantics of a programming language develop a working compiler achieve the goals as part of a group effort, while maintaining
individual accountability communicate solutions to problems in a clear and precise
manner","
The compiler part of the course covers principles of virtual
machines and the main phases of compilers:

(1) Lexical analysis (scanning) and tool support for generation of
scanners.

(2) Syntax analysis (parsing) and tool support for generation of
parsers.

(3) Semantical analysis.

(4) Code generation. 
","02326,02312,02324","
Christian W. Probst"
,,,,,,,,,,,,
02341, Model,English , 5 ECTS , 2016/2017 ,F4B (Fri 8-12),BEng,Department of Applied Mathematics and Computer Science,"
The goal of this course is to equip students with some skills in
modelling software and in using software models in the software
development process. This includes the use of models for defining
systems and model transformations based on the basis of
meta-models. It also includes working as a team on a common
deliverable and communicating clearly and reliably both within the
team and with others, in written and oral form. It also includes
the ability to give and to accept feedback professionally. The
focus is on the practical application of models and automatic code
generation. 
","Have a basic understanding of the use of models in modern
software engineering Use model driven software development to produce software
rapidly and effectively Design robust models Analyse models Understand the relation between models and other
representations (e.g. XMI) Understand and use automatic code generation Combine auto generated code with custom developed code Document software and its design by using models Communicate models orally and in writing Give and receive professional feedback on models and modeling
gracefully Cooperate in a team on a common model, identify and resolve
group dynamic issues Understand the current state of the science in MDE, its
achievements and its limits","
The course consists of a lecture and a practical part. The lecture
will cover an overview of software modelling and the used
technologies. The practical part consists of a small project, which
will apply state-of-the-art technology for model-based software
development.

* Model Driven Architecture (MDA)

* Modelling notations and techniques

* Development of models using different representations

* Representation of models and their instances in XML (e.g. XMI)

* Code generation (forward and reverse engineering)

* Specify and apply model transformation technology

* Analyse model quality with tools and inspections

* Measure model size

* Produce and deliver model reports and presentations 
",None,"
Ekkart Kindler"
,,,,,,,,,,,,
02343, CDIO,Danish , 10 ECTS , 2016/2017 ,F5A (Wed 8-12) and June,BEng,Department of Applied Mathematics and Computer Science,"
The course aims to enable students to handle a complete system
design cycle from concept design to the working product. It
incorporates both software and hardware aspects. The course strives
to recreate work situations which reflect actual working conditions
and prepares the student to work in a development group.

It builds on the student's experience and knowledge from the
previous semesters (1-3) as well as the knowledge obtained in the
other courses on the 4th semester. 
","independently use his/her professional competences to solve
practical engineering problems work with loosely formulated problems explain the main concepts of at least one of the project
management methods currently used by the industry combine the knowledge and competence from different areas in a
larger interdisciplinary project conduct a project which involves all 4 CDIO-elements: conceive,
design, implement, operate work efficiently in larger groups independently explore the relevant literature and software
involved in solving a loosely formulated problem integrate different techniques and technologies into a larger
coherent system divide a larger project into minor parts with the relevant
partial objectives present the status of an ongoing project in both written and
oral form present a final product in both written and oral form be familiar with the English technical terminology to be able
to search for information, read manuals and communicate with other
professionals.","
The students are confronted with an openly specified task which can
be solved in a number of ways. The students will in groups have to
analyse the problem and decide how to tackle it and design a system
that solves it. Thereafter the chosen approach has to be
implemented. The work has to be documented and presented regularly
throughout the course.

The course will be assessed on the following 4 mandatory
components, all of which count as part of the examination:

- 3 smaller status reports to be handed in and later presented and
discussed orally at 3 corresponding status group meetings. Both
reports and status group meetings count as part of the examination.

- presentation of the final product in the 3rd week of the 3 weeks
period.

- a final report of 25 to 35 pages to be handed in at the end of
the 3 weeks period.

- an individual oral exam.

The grade will be based on an assessment of these 4 elements judged
as a whole.

The work has to be conducted in groups of 5-6 students. All reports
and oral presentations are to be carried out by the group as a
whole. The final report, however, is required to contain a clear
indication of who produced which parts of the report, as well as a
clear indication of who did what in connection with the project in
its entirety.

Parallel to the technical part of the course, mandatory lecturesn
on group project work will be given and an ethics module with
mandatory exercises. 
","02342,02332,31021,02343,01917,02344,02323,02333,02321,02326,02341,02324,02325","
Paul Fischer,
Henrik Bechmann"
,,,,,,,,,,,,
02347, Parallel systems,Danish , 5 ECTS , 2016/2017 ,F1B (Thurs 13-17),BEng,Department of Applied Mathematics and Computer Science,"
The course provides a broad introduction to parallel programming
with a focus on practically applicable knowledge. Within the course
industry standards for parallel programming such as MPI, OpenMP,
OpenCL are introduced. Widely available architectures supporting
parallelism are studied, including systems for embedded or mobile
use.

Fundamental and practical theory such as programming models,
performance models and programming patterns are studied.

The goal of the course is that students will be able to solve
simple parallel programming tasks such as making a program race
free and take a small portion of a sequential program and turn it
parallel using a industry standard parallel programming system.
Students will also be able to empirically evaluate performance of
parallel systems. 
","categorize parallel computer systems. explain the performance impact of the memory hierarchy. write small parallel programs using industry standard parallel
programming systems. outline the principles for common parallel programming
models. use synchronization mechanisms to write race-free
programs. use message passing to write distributed parallel
programs. evaluate the performance of parallel programs and computer
systems using empirical methods. identify performance bottlenecks in parallel computer
systems.","
Parallel computer systems: Flynn's taxonomy, challenges in
parallel computer systems, multi-core systems, GPUs, accelerators,
cache and memory hierarchy effects.

Parallel programming models: message passing models, shared memory
models, tasking models, data parallel models.

Thread and process synchronization: message passing, mutual
exclusion, race conditions, mutexes, semaphores, transactions.

Parallel programming patterns: fork-join, master-slave, parallel
data structures.

Parallel programming systems: MPI, OpenMP, OpenCL, threading
libraries.

Performance models and analysis: Amdahl's law, empirical
performance analysis. 
","62514,02326,02312","
Sven Karlsson"
,,,,,,,,,,,,
02350, Windows Programming using C# and .Net,Danish , 5 ECTS , 2016/2017 ,E3A (Tues 8-12),BSc,Department of Applied Mathematics and Computer Science,"
The main purpose of the course is to give the students the most
elementary qualifications which enable them to make, test and
document programs, which have been written in C# by using Microsoft
Windows .NET. The qualifications in question can e.g. be component
based programming, dynamic and static loading of components
(reflection), analysis and design of GUI by using design patterns,
unit tests, attribute based programming and introduction to .NET
3.0. It can also be social and individual qualifications like
working as a part of a group, planning and completing a project,
retrieving information and writing a technical report. 
","Carry out an analysis and a design which provides a basis for a
GUI layer. Carry out an implementation and a test of a GUI. Carry out an analysis, design and implementation of an
application layer by using different components where plug in can
be used Use design patterns by implementation of a Windows
application. Carry out a test and an evaluation of a Windows
application. Present and demonstrate a Windows application. Evaluate and give constructive feedback of ones own and others
work. Organise the cooperation in a heterogeneous group. Plan and complete projects. Write a technical report including citations and reference to
sources.","
The C# .NET platform, exception handling, garbage collection,
parameterised collection classes and interface, user interface
programming in the form of delegates and events, reflection, design
patterns, 3.0 .NET framework class and components (assemblies) in
.NET, ADO.NET, XML and serialisation, multithreaded programming,
dynamic and static loading of a .dll and .exe, unit test and
Windows presentation foundation. Introduction to Windows
Communication Foundation and Workflow Foundation. Group work,
project work and handing in the results. 
","02344,02101,02312,02161","
Bjarne Poulsen"
,,,,,,,,,,,,
02362, Project in software development,Danish , 5 ECTS , 2016/2017 ,F4A (Tues 13-17),BEng,Department of Applied Mathematics and Computer Science,"
To obtain a solid routine of programming during a project 
","use I/O with text files design own elements with exceptions knowledge on recursion use interfaces and container classes (collections) knowledge on classical datastructures (stack, queue ... ) use layered program design (MVC) knowledge on programming with threads use JDBC for accessing databases from a Java application carriyng out a software project in project groups document source code with javadoc (documentation
generator) validate input with regular expressions Use state diagrams and state / decisions tables","
About 50 % of the course consists of lectures . The rest of the
course is used for work on the project with reprot and reviews
(analyze, design, implement, test etc.)

The lectures will be on the new issues, which more or less are used
in the project

The aim of the course will include implementation of a predefined
programming project (CDIO)

Designing a program from a scratch problem with implementation and
documentation of significant elements of this design 
",None,"
Finn Gustafsson"
,,,,,,,,,,,,
02363, Advanced programming,Danish , 5 ECTS , 2016/2017 ,F2A (Mon 13-17),BEng,Department of Applied Mathematics and Computer Science,"
The purpose of the course is to train the participants in
developing larger web applications in GWT using Java as programing
language, 
",Explain the GWT architecture Develop web-applications of a certain complexity in GWT Illustrate a design by using simel UML diagrams Divide applications into a 3-layer architecture Organize code according to the chosen architecture Carry out structured test Time- and activity planning Collaborate in project groups and document a project Explain security aspects of web applications,"
Principles in AJAX applications

Single-page applications

GWT 
",,"
Mads Nyborg"
,,,,,,,,,,,,
02368, Object,Danish , 5 ECTS , 2016/2017 ,E1B (Thurs 13-17),BEng,Department of Applied Mathematics and Computer Science,"
The course is a continuation of the course 02313 ,
""Development Methods for IT systems "" from the first
semester.T he goal of the course is to make the student able to
combine object oriented techniques in all steps of a software
developing process wit a wide range of system models (from XP to
Agile methods SCRUM , etc.)

A business case for repetition of UML starts the course, i.e. from
requirements analysis to the final implementation in an object
oriented language, but the Cardinal points are the use of design
patterns and process management tools in the modeling phase of OOAD

","Select process, documentation and roles for a given software
project Analyze measurable requirements for quality Applying risk analysis Identify and explain software architecture, such as design
patterns Develop relevant analysis and design models for a specific
project Application of a wide range of design patterns Final state machines Prepare a report that documents and evaluate the product of a
project Use GRASP and GoF design patterns Participate as a full member in a project (project
contract) Agile software development in practice (SCRUM)","
• Business Case : From UML for implementation in Java ( Use case
descriptions as a starting point for use case driven development )

• Quality requirements: How do we make them measurable ?

• Risk Analysis: Tools .

• Software architecture , including a wide range of design patterns

• Process models : Iterative and incremental development - Unified
Process , Scrum , XP , etc 
","02802,01917,02324,02314,02313,02312","
Finn Gustafsson,Inge-Lise Salomon"
,,,,,,,,,,,,
02393, Programming in C++,English , 5 ECTS , 2016/2017 ,Fall,MSc,Department of Applied Mathematics and Computer Science,"
To enable the student to program in C++. To start with the most
useful concepts rather than the most privitives one. To describe
real problems and solutions. To cover the language and the standard
library together. 
","select and use data types define and construct data structures and functions, including
recursive, dynamic data structures and recursive functions use principles of structured program design and methods illustrate and use iterators describe and use containers construct and demonstrate generic functions and classes
(templates) use and define classes with encapsulation and constructors use pointers and arrays with memory management develop projects organized in multiple header and source
files explain and apply the principles of abstract data types analyze and compare the complexity of different data structures
and algorithms explain the C++ runtime system","
The course teaches C++ for the working programmer. The focus is on
how to make use of the C++ constructs and libraries for the most
common kinds of problems in an efficient way and to write programs
in an elegant and abstract way. This includes the effective use of
C++ constructs and concepts as well as how to apply good
engineering principles in C++. 
",,"
Sebastian Alexander Mödersheim,
Alberto Lluch Lafuente"
,,,,,,,,,,,,
02402, Introduction to Statistics,Danish , 5 ECTS , 2016/2017 ,E3A (Tues 8-12)  or  F4A (Tues 13-17),BSc,Department of Applied Mathematics and Computer Science,"
To give the participants an introduction to statistical methods and
applications, and to provide them with an understanding of random
variation and of the use of statistical models. Important
statistical principles for collection and analysis of data are
introduced, and methods for model choice, estimation, testing and
model verification are presented. The participants learn to handle
a number of elementary problems which occur frequently in
engineering practice and are thus enabled to critically assess
statistical (empirical) investigations and references. 
","Estimate and interpret simple summary statistics, such as mean,
standard deviation, variance, median and quartiles as well as
correlation Apply simple graphical techniques, including histograms,
normal-score plots, and box plots Identify and describe probability distributions, including
Poisson, binomial, exponential and the normal distribution using
the computer program R Compare different statistical methods Apply and interpret important statistical concepts, such as the
formulation of models, paramteter estimation, construction of
confidence intervals and hypothesis testing Apply and interpret simulation based statistical methods Apply and interpret simple statistical methods within one- and
two sample situations and for count data Apply and interpret simple statistical methods within simple
and multiple linear regression and analysis of variance Use the program R and interpret its output Interpret power considerations and perform sample size
calculations in different settings using the program R Debate and criticize empirical based information Recognize core statistical terms in as well English as
Danish","
Simple methods for graphical and tabular assessments of collected
or measured data: empirical distributions, histogram, normal
probability plot, box plot. Model formulation. Model control:
control of distribution function. Application of especially
Poisson-, binomial-, exponential- and normal distribution.
Estimation and test of parameters and construction of confidence
intervals in frequently occuring situations (e.g. means, variances,
proportions). Regression analysis with one independent variable and
introduction to the analysis of variance and to the analysis of
contingency tables, estimation theory and simulation based methods.

","01005,01901","
Per B. Brockhoff,
Lasse Engbo Christiansen,
Jan Kloppenborg Møller,
Elisabeth Wreford Andersen,
Peder Bacher,
Niels Landvad,
Helle Rootzén"
,,,,,,,,,,,,
02403, Introduction to Mathematical Statistics,Danish , 5 ECTS , 2016/2017 ,June,BSc,Department of Applied Mathematics and Computer Science,"
To give the participants an introduction to statistical thinking
and methods and to provide them with an understanding of random
variation and of the use of statistical models. A mathematical
approach to statistics will be introduced.

Important statistical principles for collection and analysis of
data are introduced, and methods for model choice, estimation,
testing and model verification are presented. The participants
learn to handle a number of elementary problems which occur
frequently in engineering practice and are thus enabled to
critically assess statistical (empirical) investigations and
references. 
","Estimate and interpret simple summary statistics, such as mean,
standard deviation, variance, median and quartiles as well as
correlation. Apply simple graphical techniques, including histograms,
normal-score plots, and box plots. Identify and describe probability distributions, including
Poisson, binomial, exponential and the Normal distribution using
the programme R. Understand the background for classical sample distributions::
t-, χ²-, F- distributions. Compare different statistical methods. Apply and interpret important statistical concepts, such as the
formulation of models, paramteter estimation, construction of
confidence intervals and hypothesis testing. Apply and interpret simulation based statistical methods. Apply and interpret simple statistical methods within one- and
two sample situations and for count data. And account for the
mathematical background. Apply and interpret simple statistical methods within simple
and multiple linear regression and analysis of variance. Use the programme R and interpret output from it Interpret power considerations and perform sample size
calculations in different settings using the programme R Debate and critize emprically based information.","
Simple methods for graphical and tabular assessments of collected
or measured data: empirical distributions, histogram, normal
probability plot, box plot. Model formulation. Model control:
control of distribution function. Application of especially
Poisson-, binomial-, exponential- and normal distribution.
Estimation and test of parameters and construction of confidence
intervals in frequently occuring situations (e.g. means, variances,
proportions). Regression analysis with one independent variable and
introduction to the analysis of variance and to the analysis of
contingency tables, estimation theory and simulation based methods.

For all methods the focus is both on applications and on the
mathematical background of the statistical methods. 
",01005,"
Per B. Brockhoff,
Lasse Engbo Christiansen,
Jan Kloppenborg Møller,
Elisabeth Wreford Andersen,
Peder Bacher,
Niels Landvad"
,,,,,,,,,,,,
02405, Probability theory,Danish , 5 ECTS , 2016/2017 ,E4B (Fri 8-12),BSc,Department of Applied Mathematics and Computer Science,"
To provide the participants with an intuitive and rigorous
understanding of probabilistic concepts. The course will
familiarize the student with different sources of variability that
occur in technical fields and science. This is partly done by
exposure to a number of basic models of widespread application.
Introduction of various standard techniques enables the students to
perform calculations of probabilistic nature. The course provides
the mathematical background for probabilistic methods used in
statistics courses as well as courses within technical areas with a
significant component of random phenomenona. Examples are models of
reliability, formation of queues, traffic, analysis of signals,
DNA-sequence modeling, etc. 
","Apply simple approximate formulas for calculation of
probabilities Apply operations with random variables to obtain new
probability distributions. Formulate simple probability models from a verbal
description. Apply basic definitions and axioms in problem solving (simple
problems). Apply the concept of conditional probability in the basic
formulas and definitions of it. Apply the concepts of conditional distribution and conditional
moments. Choose the correct probabilistic model for a real world
phenomenon based on the characteristics. Perform simple calculations with moments, cross-moments and
correlations. Apply and utilize the relationship between the different ways
of expressing a probability distribution. Calculate distributions and quantities derived from the
bivariate normal distribution. Correctly apply characteristics of discrete and continuous
distributions respectively","
Axioms of probability theory, exclusion- inclusion, conditional
probability, independence, Bayes rule, calculation of the
probability of a sequence of events, the binomial distribution,
normal approximation to the binomial distribution, sampling with
and without replacement, the hypergeometric distribution, discrete
random variables, moments with emphasis on mean value and variance,
Markovs and Chebychevs inequalities, the central limit theorem,
indicator variables, the geometric and negative binomial
distributions, the Poisson distribution, continuous random
variables, the normal- exponential- and gamma- distributions,
survival function, hazardrate, change of variable principle in one
dimension, cumulative distribution function, order statistics,
uniform continuous random variables, bivariate continuous random
variables, the Rayleigh distribution, the chi square distribution,
conditional distributions, conditional moments, covariance, the
bivariate normal distibution 
","02405,01005","
Bo Friis Nielsen"
,,,,,,,,,,,,
02407, Stochastic Processes ,English , 5 ECTS , 2016/2017 ,E3A (Tues 8-12),MSc,Department of Applied Mathematics and Computer Science,"
(Generally) To learn to formulate and analyse relatively simple
dynamic probabilistic models. (Especially) To be acquainted with
some models of this type which have proved practically usable. 
","Differentiate between different types of stochastic processes,
and determine which model class that is most relevant for a certain
dynamic phenomenon Simulate realizations of a Markov- or renewal process Classify states of a Markov process and the process itself Determine invariant distributions in Markov processes Determine simple time varying transition probabilities in
Markov processes Formulate and solve equations for time to absorption or
expected time to absorption in Markov chains. Formulate discrete time Markov processes, which arise from
different sampling techniques in continuous time processes Identify and analyze important special cases of Markov
processes, e.g. birth and death processes and fundamental queueing
systems Perform calculations in models based on Brownian
motion","
The topics are: Markov chains in discrete and continous time,
renewal and Markov renewal processes. 
","02405,02403,02402,02401","
Bo Friis Nielsen"
,,,,,,,,,,,,
02409, Multivariate Statistics,English , 5 ECTS , 2016/2017 ,E1A (Mon 8-12),MSc,Department of Applied Mathematics and Computer Science,"
To give the participants a more thorough understanding of
statistical methods with special emphasis on revealing the
structure of multidimensional data. The participants are expected
to learn to assess multidimensional (linear and non-linear)
relations and estimate best predictors, to analyze the influence of
complicated experimental designs on (uni- or multi-dimensional)
measurements, to assess whether multidimensional data can be
reduced to lower dimensionality and in doing this, to assess
whether a number of features in a population can be described with
a few ""factors"", to discriminate between different
populations using simple (linear) functions of measurements of
different features of the single individuals, to assess the
structure of and relations between phenomena which vary in time.
Lastly to be able to use a standard statistical computer program
(SAS) and be able to interpret the output and relate it to the
course curriculum. 
","Explain structure of multivariate data, and calculate the
structure of linear combinations of such data Apply the multivariate normal distribution to describe
multivariate data, and assess it's relevance in a given
case Identify relevant distributions derived from the normal
distribution, and apply those in conclusions of performed
analyses Interpret multivariate data based on eigenvalue analyses of
correlation- and variance-covariance-structures Construct relevant models with both univariate and multivariate
respons variables, and evaluate the model quality in a given
case Suggest an analysis for a given set of data, and find the
parameters and other relevant quantities Identify relevant quantities in, and interpret output from, a
specified statistical software Relate formulas and concepts from the course with the relevant
quantities in a specified statistical software","
We will cover a large fraction of the following multidimensional
models: Multidimensional distributions, multiple and partial
correlation. The general linear model: Estimation and testing,
geometric interpretation. Regression analysis: Estimation and
testing, determination of best regression equations, analysis of
residuals, prediction intervals, non-linear analysis etc.
Multidimensional analysis of variance. Classification: Bayesian
classifiers, linear and quadratic discriminant analysis, canonical
discriminant analysis. Canonical analysis: Canonical correlation,
principal components, factor analysis. Correlation models: Models
for random phenomena which vary in time and space. 
","02403,02402,02416","
Knut Conradsen"
,,,,,,,,,,,,
02411, Statistical Design and Analysis of Experiments,English , 5 ECTS , 2016/2017 ,E2A (Mon 13-17)  or  F1A (Mon 8-12),MSc,Department of Applied Mathematics and Computer Science,"
To acquaint the students with efficient statistical methods that
may serve as basis for the planning of experiments and research
activities. The methods aim at providing precise and reliable data
and moreover to reduce the experimental work as much as possible.
Methods for reduction of the influence from noise factors on
experimental results are presented. 
","formulate an adequate experimental design for an experiment in
the laboratory or under similar more or less controlled
conditions. assess advantages and disadvantages of alternative experimental
designs, for example with respect to randomization and/or
blocking. formulate a correct mathematical model for data obtained froma
given experimental design. test and estimate the effects in models for experiments with
both deterministic and random effects. do detailed analyses of factorial effects by means of adequate
contrasts and/or methods for grouping of mean responses. to construct experimental designs for factorial experiments
with many factors each at (most often) two levels by means of block
confounding and reduction through effect confounding. use special methods for statistical analysis of data from block
confounded and/or reduced many-factor designs. use and carry out the statistical analysis of data from
experiments with measurable sources of experimental noise
(covariates). determine the necessary number of measurements in simple
designs.","
Main principles in experimental design: Randomisation and blocking.
Balanced designs, square-designs, one or more blocking variables.
Balanced incomplete block designs. Factorial designs, blocking in
factorial designs, fractional factorial designs and confounding.
Multiple regression analysis and analysis of covariance. 
",02402,"
Murat Kulahci"
,,,,,,,,,,,,
02413, Statistical Quality Control,English , 5 ECTS , 2016/2017 ,E1B (Thurs 13-17),BSc,Department of Applied Mathematics and Computer Science,"
To give the participants the necessary tools for the development of
efficient statistical methods for the control of quality, in e.g.
technical or environmental relations, and to give the participants
a basic knowledge of standard methods for statistical control of
production processes. It is of major concern that the participants
learn to assess the efficiency of various methods under
consideration in relation to the specific field of application. 
","Formulate an (the) adequate statistical control problem for a
production or similar process. Use alternative statistical methods for solving the process
control problem. Assess general advantages and disadvantages for alternative
process control methods. Assess and compare alternative process control methods
concretely (numerically). Use standardised methods (ISO) for statistical quality control
of lots by sampling. Use sampling methods relating to attribute sampling as well as
to sampling by variables. Assess advantages and disadvantages relating to the sampling
strategy (single, double, sequential). Estimate and test quality measures in general by means off
modern and relevant statistical tools.","
Statistical procedures for acceptance sampling: Single, double and
sequential sampling for discrete and continuous distributions.
Application of international standards for acceptance sampling.
Statistical process control by control-chart methods: Shewhart
control-charts (X-R charts etc.), exponential smoothing (EWMA) and
CUSUM-charts. 
",02402,"
Murat Kulahci"
,,,,,,,,,,,,
02417, Time Series Analysis,English , 5 ECTS , 2016/2017 ,E4B (Fri 8-12) and F4B (Fri 8-12),MSc,Department of Applied Mathematics and Computer Science,"
To give a thorough introduction to time series analysis with a
focus on applications relevant to engineering science and for
modelling of physical systems. A special attention is put on
methods for model formulation and estimation. A main goal is to
form the theoretical background for applications within
forecasting, automatic and adaptive control, image analysis,
econometrics and technometrics. 
","Apply methods for building stochastic dynamic models Understand the relation between dynamic systems and stochastic
processes Knowlegde about linear stochastics process models (ARMA; ARX;
Box-Jenkins; GLM; OE; ARIMA; Seasonal models; etc.) Apply and calculate correlation functions Apply time domain and frequency domain descriptions Predictions in time series Formulate state space descriptions Understand and implement the Kalman filter Apply regression based methods for time series Optimize prediction functions and model based control Document and present results in a written report Give constructive feedback to others reports","
Linear stochastic processes. Conditional expectations with
applications. Characterisation of stochastic processes. Second
order analysis. Description in time and frequency domain.
Correlation functions and their applications. Model formulation.
Non-stationary processes. Time series with periodic variations and
trends. Identification, estimation and verification of models for
stochastic processes. Box-Jenkins method. Spectral analysis.
Bivariate and multivariate time series analysis. Transfer functions
with stochastic models. State space formulation, prediction and
reconstruction. Kalman filter. Time series with missing
observations. Methods for recursive estimation. Adaption methods.
Introduction to non-linear stochastic processes.

A number of examples of real life applications will be used for
illustrating the methods. Likewise some of the assignments will be
focused on application areas, e.g. development of medicine or
modelling of sewage systems. 
","02403,02402,02631","
Henrik Madsen,
Lasse Engbo Christiansen,
Jan Kloppenborg Møller"
,,,,,,,,,,,,
02418, Statistical modelling: Theory and practice,English , 5 ECTS , 2016/2017 ,E4A (Tues 13-17),MSc,Department of Applied Mathematics and Computer Science,"
To introduce some of the most applied statistical methods and to
introduce more advanced and theoretical topics in statistics. The
course participants will learn to conduct statistical analysis
using the software R. Emphasis will be put on analysis,
interpretation and presentation of data. The course is a link
between the introductory course and more advanced course offered at
the Department. 
","Formulate and apply the most common statistical models Perform model check and be able to evaluate the adequacy of
statistical methods in specific applications Be able to interpret and present results from statistical
analysis Have knowledge about estimation methods, in particular the
principle of Maximum Likelihood Have knowledge about simulation based methods Have knowledge about Bayesian methods Be able to perform standard statistcial analysis using the
statistical software R Recognize the possible use and potential of more advanced
statistical methods Be able to write a report on statistical findings for an
audience without statistical background","
The course will cover the most common methods in applied
statistics, usually illustrated with case stories and the
statistical software R. Also more theoretical issues are covered. A
number of lectures will introduce more advanced topics and thus
motivates for more advances courses at the Department. 
",02405,"
Elisabeth Wreford Andersen,
Jan Kloppenborg Møller"
,,,,,,,,,,,,
02421, Stochastic Adaptive Control,English , 10 ECTS , 2016/2017 ,"F3 (Tues 8-12, Fri 13-17)",MSc,Department of Applied Mathematics and Computer Science,"
To give the students a knowledge of methods for:

-Describing and controlling dynamic systems, which are influenced
by stochastic disturbances.

-Identification of stochastic systems (i.e. estimation of unknown
parameters) and, finally

 -Adaptive control of stochastic systems (i.e. simultaneous
identification and control). 
","Discuss which assumptions the methods and models are based
on Formulate and analize stochastic process models and dynamic
system influenced by stochastic disturbances Solve equations related to analyses of stochastic systems Design, analyse and investigate the properties of control
strategies for stochastic systems Design, analize and investigate the properties of methods for
stateestimation Apply and assess methods for estimation of parameter in
stochastic systems Analyse and evaluate the validation and verification of a
model Apply, analyze and construct (implement) recursive estimation
procedure Combine and assess estimation and design methods that form an
adaptive controller Present results and assessments in oral and writing Perform analysis and assessments on computer","
The course consists of three parts. In the first part the
stochastic system is assumed to be known and the basic stochastic
control theory is given. In order to considering control of an
unknown system the second part of the course deals with modelling
stochastic systems (i.e. system identification and parameter
estimation). In the third and final part of the course the methods
described in the previous parts are combined in adaptive control,
i.e. control of unknown dynamic systems. The methods are mainly
given for discrete time, state space - and transfer function
models. 
","28250,02402,31300","
Niels Kjølstad Poulsen"
,,,,,,,,,,,,
02424, Advanced Dataanalysis and Statistical Modelling,English , 5 ECTS , 2016/2017 ,F2A (Mon 13-17),MSc,Department of Applied Mathematics and Computer Science,"
To introduce the participants to modern concepts and methods used
for analysis of different type of data and to give them skill in
using the methods in practice using the R program.

By the end of the course you should be able to analyze variation in
data, identify significant sources of variation and assess their
effect, usually by means of a statistical model. 
","analyze different type of data using the R program analyze variation in data identify important sources of variation asses the importance of different sources of variation by use
of a statistical model present assumptions, method, results and interpretation of a
statistical analysis pose, delimit and carry out a project within the framework of
the course decide which model(s) are useful for analysing a given data
set apply likelihood based methods statistical model building","
Likelihood methods and principels,

general linear models,

generalized linear models,

mixed effects models. 
","02418,02403,02402,02409","
Henrik Madsen,
Jan Kloppenborg Møller"
,,,,,,,,,,,,
02425, Diffusions and stochastic differential equations,English , 5 ECTS , 2016/2017 ,E2A (Mon 13-17),MSc,Department of Applied Mathematics and Computer Science,"
The course aims to enable the student to examine – analytically and
numerically - diffusion processes and models based on stochastic
differential equations. Central in the course is the connection
between the physical notion of diffusive transport, diffusion as a
Markov process, and stochastic differential equations as dynamic
systems driven by noise. 
","Describe Brownian motion and its role in stochastic integrals
and stochastic differential equations Compare different stochastic integrals, most importantly the
Ito integral and the Stratonovich integral. Apply Ito's lemma and similar formulas from stochastic
analysis. Convert a stochastic differential equation to an
advective-diffusive transport equation, and conversely. Analyse a stochastic differential equation in terms of sample
paths and transition probabilities, both analytically and
numerically. Synthesise a stochastic model of a system by combining
deterministic differential equations with assumed noise
properties. Implement a filter for a scalar stochastic differential
equation with discrete-time measurements Evaluate the importance of including noise in a study of a
given system.","
The course starts with advective and diffusive transport, and Monte
Carlo simulation of a molecule in flow. We then turn to Brownian
motion and stochastic integrals, and establish the Ito integral. We
define stochastic differential equations (sde's), and cover
analytical and numerical techniques to solve them. We describe the
transition probabilities of solutions to sde's, and establish
the forward and backward Kolmogorov equations. We consider
stochastic filtering in sde's with discrete time measurements.
Additional topics may include stochastic stability, optimal
stopping, stochastic control, boundary conditions, or diffusion on
manifolds. The theory is illustrated with applications in
engineering, physics, biology, and oceanography. 
","02407,01246,01035,02417","
Uffe Høgsbro Thygesen,
Henrik Madsen"
,,,,,,,,,,,,
02427, Advanced Time Series Analysis,English , 10 ECTS , 2016/2017 ,E5 (Wed 8-17),MSc,Department of Applied Mathematics and Computer Science,"
To give an introduction to advanced methods for time series
analysis. The primary goal to give a thorough knowledge on
modelling dynamic systems. Special attention is paid on non-linear
and non-stationary systems, and the use of stochastic differential
equations for modelling physical and technical systems. The main
goal is to obtain a solid knowledge on methods and tools for using
time series for setting up models for real life systems. 
","Apply methods for building stochastic dynamic models Identify the need for a non-linear model Identify the need for a non-stationary model Knowledge about a number of non-linear and non-stationary model
classes Establish models in discrete and continuous time Differentiate between methods for formulating stochastic
models Apply stochastics models for prediction Knowledge about using stochastic differential equations for
modelling Apply non-parametric and semi-parametric methods Calculate predictions of time series Estimate parameters in stochastic dynamic models IDocument and present results in a written report.","
Non-linear time series models. Kernel estimators and time series
analysis. Identification of non-linear models. State space models.
Prediction in non-linear models. State filtering. Stochastic
differential equations. Estimation of linear and (some) non-linear
stochastic differential equations. Experimental design for dynamic
identification. Methods for tracking parameters in non-stationary
time series. Examples of both non-linear and non-stationary models.
Non-linear models and chaos. Model building for real life systems.
The final contents of the course will be discussed with the
students. 
",02417,"
Henrik Madsen,Erik Lindstrom"
,,,,,,,,,,,,
02429, Analysis of correlated data: Mixed Linear Models,English , 5 ECTS , 2016/2017 ,Fall and E2B (Thurs 8-12),MSc,Department of Applied Mathematics and Computer Science,"
To obtain knowledge about and ability to the handling of
statistical analysis of data based on mixed linear models, with
applications in agriculture, food science, biology, medicine and
technical sciences. 
","Construct and apply factor structure diagrams for complex
experimental designs. Apply statistical methods based on the theory of mixed linear
models with a dedicated software product. Explain the theory of mixed linear models. Compare and contrast random and fixed effects. Compare different methods of statistical analysis. Apply and explain statistical analyses of data from unbalanced
block and split-plot experiments. Apply and explain statistical analyses of data from unbalanced
longitudinal studies. Apply and explain hierachical statistical analyses including
variance component models and regression models with varying
coefficients. Apply and explain statistical methods for repeated measurements
including the identification of various correlation
structures. Combine and modify the various techniqes.","
The course will cover the basic general theory and applications of
mixed linear models, ie, including fixed and random effects but
also more general correlation structures are covered including the
use of mixed linear models for the analysis of repeated
measures/longitudinal data.

In short, if you have a data structure that goes beyond what you
learn in basic statistics courses, you will learn how to deal with
them in a practically oriented way!

Data can be from a designed experiment or an observational study.

The software packages R will be used. 
","02418,02411,02402","
Per B. Brockhoff"
,,,,,,,,,,,,
02431, Risk Management,English , 5 ECTS , 2016/2017 ,January,MSc,Department of Applied Mathematics and Computer Science,"
The concept of Risk is frequently a subject of debate in our
society. In terms of regulatory attention, strategies are under
change from Rule-based approaches to Risk-based approaches. Our
society seems to be confronted with an increasing number of
ill-understood Risks, be they global warming, the introduction of
new chemical substances, the release of genetically modified
organisms into the environment, the proliferation of emitters of
electromagnetic radiation (mobile phones) etc., the emergency of
nanotechnology etc.

The overall purpose of this course is to provide students with
skills and insights for them to relate in a qualified manner to
existing and future debates of risk. The objectives are 1) to
enable students to undertake a simple risk assessment, 2) to
outline the components and principles of a basic risk management
programme, and 3) provide students with key insights so they know
some pitfalls and limitations for the application of 1) and 2).
This is an introductory course that favours qualitative aspects of
risk management over quantitative approaches.

The course introduces the student to risk-based decisions.
Particularly situations where information is partial or uncertain,
or events with a low chance of occurrence but with unacceptably
large consequence. Participants are introduced to basic methods of
risk analysis and assessment, and with some major approaches to
risk management, to a large extent illustrated by the use of
practical examples.

These cases draw from a diverse selection of specialist topics,
e.g. industrial accident prevention, the provision of safe drinking
water, nuclear power plant safety, natural disaster emergency
planning and response, rail transportation safety, amongst others.
The cases have been selected because they illustrate or relate to
theoretical views on risk that are part of curriculum. Students are
expected to know the cases and understand how they relate to risk
topics presented in course. 
","Understand and apply basic risk terminology Explain the difference between risk management and safety
management Relate in a qualified manner to key propositions on how risk is
generated, including risk trade-off theory, normal accident theory,
cyclic patterns of failure and Perrow's recent views on
intensification as a source of risk Explain popular accident models, including the Heinrich
triangle and Reason's barrier concept Apply a basic risk identification technique and undertake a
simple risk analysis and risk assessment Outline the components and principles of a simple risk
management programme Identify key characteristics of accident precursor analysis,
explain the near-miss concept, and relate to the
learning-from-past-mistakes approach to risk management Identify and analyze different strategies for risk management,
pro et contra Explain and analyze some limitations for risk analysis and some
common pitfalls in risk management programmes. Explain the cases that are part of curriculum and explain how
they relate to risk concepts and topics presented in course. Identify key requirements to a good written assignment,
identify and relate to theory and empirical findings, have a basic
understanding of epistemology, in particular the ability to
identify positivism Relate in a qualified manner to existing and future debates of
risk","
Introduction, terminology, asteroid impact (objective) risks, high
reliability theory, risk tradeoffs and cost benefit, the safety
factor concept and Petrosky's proposition on cyclic patterns of
failure, Perrow's normal accident theory, Reason's barrier
model, ammonia storage installation safety, What-If methodology,
barrier diagram analysis, risk matrix assessment, risk acceptance
criteria, disaster planning preceding Hurricane Katrina and
emergency response, epistemology, accident precursor analysis,
Wildavsky's views on anticipation and resilience,
organisational learning disabilities, cases which cannot be
explained by standard rational theory, accountability and blame,
redundancy and reliability. 
",,"
Frank Huess Hedlund,
Lasse Engbo Christiansen"
,,,,,,,,,,,,
02435, Decision,English , 5 ECTS , 2016/2017 ,F4A (Tues 13-17),MSc,Department of Applied Mathematics and Computer Science,"
To provide the student with the skills to tackle decision-making
problems with uncertain information within the field of electricity
markets by making use of techniques of optimization under
uncertainty. 
","Explain the basic structure of an electricity market, its
functioning and constituent parts. Formulate as mathematical programs the decision-making problems
faced by market operators, retailers, consumers, and producers in
short-term electricity markets. Apply a technique of optimization under uncertainty (i.e.,
stochastic programming or robust optimization) to account for
uncertainty in the decision-making processes faced by market
agents. Solve optimization problems modeling decision-making processes
under uncertainty using a modeling tool such as GAMS. Compare the different techniques of optimization under
uncertainty in terms of uncertainty modeling, objective function,
degree of conservatism of solution and problem structure. Determine and judge the best technique of optimization under
uncertainty to be applied to a specific decision-making problem
given input information, modeling of uncertainty, risk criterion,
sequence of decisions and computational tractability. Organize and present results in a scientific paper or technical
report. Communicate problems, doubts, and results orally. Keep track of one's own learning process. Organize, plan and carry out collaborative work in a group
project.","
Core elements:

* Techniques of optimization under uncertainty: stochastic
programming and robust optimization.

* Trading and operational problems of electricity producers,
retailers and consumers.

* Role and operational problem of a market operator.

Key concepts: here-and-now vs. recourse decisions; 1-stage, 2-stage
and multi-stage decision-making processes; decision rules; robust
and stochastic solutions; worst-case and expected-value
optimization; risk aversion; scenario; value of stochastic
solution, expected value of perfect information, etc. 
","02407,02417,42002,42111,42112,02427","
Juan Miguel Morales González"
,,,,,,,,,,,,
02441, Applied Statistics and Statistical Software,English , 5 ECTS , 2016/2017 ,January,MSc,Department of Applied Mathematics and Computer Science,"
To acquaint the participants with statistical work on a practical
problem, typically involving many data. Descriptive methods are
presented. The statistical analyses are carried out using modern
statistical software (R). 
","Formulate and apply some commonly used statistical models Able to interpret the results from some simple statistical
models Perform model validation Perform estimation, hypothesis testing, and prediction by means
of some simple statistical models Perform simple statistical analysis by means of statistical
software Interpret the output from statistical software Adequately interpret the results of statistical analysis Write a report describing the results of statistical analysis
to people without background in statistics","
A project assignment based on an actual problem from a research
institute or a company will be part of the course. The statistical
software R will be used to analyse the data. 
","02323,02403,02402","
Lasse Engbo Christiansen"
,,,,,,,,,,,,
02443, Stochastic Simulation,English , 5 ECTS , 2016/2017 ,June,MSc,Department of Applied Mathematics and Computer Science,"
Numerical simulation is used for solving problems which are so
complex that a theoretical model of the system cannot be solved by
analytical methods. The goal is to enable the student to formulate
a model of a real-life problem, implement and validate this model
on a computer, and perform experiments with the computer model.
Emphasis is put upon models involving stochastic elements, which
are simulated by so-called Monte Carlo methods. 
","Apply build-in random number generators in various software
products Implent algorithms for random number generation from various
distributions Perform simple statistical analysis of simulated data Apply simulation based statistical techniques like bootstrap
and Markov Chain Monte Carlo Apply simulated annealing as a heuristic method for minor
optimization problems with discrete variables Develop and implement simulation procedures for simple
technical systems using the event by event principle Perform verification of a programme for simulation Perform validation of a simulation model Plan and execute a simulation study for a specific part or
function of some (technical) system Apply techniques for variance reduction in a simulation
study Present the results of a simulation study writtenly or
verbally","
The first week deals with theory and exercises, followed by a
case-study during the remaining two weeks. Theory: The modelling
process, methods of solution, random number generation, sampling
from statistical distributions. Discrete simulation: Time-true
simulation, event-by-event principle, variance reduction.
Case-studies: Operations research real-life problems, e.g.
performance of data- and telecommunication systems, production
planning, inventory control, optimal stochastic control etc. 
",02405,"
Bo Friis Nielsen"
,,,,,,,,,,,,
02450, Introduction to Machine Learning and Data Mining,English , 5 ECTS , 2016/2017 ,E4A (Tues 13-17) and F4A (Tues 13-17),"BSc,,MSc",Department of Applied Mathematics and Computer Science,"
To provide the participants knowledge of

* fundamental and widely applied methods for data modeling and
machine learning,

* a framework for data modeling,

* Matlab, R or Python as a tool for data analysis (the participant
can freely choose between these programming languages).

The course enables the participants to apply machine learning for
modeling of real world data. 
","Describe the major steps involved in data modeling from
preparing the data, modeling the data to evaluating and
disseminating the results. Discuss key machine learning concepts such as feature
extraction, cross-validation, generalization and over-fitting,
prediction and curse of dimensionality. Sketch how the data modeling methods work and describe their
assumptions and limitations. Match practical problems to standard data modeling problems
such as regression, classification, density estimation, clustering
and association mining. Apply the data modeling framework to a broad range of
application domains in medical engineering, bio-informatics,
chemistry, electrical engineering and computer science. Compute the results of the data modeling framework by use of
Matlab, R or Python. Use visualization techniques and statistics to evaluate model
performance, identify patterns and data issues. Combine and modify data modeling tools in order to analyze a
data set of their own and disseminate the results of the
analysis.","
Structured data modelling. Data preprocessing. Feature extraction
and dimensionality reduction including principal component
analysis. Similarity measures and summary statistics. Visualization
and interpretation of models. Overfitting and generalization.
Classification (decision trees, nearest neighbor, naive Bayes,
neural networks, and ensemble methods.) Linear regression.
Clustering (k-means, hierarchical clustering, and mixture models.)
Association rules. Density estimation and outlier detection.
Applications in a broad range of engineering sciences. 
",,"
Morten Mørup,
Mikkel Nørgaard Schmidt,
Jan Larsen,
Tue Herlau"
,,,,,,,,,,,,
02451, Digital Signal Processing,English , 10 ECTS , 2016/2017 ,E5 (Wed 8-17),MSc,Department of Applied Mathematics and Computer Science,"
To provide the participants knowledge of

* Fundamental and widely applied digital signal processing methods,

* Matlab as a tool for development of signal processing algorithms,

The course thus enables the participants to construct a digital
signal processing system. 
","Describe different signal classes and identify the relevant
spectral representation Explain and apply properties of discrete time signal processing
systems Apply Fourier transform properties to compute the spectrum of a
signal Analyze a discrete time signal processing system and calculate
associated transfer functions Explain sampling and reconstruction processes and determine the
relevant parameters in specific applications Deduce and determine how the discrete and fast Fourier
transform can be applied for computation of signal spectra and in
filtering operations Deduce and apply correlation functions and power spectra for
various signal classes, in particular for stochastic signals Construct and apply simple multi-rate signal processing
systems Analyze adaptive filtering problems and demonstrate the
application of Wiener or adaptive filter components Solve and interpret the result of signal processing problems by
use of Matlab Design of simple, specific signal processing systems based on
an analysis of involved signal characteristics, the objective of
the processing system, and utility of methods presented in the
course Describe a number of signal processing applications and
interpret the result of using specific signal processing
methods","
Signals and systems; signals with finite energy and finite power;
signal sampling and reconstruction; frequency analysis of signals;
the discrete Fourier transform and FFT; stochastic signals;
correlation functions and power spectra; multirate signal
processing; the Wiener filter; adaptive filters. 
",,"
Jan Larsen"
,,,,,,,,,,,,
02452, Audio Information Processing Systems,English , 5 ECTS , 2016/2017 ,F5A (Wed 8-12),MSc,Department of Applied Mathematics and Computer Science,"
The aim of this course is to enable students to understand,
implement, and analyze systems that create, modify, or extract
information from audio. 
","Describe the use of audio information processing systems in
application areas such as digital media systems, medicine, and
creative arts. Describe the use of signal processing, acoustics, and auditory
perception in audio information processing systems. Design and implement audio information processing systems for
creating, modifying, and extracting information from audio. Manipulate different representations of audio including
waveforms and spectra, cepstral and chroma features, source-filter
and sinusoidal models, and perceptual audio coding. Synthesize audio such as speech and music based on statistical
and physical models. Transform and process audio including noise reduction,
time-scale modification, audio effect filtering, and
3D-spatialization. Extract information from audio such as estimating tempo and
fundamental frequency as well as detecting and discriminating
between different audio sources. Separate mixed audio into individual sources using techniques
such as independent component analysis.","
Representing audio: Audio features and representations. Creating
audio: Audio synthesis using statistical and physical models.
Manipulating audio: Noise reduction, audio effects, and source
separations. Extracting information from audio: Estimation,
detection, and classification. 
","02450,02451","
Jan Larsen,
Mikkel Nørgaard Schmidt"
,,,,,,,,,,,,
02453, Applied Digital Signal Processing,English , 5 ECTS , 2016/2017 ,Spring,MSc,Department of Applied Mathematics and Computer Science,"
To solve digital signal processing problems by using Matlab. 
","Define own learning objectives for the project Collect knowledge and data related to the project topic based
on a specific project proposal Carry out a well-founded delimitation of the project and
formulate specific hypotheses and aims Organize and coordinate the work in the project group Plan and carry out the course of the project in collaboration
wit the project supervisor Design a signal processing system based on an analysis of the
problem and the project aims, and further select relevant signal
processing algorithms and methods Assess and summarize the project results in relation to aims,
methods and available data Solve and interpret the result of a signal processing problem
by use of Matlab Structure and write a final technical report including problem
formulation, description of methods, experiments, evaluation and
conclusion Presentation of methods and results at meetings with project
supervisor and fellow students as well as at the final oral
presentation","
Each group of two students selects a project based on the topics
covered in 02451 Digital Signal Processing. Examples of projects
are: Spectral analysis, adaptive filtering, multi-rate and
multidimensional filtering. Algorithms are designed, implemented
and tested using a general computer. The algorithms can e.g. be
tested on speech, music or biomedical signals. Each group of
students prepares a report. 
",02451,"
Jan Larsen"
,,,,,,,,,,,,
02454, Introduction to Cognitive Science,English , 5 ECTS , 2016/2017 ,E3A (Tues 8-12),MSc,Department of Applied Mathematics and Computer Science,"
Humans and computers alike process information. Many computing
problems, such as face recognition, language understanding and
content-based search, are trivial for humans but difficult to
implement in machines. Vice versa, many computing problems are
simple for machines but difficult for humans. This is because
humans and computers process information in different ways.

An understanding of cognition, i.e. how humans process information,
can be helpful when developing new algorithms and when designing
systems in which humans and computers interact. It is also useful
for understanding the human brain and cognition in general.

The course introduces several methods for studying how humans
process information. Behavioral measures, such as response time and
accuracy is the main focus but physiological measures such as EEG
and fMRI are also introduced.

The course describes how cognition can be divided into modules such
as perception, attention and memory. The function of these modules
is then described in relation to major theories of cognition both
quantitative and qualitative. The results from key experiments are
integral to the course. 
","Be able to describe the most important theories in cognitive
science Be able to discuss the fundamental concepts in cognitive
science Carry out a predefined psychological experiment Quantitatively analyze results from psychological
experiments Evaluate the theoretical importance of a psychological
experiment Explain in own words the principles behind some of the basic
mathematical models of human cognition Analyze some basic mathematical models of human cognition using
Matlab or similar analysis tools Identify and discuss areas where cognitive science is relevant
for information technology and vice versa","
The course introduces cognitive science to the engineer through
lectures and exercises. Through practical exercises, the students
gain hands-on experience with experimental methods in cognitive
science. The course will draw parallels between cognitive science
and information technology and elucidate where and how the two
fields interact. 
","01005,02402","
Tobias Andersen"
,,,,,,,,,,,,
02456, Deep learning,English , 5 ECTS , 2016/2017 ,E2A (Mon 13-17),MSc,Department of Applied Mathematics and Computer Science,"
The purpose of this course is to give the student a detailed
understanding of the deep artificial neural network models, their
training, computational frameworks for deployment on fast graphical
processing units, their limitations and how to formulate learning
in a diverse range of settings. These settings include
classification, regression, sequences and other types of structured
input and outputs and for reasoning in complex environments. 
","Demonstrate knowledge of machine learning terminology such as
likelihood function, maximum likelihood, Bayesian inference,
feed-forward, convolutional and recurrent neural networks, and
error back propagation. Understand and explain the choices and limitations of a model
for a given setting. Apply and analyze results from deep learning models in
exercises and own project work. Plan, delimit and carry out the project in collaboration with
fellow students and project supervisor. Assess and summarize the project results in relation to aims,
methods and available data. Carry out the project and interpret results by use of
computational framework for GPU programming such as
Theano/TensorFlow/Torch. Structure and write a final short technical report including
problem formulation, description of methods, experiments,
evaluation and conclusion. Organize and present project results at the final project
presentation and in report. Read, evaluate and give feedback to work of other
students.","
Course outline week 1-6:

1. Introduction to statistical machine learning, feed-forward
neural networks (FFNN) og error back-propagation.

2. Convolutional neural networks (CNN), presentation and selection
of student projects.

3. Recurrent neural networks (RNN).

4. Tricks of the trade, computational frameworks for graphical
processing units (Theano/Lasagne, TensorFlow and Torch).

5. Variational learning for unsupervised and semi-supervised
learning.

6. Reinforcement learning - a gentle introduction.

The remaining weeks of the 13 week period will be spent on tutored
project work and project presentations. 
","02405,02403,02402,01005,02409,02634,02450,02631,02632,02633","
Ole Winther"
,,,,,,,,,,,,
02457, Non,English , 10 ECTS , 2016/2017 ,"E1 (Mon 8-12, Thurs 13-17)",MSc,Department of Applied Mathematics and Computer Science,"
Machine learning, signal detection and pattern recognition are
fundamental aspects of modern applications of signal processing in
for example in hearing aids, telecommunication, big data, digital
media and in bio-medicine. In many applications a realistic
physical signal model is unavailable; hence, machine learning is
used to identify a suitable model, typically within flexible
semi-parametric family of models, such as artificial neural
networks, gaussian processes or Gaussian mixtures. 
","Be able to discuss fundamental concepts in machine learning:
Generalizability, likelihood functions, Bayesian modeling, and the
bias-variance trade-off. Be able to discuss fundamental concepts of signal detection:
Bayesian decision theory, the role of posterior probabilities and
loss functions. Establish likelihood functions for machine learning models Design adaptive linear and non-linear signal modeling and
detection systems Use cross validation to obtain un-biased performance
estimates. Evaluate adaptive linear and non-linear signal modeling and
detection systems Explain implementations of adaptive systems and evaluation
methods in Matlab. Be familiar with applications of machine learning in audio
signal detection, including speech recognition. Be familiar with applications of machine learning in
bio-medical data. Give a verbal presentation of results obtained in the course
matlab exercises","
Content vary from year to year but typically covers: Signal
detection, pattern recognition, and machine learning. Bayesian
decision theory and mathematical modelling of pattern recognition
systems. Machine learning including neural networks. An
introduction to the theory of machine learning is given. The theory
will be illustrated by applications in the areas of digital media,
bio-medicine, and datamining. 
",,"
Lars Kai Hansen"
,,,,,,,,,,,,
02458, Cognitive Modelling,English , 5 ECTS , 2016/2017 ,E2B (Thurs 8-12),MSc,Department of Applied Mathematics and Computer Science,"
Theories of cognition as information processing can be implemented
in quantitative models. In this course, we introduce models of
attention, memory and perception. We extract commonalities and
discuss model variations. The students will learn to evaluate
models based on empirical and simulated data using mathematical
analysis programs. 
","Quantitatively evaluate models of cognitive functions based on
empirical data Simulate data from a model Use modelling results in design of experiments Discuss the relation between qualitative and quantitative
models of cognitive functions Describe and use the basic tools of quantitative analysis of
psychophysical experiments including signal detection and
psychometric functions Describe models of neural coding Analyze perception from a Bayesian perspective Describe the relationship between neural and cognitive
models","
Models of attention, perception and memory are introduced through
lectures. Through exercises, students learn to test models,
investigate model variations and simulate data. Finally, the
students learn to independently use the methods to analyse and
compare models during project work. 
","02454,01005,02402","
Tobias Andersen"
,,,,,,,,,,,,
02460, Advanced Machine Learning,English , 5 ECTS , 2016/2017 ,F1B (Thurs 13-17),MSc,Department of Applied Mathematics and Computer Science,"
To provide knowledge of current research topics in machine
learning. To provide hands on experience in an application from the
technical or scientific domain. 
","Define own learning objectives for the project Collect scientific knowledge and data related to the project
topic based on a specific project proposal Carry out a well-founded delimitation of the project and
formulate specific hypotheses and aims Organize and coordinate the work in the project group Plan and carry out the course of the project in collaboration
wit the project supervisor Design a machine learning based system starting from analysis
of the problem and the project aims, and further select relevant
algorithms and methods Assess and summarize the project results in relation to aims,
methods and available data Carry out the project and interpret results by use of Matlab,
Python or other programming language Structure and write a final short technical article including
problem formulation, description of methods, experiments,
evaluation and conclusion Presentation of methods and results at meetings with project
supervisor and fellow students Organize and present project results at the final poster
presentation","
The course starts with lectures on current research subjects, e.g.,
prediction of time signals, neural networks, hidden Markov models
and Kalman filters for sequential data, Bayesian modeling and
classification, independent component analysis, segregation, and
analysis of audio signals. The participants carry out a project
within the presented topics. 
","02457,02450","
Jan Larsen,
Lars Kai Hansen,
Ole Winther,
Morten Mørup,
Mikkel Nørgaard Schmidt"
,,,,,,,,,,,,
02502, Image analysis,Danish , 5 ECTS , 2016/2017 ,E3A (Tues 8-12),BSc,Department of Applied Mathematics and Computer Science,"
To give a general introduction to image analysis, and to enable
participation in advanced courses in this field. The course is
aimed at engineering students in general. 
","Explain the fundamental properties of digital images and how
they may be generated and changed by the methods learned during
this course Apply methods for image filtering Apply geometric image transformations Apply methods for shape analysis, including morphology,
distance transformations, and blob analysis Apply simple pattern recognition methods on images Apply methods for texture analysis Point at appropriate methods for a given problem Implement the methods above in Matlab scripts","
Digital images and data structures, display and color,
transformations, image aquisition, geometric operations, image
filtering, distance transformations, connected component analysis,
mathematical morphology, segmentation, classification, texture
analysis, illumination and materials. 
",,"
Jens Michael Carstensen"
,,,,,,,,,,,,
02504, Computer Vision,English , 5 ECTS , 2016/2017 ,F3B (Fri 13-17),MSc,Department of Applied Mathematics and Computer Science,"
This course follows 02502 introductory image analysis. In this
course focus will be on camera geometry and somewhat on object
recognition. This e.g. has applications in digital entertainment,
mapping and visual sensors for robots. 
",Apply camera geometry between two images. Estimate 3D points from 2D image correspondences. Use linear methods for camera estimation. Extract image features. Automatic find correspondences between image feature sets. Use the Ransac algorithm Apply methods for image database search. Apply methods for object localization Combine the above mentioned methods in a system.,"
The content of this course is how one can construct semi or fully
automatic solutions for doing 3D inferens from images. It is also
covered how some of the image registration techniques introduced in
this regard can be used for image database search and object
localization. 
",02502,"
Henrik Aanæs"
,,,,,,,,,,,,
02505, Medical Image Analysis,English , 5 ECTS , 2016/2017 ,E1B (Thurs 13-17),MSc,Department of Applied Mathematics and Computer Science,"
To give the participants insight into methods for manipulation of
images in biomedical applications. After the course the
participants will be able to implement and apply the mathematical
models on computers. The participants will learn to solve typical
image analysis problems arising in radiological departments and
biomedical research organizations. 
","Perform landmark-based, intensity-based, and surface-based
image registration in 2D Decide on the most appropriate similarity measure for specific
image registration problems Use several linear and non-linear transformation models for
image registration Select the most appropriate transformation model for specific
image registration problems Implement a simple surface-based segmentation algorithm in
2D Implement advanced voxel-based segmentation algorithms in
2D Explain the mathematical models and optimizers used in medical
image registration and segmentation Validate the results of automated medical analysis
algorithms","
Landmark-based registration; intensity-based registration
(sum-of-squared differences, Mutual Information, principal axis
transform); linear and non-linear transformation models (rigid and
affine transformations, canonical form, thin plate splines,
B-splines); surface-based registration; surface-based segmentation
(dynamic programming); voxel-based segmentation (Gaussian mixture
models, Markov random field priors); optimization (Gauss-Newton,
expectation-maximization); atlases; validation. 
","02502,02402","
Koen Van Leemput"
,,,,,,,,,,,,
02506, Advanced Image Analysis,English , 5 ECTS , 2016/2017 ,F5B (Wed 13-17),MSc,Department of Applied Mathematics and Computer Science,"
To give knowledge of advanced statistical methods and models for
analyzing image data, and give competence in applying these
techniques in different applications. The course attempts to make
the participants recognize that the use of appropriate statistical
models can extract useful knowledge from image data - knowledge
that is not directly accessible. 
","Implement advanced image analysis algorithms in MatLab. Assess if an implemented image analysis algorithm works
correctly and gives the desired results. Motivate and identify the underlying assumptions of an image
analysis method. Apply Baysian methods to image analysis problems. Apply scale space methods, and know when this is
appropriate. Apply texture analysis on image analysis problems Apply deformable template models, and estimate these from
data. Apply Markov Random Field techniques to image analysis
problems. Apply multiple view geometry methods to image analysis
problems.","
Bayesian image analysis, reularisation, Markov random fields,
segmentation and , orthogonal transformations, geostatistical
models, computer vision. The topics and their application are
taught in lectures and computer exercises using Matlab and other
tools. The course includes peer grading of other students reports. 
","02502,02409,02501","
Anders Bjorholm Dahl"
,,,,,,,,,,,,
02507, Project work within Image Analysis and Computer Graphics,English , 5 ECTS , 2016/2017 ,January,MSc,Department of Applied Mathematics and Computer Science,"
To give the students knowledge of and experience in solving actual
problems from image analysis or computer graphics. 
","Define a technical problem Collect information about the problem domain Identify necessary activities for solving the problem Plan a small project including organization, scheduling, and
risk analysis Select appropriate methods Evaluate the performance of selected methods Construct a full solution to the problem Summarize and conclude on the full solution Recommend future work on the problem Evaluate the work of other groups","
After an introduction on the first day, the students work in groups
of 2-4 persons. Each group has its own problem (which the members
help to choose and define). The problems are taken from current
research at DTU Informatics, e.g.

 1. Feature matching: Find corresponding 'features' in two
images and find the best match, taking into account the camera
optics. Occurs e.g. in stereo vision.

 2. Elektrophooresis Gel Matching (used to analyse proteins): Find
an optimal distortion of the image of a gel to give a best match
with another. This problem has similarities with 1.

 3. Deformable models: Use prior assumptions and observations to
find an optimal segmentation. Used to find the fat and lean parts
in images of meat. 
",,"
Jens Michael Carstensen"
,,,,,,,,,,,,
02508, Extended Introductory Statistics,Danish , 2.5 ECTS , 2016/2017 ,E4A (Tues 13-17)  or  F4A (Tues 13-17),BEng,Department of Applied Mathematics and Computer Science,"
This course is an extension of introductory statistics and it is
required that the participants have taken an introductory
statistics course at the latest at the same time. The participants
learn to handle a number of problems which occur frequently in
engineering practice and are thus enabled to critically assess
statistical (empirical) investigations and references. 
","Compare different statistical methods. Apply and interpret important statistical concepts, such as the
formulation of models, paramteter estimation, construction of
confidence intervals and hypothesis testing. Apply and interpret classic non-parametric tests Apply and interpret simple and multiple linear regression
analyses. Use the programme R and interpret output from it Debate and critize emprically based information Apply and interpret basic calculations w.r.t. principal
components and their use in regression. Present the results of a statistical analysis in a written
report.","
The focus of this course is on applied statistics and the
understanding of the results. Topics covered are: classic
non-parametric methods. Regression analysis with one or more
independent variables and model control. Principal component
analysis combined with regression analysis, and an introduction to
statistical process control. 
","02323,01901","
Jan Kloppenborg Møller,
Per B. Brockhoff,
Elisabeth Wreford Andersen"
,,,,,,,,,,,,
02511, Introduction to Medical Image Analysis,Danish , 10 ECTS , 2016/2017 ,F5A (Wed 8-12) and F5B (Wed 13-17),BSc,Department of Applied Mathematics and Computer Science,"
To give a general introduction to medical image analysis. After the
course, the participants will have knowledge of the types of images
used in the clinical practice and what possibilities one has with
these images. Furthermore, the participant will be able to
implement and use simple image analysis systems. Finally, the
participant should be able to evaluate the results from the image
analysis by comparing to clinical estimations. 
","Explain the fundamental properties of digital images Describe technologies and properties for methods that generate
digital images in the clinical practice. For example X-ray,
microscopy, CT and MRI Explain the basic differences between selected image types Choose proper image formats when storing images Implement and apply basic image analysis algorithms, including
image filtering, geometrical transforms, grey-level morphology,
annotation, registration, texture analysis, classification, and
segmentation Choose the appropriate image analysis algorithm based on one or
several example images. Validate results by comparing with clinical evidence or ground
truth. Improve and optimise algorithms based on clinical ground truth
data. Implement and use simple shape based image analysis
algorithms Give examples off image analysis algorithms that are used for
visualisation and analysis of 3D images.","
Digital image and data structures, medical modalities, image file
formats, anti-aliasing, pixel transforms, image transforms, image
filtering, labelling and object analysis, mathematical morphology,
segmentation, landmarks, registration, classification, texture
analysis, Hough transformation, deformable shape model, clinical
validation, 3D images. 
",None,"
Rasmus Reinhold Paulsen"
,,,,,,,,,,,,
02512, Introduction to Medical Image Analysis,Danish , 5 ECTS , 2016/2017 ,F5A (Wed 8-12),BSc,Department of Applied Mathematics and Computer Science,"
To give a general introduction to medical image analysis. After the
course, the participants will have knowledge of the types of images
used in the clinical practice and what possibilities one has with
these images. Furthermore, the participant will be able to
implement and use simple image analysis systems. Finally, the
participant should be able to evaluate the results from the image
analysis by comparing to clinical estimations. 
","Explain the fundamental properties of digital images Describe technologies and properties for methods that generate
digital images in the clinical practice. For example X-ray,
microscopy, CT and MRI Explain the basic differences between selected image types Choose proper image formats when storing images Implement and apply basic image analysis algorithms, including
image filtering, geometrical transforms, grey-level morphology,
annotation, registration, texture analysis, classification, and
segmentation Choose the appropriate image analysis algorithm based on one or
several example images. Validate results by comparing with clinical evidence or ground
truth. Improve and optimise algorithms based on clinical ground truth
data. Implement and use simple shape based image analysis
algorithms Give examples off image analysis algorithms that are used for
visualisation and analysis of 3D images.","
Digital image and data structures, medical modalities, image file
formats, anti-aliasing, pixel transforms, image transforms, image
filtering, labelling and object analysis, mathematical morphology,
segmentation, landmarks, registration, classification, texture
analysis, Hough transformation, deformable shape model, clinical
validation, 3D images. 
",None,"
Rasmus Reinhold Paulsen"
,,,,,,,,,,,,
02513, Industrial machine vision,English , 5 ECTS , 2016/2017 ,June,MSc,Department of Applied Mathematics and Computer Science,"
After finished the course the student will have worked with all
aspects of a specific vision system, and hereby gotten familiar
with all aspects of an operational vision system. This includes
identification and description of a specific problem, design of a
relevant vision system, implementation of both software and
hardware, and test of the system on a relevant case. 
","Identify and describe an engineering relevant problem that can
be solved using a vision system Design a vision system Make a plan for implementing a vision system Implement the chosen vision system Make experimental analysis of the implemented vision
system Explain how a camera is adjusted in order to obtain wanted
properties of an acquired image Explain how light affects the system and demonstrate
light-system interactions Explain specific limitations in the real-time implementation of
the chosen system","
The students will come through all aspects of building an
operational vision system including (I) identification and
description of a problem, (II) design, (III) implementation, and
(IV) experimental analysis and reporting. All students will learn
to use the camera as an active sensor, and get familiar with light
setting, real-time image analysis, and related problems that must
be solved in order to obtain an operational vision system. 
",,"
Anders Bjorholm Dahl"
,,,,,,,,,,,,
02515, Health Care Technology,English , 10 ECTS , 2016/2017 ,E5 (Wed 8-17),MSc,Department of Applied Mathematics and Computer Science,"
The main purpose of the course is to study specification, design,
and implementation of an IT health care technology application
including programming framework, sensors, databases, and analysis.
As an example of such systems the course studies the use of modern
human tracking devices to motivate and stimulate physical exercise,
to facilitate rehabilitation, or to perform diagnostic tasks on
patient with motor disorders. The course is project oriented and
students will work in groups of 2-4. The overall goal is to
specify, design, and implement a game-like exercise system using a
modern programming framework and a suite of sensors. The
programming framework can for example be C#, Unity
(http://unity3d.com/), and
Microsoft XNA
(http:/​/​msdn.microsoft.com/​en-us/​library/​bb200104.aspx)
and the sensor can for example be Microsoft Kinect. Data should be
stored in an SQL database and a statistical analysis should be
performed. 
","Describe the concepts of home-rehabilitation, ambient assisted
living, and gamification Use pose tracking and the Microsoft Kinect Use C#, Unity/XNA, and skeleton tracking Analyze application scenario, e.g. home exercises for elderly,
re-habilitation of injured, Exercises for cerebral palsy Implement a requirement specification for a small, interactive
system Implement a test specification for a small, interactive
system Design a user interface and describe the design choices Implement a proto-type system Implement test procedures for a selected group of test
persons Use statistical classification of test-data","
The following topics are covered

• Introduction to home-rehabilitation, ambient assisted living, and
gamification

• Introduction to pose tracking and the Microsoft Kinect

• Introduction to C#, Unity/XNA, and skeleton tracking

• Selection of a scenario, e.g. Home exercises for elderly,
Re-habilitation of injured, Exercises for cerebral palsy

• Writing a equirement specification

• Write a test-specification

• Design a user interface and describe the choices

• Implement a proto-type system

• Test the system on a selected group of test persons (ideally two
different groups)

• Evaluate the results of the test with respect to the
test-specification

• Statistical classification of test-data 
",,"
Rasmus Reinhold Paulsen,Sune Darkner"
,,,,,,,,,,,,
02525, Introduction to Mathematics and Technology,Danish , 10 ECTS , 2016/2017 ,E1B (Thurs 13-17) and January,BSc,Department of Applied Mathematics and Computer Science,"
To provide

1) a general introduction to studies at DTU;

2) an introduction to mathematics, mathematical modeling and
related applications;

3) an introduction to IT systems at DTU and programming tools for
solving mathematical problems;

4) an engineering perspective on the education through development
of core values such as: independence, practical relevance,
professional identity, problem solving processes, professionalism
and depth, creativity;

5) training in group work and report preparation. 
","Describe aspects of the work of a fully qualified
engineer. Organise collaboration in project groups with the aim of
solving a specific engineering task. Independently pick up simple mathematical methods. Perform simple mathematical modelling. Use simple mathematical models to solve specific problems and
explain the obtained results in relation to various aspects of the
problem. Implement mathematical algorithms on a computer. Use graphical tools for visualising mathematical results. Write a short technical report with specific structure,
including references and citations. Provide a short oral or poster presentation of methods and
results. Conduct relevant experiments for validation of models or
verification of hypotheses in relation to specific problems. Account for all work accomplished by the group when doing group
work.","
A number of independent projects, of one or a few weeks duration,
are carried out in the autumn semester. An introduction to
programming with the mathematical software tool Matlab is provided
in January. Further, in January, a larger project is carried out.

The aim is that these projects taken together with the recommended
courses at the first and second semester will provide an
introduction to the most important mathematical subjects of the
education and to a number of important applications. In addition,
these projects and courses should point toward advanced subjects
and courses.

The content of the projects will vary from one year to another. 
",None,"
Jeppe Revall Frisvad,
Christian Henriksen"
,,,,,,,,,,,,
02526, Mathematical Modeling,Danish , 5 ECTS , 2016/2017 ,F3A (Tues 8-12),BSc,Department of Applied Mathematics and Computer Science,"
Mathematical modeling is a prerequisite in solving the majority of
technical problems. A typical solution is found by first
formulating a mathematical model that is implemented on a computer,
and after that a lab scale experiment is set up and finally a real
world solution is made. The ability to formulate a relevant
mathematical model, which can be implemented in a computer and
provide useful information is a fundamental prerequisite for modern
engineering. In this course the student will get tools for setting
up a mathematical model, carry out simulations and calculations on
these models, and perform a critical analysis and report the
obtained results. The implementation will to a large extent be
based on third party software to ensure focus on modeling and
analysis, and to train students in using already implemented
algorithms and be critical to these. 
","Set up a mathematical model and judge its area of validity Set up and explain the formulas in the model Choose data and set up test scenarios Implement numerical algorithms primarily using third party
software using Matlab or C++ Carry out calculations and simulations on a computer Understand the model parameter’s influence on the model Exploit the calculated results of the model Use statistical tools to judge the obtained results Interpret the relevance of the results for the analyzed
problem Write a stringent and structured report that precisely
describes the model and analysis of the calculated
results","
The main content of the course is to solve specific cases with
associated problems. For each case a problem has to be analyzed,
the mathematical model must be described and implemented on a
computer, and calculations and simulations must be done, which
illustrates the relevance of the model. All of this has to be
reported in a structured manner. The methods will fall within
discrete mathematics, image analysis, differential equations,
cognitive systems, operations research, and scientific computing.
The course include peer grading of other students reports. 
","02405,02403,02525,01017,01005,02502,01025,02601,10033,01022,02635,10024,10022,10020","
Anders Bjorholm Dahl,
Poul G. Hjorth"
,,,,,,,,,,,,
02561, Computer Graphics,English , 5 ECTS , 2016/2017 ,E5A (Wed 8-12),MSc,Department of Applied Mathematics and Computer Science,"
Computer generated models and images are all around us. Classic
applications are CAD systems for product design, game engines,
computer animation, 3D multimedia, virtual reality, and scientific
visualization. With the recent development in 3D scanning and
printing technology, work with digitized real world objects has
also become an important area of application.

Interactive computer graphics enables us to manipulate digital 3D
objects. The ability to work interactively with digital objects is
an important engineering skill. Computer graphics is essential both
in the classic disciplines, where we model and render digital
objects, and in the full cycle from digitalization to visualization
and manipulation to printing of real world objects. In addition,
modern internet browsers support hardware accelerated 3D graphics
in webpages that run on both desktop and mobile platforms. This
means that 3D graphics will also be used more broadly in the
webpages of the future.

This course provides an overview of interactive computer graphics.
Our objective is to enable the participants to (a) implement
real-time computer graphics systems and (b) to develop graphics
algorithms for and apply them in visualization, modelling, and
animation. The course covers web graphics technology and introduces
the principles of 3D graphics that one would need to operate in the
graphics applications discussed above. 
","Apply an application programming interface such as WebGL or
OpenGL for program development Access graphics hardware using shader languages such as
GLSL Create a 3D scene with different object types, light sources
etc. Apply different camera types and geometries for visualizing the
scene Interact with the scene using various interaction
techniques Modeling light-material interaction for a surface and develop
simple shaders Simulate surface details using texture mapping and bump
mapping Simulate the environment using environment mapping Simulate shadows and specular interreflections Interactively edit simple 3D models Animate camera and object positions Apply dynamic light settings","
WebGL and OpenGL as an API. Extended camera models. Transformations
and projections.

Local contra global illuminations models. Hybrid methods.

Real time rendering: Shadow algorithms. Bump, reflection,
environment and multi-texture mapping.

3D graphics cards and implementing vertex, pixel, and unified
shaders in GLSL

Interaction techniques (picking, selecting, rubber banding,
events).

Procedural modelling: 2D- and 3D texturer.

Volume modeling: Boundary, CSG, Analytic (B-spline, Nurbs), and
Voxel modelling (Volume sculpting, volume rendering) 
",01005,"
Niels Jørgen Christensen,
Jeppe Revall Frisvad"
,,,,,,,,,,,,
02562, Rendering ,English , 5 ECTS , 2016/2017 ,E5B (Wed 13-17),MSc,Department of Applied Mathematics and Computer Science,"
Rendering is what we need to create, using a mathematical model on
a computer, a digital image that looks like the real
three-dimensional world. Computer animation for movies and games
are classical examples where rendering is essential. Visualization
of architecture and products under development (digital prototypes)
is another important application area. It is also an advantage to
use computer graphics rendering techniques for visualizing 3D
simulations or measurements.

To give the participants an overview of computer graphics systems
for general/off-line rendering (photorealistic images, material
appearance modelling, computer animation, scientific visualization,
mapping techniques) as well as some experience in developing
algorithms and implementing parts for such systems. In particular,
it is the purpose to get acquainted with algorithms for simulating
light-material interaction and implement parts of a graphics system
which can render relatively complicated objects, scenes and
illumination conditions. 
","Implement ray tracing, radiosity, and photon mapping. Implement shaders for rendering surfaces. Explain and apply BRDF solutions for describing light-material
interaction. Simulate visual effects that appear in a global illumination
context (reflection, refraction, colour bleeding, caustics). Explain and analyze rendering techniques and choose the best
suited method for a given visualization assignment. Use simple sampling techniques for anti-aliasing and soft
shadows. Use texture mapping (mapping an image to a surface) to highten
the level of visual detail. Accelerate rendering techniques using spatial data structures
and graphics cards (GPU). Use radiometric concepts to describe how light energy is
emitted, reflected and transmitted from one surface to
another.","
Visual effects: direct illumination, shadows, reflection,
refraction, colour bleeding, caustics, texture.

Methods: ray tracing, radiosity, photon mapping, texture mapping.

Core elements: building computer graphics systems for rendering,
radiometry and photometry, light-material interaction (BRDF, BTDF),
acceleration data structures, 3D projection (camera and texture),
GPU acceleration. 
",01005,"
Niels Jørgen Christensen,
Jeppe Revall Frisvad"
,,,,,,,,,,,,
02564, Real,English , 5 ECTS , 2016/2017 ,F1B (Thurs 13-17),MSc,Department of Applied Mathematics and Computer Science,"
To enable the participants to employ advanced techniques for
real-time graphics in computer programs.

Such techniques often rely on shader programming, typically involve
several render passes, and sometimes also the use of the graphics
card for computation rather than visualization. We teach methods
which, generally, are applicable both to desktop and mobile
platforms. 
","Describe a range of methods for real-time graphics. Use graphics hardware efficiently, taking the characteristics
of the concrete hardware platform into account. Develop applications, which have shader programs as a core
element. Develop applications, which involve the visualization of
terrain and many 3D objects. Use off screen frame buffers for multi pass rendering or
computation. Develop applications which employ dynamic objects and
animation. Develop procedural techniques for the generation of geometry
and textures. Employ methods such as Levels-of-Detail and parallax mapping to
increase the apparent amount of visual detail. Employ a palette of shading techniques to obtain visual results
ranging from photorealism including some indirect illumination to a
simple cartoon style. Develop real-time graphics for desktop and mobile
platforms Exploit sensors in mobile platforms for controlling 3D
animation","
Efficient rendering of large scenes, advanced shader programming,
multi pass and deferred rendering, interaction, animation,
procedural content, levels of detail, visibility, parallax and
displacement mapping, ambient occlusion and indirect illumination,
particle systems, image based rendering, etc. We use OpenGL for the
desktop and OpenGL ES for mobile platforms. GLSL is used for
shaders. 
","02561,02110","
Jakob Andreas Bærentzen"
,,,,,,,,,,,,
02565, Computer Animation and Modelling,English , 10 ECTS , 2016/2017 ,"F2 (Mon 13-17, Thurs 8-12)",MSc,Department of Applied Mathematics and Computer Science,"
Enable the participants by use of advanced computer graphics
systems to create scenes, 3D geometric models, and Computer
Animations, that can be used in Games, Scientific Visualization, 3D
multimedia productions, modelling of Virtual Environments or in
construction and design projects. Furthermore, the aim is to model
complex geometric objects and propose geometric solutions to
complicated technical problems. 
","Model complex geometric objects Adjust and simplify geometric models; for instance for use in
games and other real time applications Make light setting and work with light effects Define material properties based on known BRDF's Apply texture mapping in defining surface structure Make 3D animations based on key framing and function
curves Model object movements based on dynamic simulations Model object and character movements based on invers/forwards
kinematik Rendering of scenes based on the scanline method, raytracing,
path tracing, and photon mapping Analyse and develop solutions for a communication/​presentation
problem Explain and have an overview of the structure of complicated
computer graphics systems","
Concepts for development of a computer animation. Geometric
Analysis. Building geometric models in a combined patch-, polygon-,
NURBS and density modelling system. Sculptured surfaces.
Deformation. Adding surface properties and 2D and 3D textures to
the models. Warpning. Scene composing including virtual light
setting. Rendering techniques. Animations based on in-between
techniques: camera animation, object deformations and animation.
Function curves. Constraints. Dynamic simulation. Character
animation using invers and forward kinematics. Combining geometric
objects and video/images so that virtuel object can be placed in a
""real"" world. Video editing and composing techniques such
as used in the film industry.

In the exercises you apply selected examples of a series of large
graphics systems (Maya, Creo P/ AutoCAD og Adobe AfterEffects). It
is possible to develop plugins. 
","01007,01005","
Niels Jørgen Christensen"
,,,,,,,,,,,,
02582, Computational Data Analysis,English , 5 ECTS , 2016/2017 ,F2B (Thurs 8-12),MSc,Department of Applied Mathematics and Computer Science,"
To provide the student knowledge of advanced computer intensive
data analysis methods with applications to e.g. life sciences.
These include problems with many variables and relatively few
observations, hyper-spectral images etc. 
","Evaluate clustering methods and select suitable parameters and
models for given data Evaluate linear discriminant analysis and ridge regression Evaluate cross validation, bootstrapping and concepts such as
overfitting. Evaluate sparse regression and classification models. Evaluate logistic regression and support vector classifiers for
2 class problems Evaluate and interpret Classification and Regression Trees
(CART). Evaluate bagging, boosting and random forests for
classification and regression. Evaluate and interpret sparse latent methods such as sparse
principal component and sparse partial least squares. Evaluate a range of unsupervised decomposition methods Compare the mentioned methods","
Methods: Clustering, ridge regression, elastic net, sparse
principal components, sparse discriminant analysis and Gaussian
mixture analysis, logistic regression, support vector machine,
classification and regression trees, bagging, boosting, random
forests, nonnegative matrix factorization, independent component
analysis, sparse coding, archetypical analysis.

Case studies: multispectral imaging, and more. 
","27411,02450,02409","
Line Katrine Harder Clemmensen"
,,,,,,,,,,,,
02585, Digital 3D Geometry Processing,English , 5 ECTS , 2016/2017 ,E3B (Fri 13-17),MSc,Department of Applied Mathematics and Computer Science,"
With the use of modern optical techniques, the acquisition of 3D
models from physical objects has become extremely accessible.
However, the raw output of a 3D scanner is simply a cloud of,
possibly, millions of measured points.

The aim of this course is to teach methods for the handling and
processing of such geometric data. Starting from raw scans made by
students using scanning equipment designed and built in house in
the department, the course takes the student through the steps
needed to clean and consolidate the data with the aim of
constructing a high quality 3D model that can be used for
visualization or further modeling.

The teaching is on a level which enables the student to construct
software for handling specific problems pertaining to the topics
taught; having followed this course, the student should be prepared
to write a master's thesis within this area. 
","Use and select surface representations for geometric tasks Compute differential geometric properties of discrete and
smooth surfaces Polygonize implicit surfaces Create polygonal meshes from 2D and 3D point sets Simplify polygonal meshes Smooth and remove noise from polygonal meshes Register and merge polygonal meshes Triangulate 2D point sets Parameterize 3D surfaces Spatial data structures Compute convex hulls in 2D and 3D Use and understand the underlying technology of an optical 3D
scanner","
The following topics are discussed:

- Several surface representations, for instance, meshes, distance
fields (signed and unsigned).

- Differential geometry properties of discrete surface
representations.

- Primitive operations on meshes.

- Simplification and optimization of meshes.

- Registration and merging of meshes.

- Triangulation and manipulation of triangulations.

- The underlying technology of an optical 3D scanner.

- Subdivision surfaces. 
",,"
Henrik Aanæs,
Jakob Andreas Bærentzen,
David Brander"
,,,,,,,,,,,,
02586, Statistical Genetics,English , 5 ECTS , 2016/2017 ,E1A (Mon 8-12),MSc,Department of Applied Mathematics and Computer Science,"
To provide the participants with a framework within statistical
methodology, in order to understand concepts in genetics that in
nature are probabilistic, in this context. A special emphasis will
be devoted to inference on issues such as linkage disequilibrium
and similar concepts in inheritance models.The course will also
focus on obtaining methods within statistics and probability
theory, with the aim of applications within the area of the course.

","Possess the knowledge, skills and tools needed to read current
theoretical, methodological and applied literature in Statistical
Genetics, to understand methods, and to interpret analyses. Understand Mendelian inheritance in a probabilistic
framework. Understand the practical implementation of basic statistical
and probabilistic methods within statistical genetics. Be able to work with methods from statistical genetics in
practice. Identify procedures for estimation of allele frequencies,
recombination frequencies, and other genetic parameters underlying
observations on Mendelian traits. Set up models for linkage equilibrium and disequilibrium, and
perform the corresponding analyses. Perform association studies for selected disease traits and
genetic markers. Estimate the degree to which a certain phenotype may be
explained based on genotype. Model genetic data at population level with mathematical and
statistical models. Evaluate which statistical model that best explains a given
data set relevant for the course contents. Be able to lead a discussion among peers on topics of
statistical genetics.","
Basic concepts of molecular genetics; genetic models; allele
frequencies estimation; population substructure; Hardy-Weinberg
equilibrium; testing equilibrium models; heritibility analyses;
linkage analysis; genetic association; codominant, recessive and
dominant models; power functions; genetic distance; adaption and
control of statistical models; predictions. 
","02405,01005,02403,02402","
Anders Stockmarr"
,,,,,,,,,,,,
02601, Introduction to Numerical Algorithms,Danish , 5 ECTS , 2016/2017 ,F1B (Thurs 13-17),BSc,Department of Applied Mathematics and Computer Science,"
To perform a technical/mathematical computation (such as evaluation
of an integral or solution of a differential equation) on a
computer, one must use numerical algorithms that define how the
computations are performed efficiently and accurately. Hence,
numerical algorithms are the fundamental ""building
blocks"" in most technical computations - whether they are done
in Matlab, C, or other languages.

This course gives an introduction to the field of numerical
algorithms, with focus on the interplay between the mathematical
formulation of the computational problem and the practical
implementation on a computers (specifically: in Matlab). The aim is
to give the student a basic understanding of how to perform
mathematical computations on a computer. 
","explain and apply basic notions such as iteration and
convergence discuss the effect of truncation and rounding errors critically compare alternative methods regarding efficiency and
accuracy apply numerical algorithms to actual (simple) problems implement simple numerical algorithms in Matlab apply existing Matlab programs in the solution of a given
problem perform sensitivity analysis of a simple problem estimate and in some cases derive estimates of the accuracy of
the computed solution convey and discuss the topics of the course in a clear
technical language develop computational methods in such that they are first
tested and evaluated on selected test problems","
Approximations and rounding errors. Numerical algorithms for
solving systems of linear equations, numerical integration, roots
in functions, linear data fitting, and ordinary differential
equations. Implementation and use of selected numerical algorithms
in Matlab. 
",,"
Per Christian Hansen,
Peter Røgen"
,,,,,,,,,,,,
02602, Introduction to Numerical Algorithms,English , 5 ECTS , 2016/2017 ,E3B (Fri 13-17),BSc,Department of Applied Mathematics and Computer Science,"
To perform a technical/mathematical computation (such as evaluation
of an integral or solution of a differential equation) on a
computer, one must use numerical algorithms that define how the
computations are performed efficiently and accurately. Hence,
numerical algorithms are the fundamental ""building
blocks"" in most technical computations - whether they are done
in Matlab, C, or other languages.

This course gives an introduction to the field of numerical
algorithms, with focus on the interplay between the mathematical
formulation of the computational problem and the practical
implementation on a computers (specifically: in Matlab). The aim is
to give the student a basic understanding of how to perform
mathematical computations on a computer. 
","explain and apply basic notions such as iteration and
convergence discuss the effect of truncation and rounding errors critically compare alternative methods regarding efficiency and
accuracy apply numerical algorithms to actual (simple) problems implement simple numerical algorithms in Matlab apply existing Matlab programs in the solution of a given
problem perform sensitivity analysis of a simple problem estimate and in some cases derive estimates of the accuracy of
the computed solution convey and discuss the topics of the course in a clear
technical language develop computational methods in such that they are first
tested and evaluated on selected test problems","
Approximations and rounding errors. Numerical algorithms for
solving systems of linear equations, numerical integration, roots
in functions, linear data fitting, and ordinary differential
equations. Implementation and use of selected numerical algorithms
in Matlab. 
",,"
Yiqiu Dong"
,,,,,,,,,,,,
02609, Modelling and Programming,Danish , 15 ECTS , 2016/2017 ,Fall,BSc,Department of Applied Mathematics and Computer Science,"
To provide an introduction to the development and use of
mathematical models for simulation and estimation. To build up
knowledge of the necessary elements of mathematical analysis and
linear algebra. To provide an introduction to programming in
Matlab, focusing on computation and simulation with the models. 
","Build statistic and dynamic models from natural science. Carry out derivation of the equations in the models. Explain about the influence of the parameters in a model. Explain the basic concepts of programming. Analyze a problem with respect to its implementation on a
computer. Implement simple computational methods in Matlab. Write, test and document a Matlab program. Use Matlab's graphics facilities to visualize data. Apply a basic structure for writing technical reports. Work independently and participate in academic project-oriented
groupwork.","
Functions: linear, logarithmic, power, and exponential.
Differentiation. Functions of two variables.

Linear algebra: Vectors, matrices, matrix computation, eigenvalues.
Solution of square and overdetermined systems.

Calculus: Ordinary differential equations. Simulation of dynamical
systems.

Programming: Variables, program control, scripts, functions.
Design. implementation, test and documentation of small programs.
Use of Matlab's editor and graphical functions. 
",None,"
Vedrana Andersen Dahl,
Bjarne Kjær Ersbøll"
,,,,,,,,,,,,
02610, Optimization and Data Fitting,English , 5 ECTS , 2016/2017 ,E2A (Mon 13-17),MSc,Department of Applied Mathematics and Computer Science,"
An engineer is often faced with the problem of having to determine
optimal values of the parameters in a mathematical model of a
physical or technical problem. The problem is eg to find the
parameters in a function so that the corresponding curve is a best
fit to a given set of data points, or you may be given a
mathematical formula that expresses the cost of producing a
commodity or perform a transportation job. Here you have to choose
values for the free parameters so that the cost is minimized.

The course deals with efficient methods for computing optimal
values for the parameters in a mathematical model. The students
will study and use available software libraries and learn how to
construct their own programs. 
","describe basic concepts in continuous optimization: gradient,
Hessian, convexity, descent directions and methods, optimality
conditions explain basic methods for unconstrained optimization, eg the
steepest descent and Newton's methods explain the basic design paradigms for optimization algorithms:
line search and trust regions implement simple optimization algorithms in Matlab apply existing Matlab programs to the solution of a given
problem formulate a mathematical model to use in data fitting choose between alternative methods for determining the model
parameters: least squares, L1, Huber estimation use optimization to estimate parameters in mathematical
models apply Monte Carlo optimization apply and implement Newton and Quasi-Newton metoder for
unconstrained optimization implement line search and trust region algorithms implement large-scale algorithms for unconstrained
optimization","
Methods for finding minimum points of a smooth function (eg
steepest descent, Newton's and quasi-Newton methods). Special
methods for least-squares approximation (e.g., the
Levenberg-Marquardt algorithm) and minimax approximation. The
course content is taught using technical case studies and available
numerical libraries. 
","02402,02401,02601,02603,02631,02633","
John Bagterp Jørgensen"
,,,,,,,,,,,,
02612, Constrained Optimization,English , 5 ECTS , 2016/2017 ,F4A (Tues 13-17),MSc,Department of Applied Mathematics and Computer Science,"
When modelling a technical or economical problem it often happens
that free parameters are determined by the solution to an
optimization problem subject to some constraints on the solution.
The simplest example is that the parameters must be positive or lie
in certain intervals due to physical constraints in the underlying
physical problem.

In this course the participant learns about efficient algorithms
for constrained optimization. The student will be able both to
develop algorithms and to use existing software for numerical
solution of optimization problems with constraints. The course
concerns numerical algorithms for linear programming (LP), convex
quadratic programming (QP), convex optimization, and non-linear
programming (NLP). 
","derive and explain the KKT optimality conditions for
constrained optimization use the KKT conditions to construct active set and interior
point algorithms derive, implement and use interior-point algorithms for LP, QP
and NLP problems derive, implement and use interior-point algorithms for convex
optimization derive, implement and use active set and interior point
algorithms for convex quadratic programming (QP) and linear
programming (LP) explain the principles of the SQP algorithm for nonlinear,
constrained optimization problems combine the LP and QP algorithms into an SQP algorithm develop, test and compare alternative optimization algorithms
in Matlab for the solution of a given problem use existing Matlab software libraries for constrained
optimization use optimization algorithms for the solution of problems from
engineering and finance apply convex optimization","
First and second order optimalitty conditions (KKT conditions.
Active set and interior point algorithms for linear programming
(LP) and convex quadratic programming (QP). Methods for nonlinear
programming (NLP): Sequential quadratic programming (SQP)
algorithms and augmented Lagrange algorithms. Development of simple
numerical algorithms and use of existing software libraries for
constrained optimization (LP, QP, NLP). Apply convex optimization
(SOCP, SDP). Application examples from Engineering and Finance. 
","02601,02631,02610,02633","
John Bagterp Jørgensen"
,,,,,,,,,,,,
02614, High,English , 5 ECTS , 2016/2017 ,January,MSc,Department of Applied Mathematics and Computer Science,"
The advent of cost-effective multi-core computers has enabled
researchers to carry out complex simulations on commodity hardware.
However, very few applications exploit the potential processing
power of these machines, due to the lack of knowledge and
experience in writing efficient programs on high-performance
computers with modern architectures.

The course enables the students to work with larger computational
problems in Scientific Computing, and their implementation on
modern cache-based multi-core/multi-CPU computers. An introduction
and hands-on to CUDA programming of heterogenous CPU-GPU systems is
covered as well by the course.

It provides an introduction to the skills needed to utilize
high-performance computing resources, and presents methods and
tools to achieve this. 
","explain the basics of modern cache-based computer systems as
well as high-performance GPUs utilize the interplay of computer components like CPU, GPU,
caches, and memory analyze Scientific Computing problems apply optimization techniques on existing codes choose the optimal hardware platform for a given problem design parallel codes for Scientific Computing problems write parallel programs with OpenMP and CUDA write efficient programs for multi-core processors and
many-core GPUs apply modern tools in parallel programming conduct and document computer experiments","
Introduction to high-performance computers emphasizing those
aspects that are important in connection with numerical
computations on large data sets. Parallel computers and GPUs:
architecture and network, with an emphasis on multi-core and SMP
computers. Parallel programming using OpenMP as well as CUDA. 
",,"
Bernd Dammann"
,,,,,,,,,,,,
02616, Large,English , 5 ECTS , 2016/2017 ,F3A (Tues 8-12),MSc,Department of Applied Mathematics and Computer Science,"
The advent of cost-effective multi-core computers has enabled
researchers to carry out complex simulations on commodity hardware.
The course aims at developing the necessary skills to exploit the
potential processing power on modern computer architectures.

This course builds upon the skills aquired in the course 02614 -
High-Performance Computing. It gives an overview of existing
software, methods and tools for large-scale modelling, and enables
the students to work with large-scale problems in Scientific
Computing and their implementation on modern compute clusters.

The obtained knowledge will be applied in project work to model
examples of large systems. 
","analyze the performance of Scientific Computing problems apply modern tools for parallel programming design and write parallel codes for Scientific Computing
problems apply HPC methods on large scale models make use of the right tools and libraries for a given
problem use direct or iterative solution strategies find strategies when going from small to large problems apply validation techniques develop parallel programs with MPI","
Introduction to high-performance computing techniques, emphasizing
those aspects that are important in connection with numerical
computations on large data sets/large-scale problems.

Overview of message passing paradigm (MPI): point-to-point and
collective communications, non-blocking communications,
communicators and virtual topologies.

Numerical methods for large-scale matrix computations, including
direct and iterative methods for the solution of linear systems,
sparse matrix computational techniques.

Application of the topics above on relevant models that require
many hardware resources, e.g. memory, CPU time, etc. 
","02685,02614,02613","
Bernd Dammann,
Boyan Stefanov Lazarov"
,,,,,,,,,,,,
02619, Model Predictive Control,English , 5 ECTS , 2016/2017 ,E2B (Thurs 8-12),MSc,Department of Applied Mathematics and Computer Science,"
Application and development of predictive control for linear and
non-linear dynamic systems with constraints. Application of linear
and nonlinear MPC to industrial, biomedical, and financial
problems. We emphasize implementational and computational aspects. 
","Analyze and describe MPC control structures Select processes that can be controlled by MPC Apply convex optimization to estimation, control and system
identification Identify a linear model from data Design and tune a linear model based estimator and
predictor Design and tune a constrained regulator Synthesize and implement model predictive control systems Test a linear model predictive control system by
simulation Implement Nonlinear Model Predictive Controllers Use SQP optimization methods for NMPC Compute solutions and sensitivities in nonlinear ODE
models Apply MPC to industrial, biomedical, and financial
problems","
Modeling of dynamic systems

Convex optimization algorithms

System identification

Design and tune linear MPC

Implement linear MPC

Simulation and test of linear MPC

Nonlinear Model Predictive Control (NMPC)

SQP optimization algorithms for NMPC

Numerical compution of the solution and sensitivities of ODE
systems

Industrial, biomedical and financial problems.

Implementation using MATLAB 
",02612,"
John Bagterp Jørgensen"
,,,,,,,,,,,,
02623, The Finite Element Method for Partial Differential Equations,English , 5 ECTS , 2016/2017 ,January,MSc,Department of Applied Mathematics and Computer Science,"
The primary focus of this course is to learn and get practical
experiences on how to independently develop and implement the
Finite Element Method (FEM) in 1D/2D for the solution of Boundary
Value Problems (BVPs) for linear Partial Differential Equations
(PDEs) through computer exercises in Matlab. The experiences gained
in the course will be relevant for the solution of PDEs rooted in
engineering applications. 
","Apply the basic principles for deriving weak formulations of
linear PDEs. Compute local and global finite element matrices. Efficiently setup and solve systems of linear algebraic
equation resulting from FEM discretizations in Matlab. Assess the accuracy of computed approximate solutions. Utilize graded and unstructured meshes for use with FEM in 1D
and 2D and understand their pros and cons. Implement computer programs to solve BVPs using FEM in 1D and
2D. Knowledge of basic direct and iterative methods for solving
systems of algebraic equations in Matlab. Independently solve a special topics problem offered in the
course. Written and oral presentation of results in reports and a
poster","
The Finite Element Method (FEM) is of major importance for
computer-based simulation for engineering analysis. In this course
we give a concise treatment of the various aspects of the Finite
Element Method (FEM) including: local and global interpolation
functions based on triangular elements, boundary value problems for
partial differential equations, the assembly of global algebraic
system of equations, Gaussian elimination for banded systems,
iterative solution methods, time-dependent problems. Systematic
development, through exercises, of computer software implementing
the FEM. The final assignment of the course will be in one of the
special topics, for example an application of the finite element
method for the solution of a particular problem from engineering
sciences. 
","02601,02631,02603,02633","
Allan Peter Engsig-Karup"
,,,,,,,,,,,,
02625, Computational Science in Imaging,English , 5 ECTS , 2016/2017 ,January,MSc,Department of Applied Mathematics and Computer Science,"
This course provides an overview of mathematical models and
computational methods for several problems in image processing, for
example, image deblurring with denoising, image inpainting, and
image segmentation. The primary focus is on variational methods.
You will learn about the basic principles of the underlying
mathematical models and about efficient computational methods that
are suited for computer implementation, and you will learn how to
solve common problems in imaging science. 
","explain why imaging problems are extremely sensitive to errors
in the data formulate and identify the underlying mathematical models compare the advantages and limitations of different
regularizations use different methods for choosing regularization
parameter use optimization principles to analyze the existence and
uniqueness of a solution, given a mathematical model apply advanced optimization algorithms to solve the
mathematical problems implement algorithms for imaging problems in MATLAB practice variational method in applications, e.g.
tomography","
Imaging problem: image deblurring and denoising, image inpainting,
image segmentation.

Mathematical technique: variational methods with regularization
techniques, optimization.

Algorithms: gradient descent algorithm, primal-dual algorithm,
level-set algorithm. 
","02601,02631,02610,02633","
Per Christian Hansen,
Yiqiu Dong,
Martin Skovgaard Andersen"
,,,,,,,,,,,,
02631, Introduction to programming and data processing,Danish , 5 ECTS , 2016/2017 ,E1B (Thurs 13-17)  or  F2B (Thurs 8-12),BSc,Department of Applied Mathematics and Computer Science,"
The use of computers for technical/mathematical computations and
simulations is central for many areas at DTU, and it is therefore
necessary to have a working knowledge of computer programming. In
the course students will learn about basic concepts and techniques
in programming, as well as how to write programs with a focus on
computations with technical/engineering applications. The
participants will be able to design and develop well-structured
smaller programs, test the design and program, read various data
formats, and visualize the results graphically. One of the
programming languages Matlab, Python or R is used. 
","Explain basic programming concepts Design and implement programs to solve simple computable
engineering problems Use the integrated development environment and user interface
of the programming language Import data in different formats Use variables of different types and perform basic
computations Organize code using scripts and functions Write well-structured, commented, and readable code Use functions from existing toolboxes and libraries Graphically visualize data and information Write technical documentation","
Programming language: Matlab, Python, or R. Using the desktop
environment and language documentation. Working with numbers,
strings, logical values, vectors and matrices. Using arithmetic and
logical operators, branching statements, looping and vectorization.
Organizing code using scripts and functions. Error checking user
input and creating interactive programs. Writing comments and
technical documentation. Reading and writing data files. Graphical
visualization of data. 
",None,"
Mikkel Nørgaard Schmidt,
Stine Harder"
,,,,,,,,,,,,
02632, Introduction to programming and data processing,Danish , 5 ECTS , 2016/2017 ,August,BSc,Department of Applied Mathematics and Computer Science,"
The use of computers for technical/mathematical computations and
simulations is central for many areas at DTU, and it is therefore
necessary to have a working knowledge of computer programming. In
the course students will learn about basic concepts and techniques
in programming, as well as how to write programs with a focus on
computations with technical/engineering applications. The
participants will be able to design and develop well-structured
smaller programs, test the design and program, read various data
formats, and visualize the results graphically. One of the
programming languages Matlab, Python or R is used. 
","Explain basic programming concepts Design and implement programs to solve simple computable
engineering problems Use the integrated development environment and user interface
of the programming language Import data in different formats Use variables of different types and perform basic
computations Organize code using scripts and functions Write well-structured, commented, and readable code Use functions from existing toolboxes and libraries Graphically visualize data and information Write technical documentation","
Programming language: Matlab, Python, or R. Using the desktop
environment and language documentation. Working with numbers,
strings, logical values, vectors and matrices. Using arithmetic and
logical operators, branching statements, looping and vectorization.
Organizing code using scripts and functions. Error checking user
input and creating interactive programs. Writing comments and
technical documentation. Reading and writing data files. Graphical
visualization of data. 
",None,"
Mikkel Nørgaard Schmidt"
,,,,,,,,,,,,
02633, Introduction to programming and data processing,Danish , 5 ECTS , 2016/2017 ,January  or  June,BSc,Department of Applied Mathematics and Computer Science,"
The use of computers for technical/mathematical computations and
simulations is central for many areas at DTU, and it is therefore
necessary to have a working knowledge of computer programming. In
the course students will learn about basic concepts and techniques
in programming, as well as how to write programs with a focus on
computations with technical/engineering applications. The
participants will be able to design and develop well-structured
smaller programs, test the design and program, read various data
formats, and visualize the results graphically. One of the
programming languages Matlab, Python or R is used. 
","Explain basic programming concepts Design and implement programs to solve simple computable
engineering problems Use the integrated development environment and user interface
of the programming language Import data in different formats Use variables of different types and perform basic
computations Organize code using scripts and functions Write well-structured, commented, and readable code Use functions from existing toolboxes and libraries Graphically visualize data and information Write technical documentation","
Programming language: Matlab, Python, or R. Using the desktop
environment and language documentation. Working with numbers,
strings, logical values, vectors and matrices. Using arithmetic and
logical operators, branching statements, looping and vectorization.
Organizing code using scripts and functions. Error checking user
input and creating interactive programs. Writing comments and
technical documentation. Reading and writing data files. Graphical
visualization of data. 
",None,"
Mikkel Nørgaard Schmidt"
,,,,,,,,,,,,
02634, Programming and data processing (second programming language),Danish , 2.5 ECTS , 2016/2017 ,August,BSc,Department of Applied Mathematics and Computer Science,"
This course is targeted students who have fundamental programming
skills in one of the programming languages Matlab, Python, or R,
who wish to learn another of these programming languages. The
participants learn to design and develop programs with a focus on
computations with technical/engineering applications. By working
with a new programming language on the basis of a known language,
the participants will get a deeper understanding of similarities
and differences in programming style, patterns, idioms, and syntax.

","Explain basic programming concepts in the chosen language Design and implement programs to solve simple computable
engineering problems in the chosen language Use the integrated development environment and user interface
of the programming language Explain differences and similarities between two programming
languages Write well-structured, commented, and readable code in the
chosen language Use the program libraries of the programming langauge for
numerical computations, reading data, and graphical
visualization. Write technical documentation Use common coding style and conventions","
Programming language: Matlab, Python, or R. Using the desktop
environment and language documentation. Working with numbers,
strings, logical values, vectors and matrices. Using arithmetic and
logical operators, branching statements, looping and vectorization.
Organizing code using scripts and functions. Error checking user
input and creating interactive programs. Writing comments and
technical documentation. Reading and writing data files. Graphical
visualization of data. 
","02694,02692,02693,02691,02525,02631,02632,02633","
Mikkel Nørgaard Schmidt"
,,,,,,,,,,,,
02635, Mathematical software programming,English , 5 ECTS , 2016/2017 ,E1B (Thurs 13-17),MSc,Department of Applied Mathematics and Computer Science,"
To enable the participants to write software that can solve
numerical problems based on a mathematical model.

To give the participants an introduction to imperative and
object-oriented programming as well as the ability to employ these
paradigms using imperative and object-oriented programming
languages. In this course we use C/C++ as C-based programming
languages are widely used for programming mathematical software.

The participants are also given an introduction to basic algorithms
and data structures that are often used in mathematical software.

To ensure that you, as a participant, develop practical skills, you
will work with small mathematical projects in which programming is
an indispensable tool. Moreover, you will train software
documentation in reports. 
","Evaluate discrete and continuous mathematical expressions. Describe and use data structures such as arrays, linked lists,
stacks, and queues. Choose appropriate data types and data structures for a given
problem. Compare iterative and recursive solutions for simple
problems. Analyze the runtime behaviour and the time and space complexity
of simple programs. Call external (third party) programs and libraries. Design, implement, and document a program that solves a
mathematical problem. Debug and test mathematical software. Describe and use basic object-oriented programming concepts
such as classes and objects.","
Programming paradigms: imperative programming, object-oriented
programming.

Data structures: arrays, linked lists, stacks, queues.

Programming projects encompass:

- Loading data.

- Calling external programs and libraries (especially numerical).

- Optimization and parallelization. 
","02525,02631,02633","
Mikkel Nørgaard Schmidt,
Martin Skovgaard Andersen"
,,,,,,,,,,,,
02685, Scientific Computing for differential equations,English , 10 ECTS , 2016/2017 ,F1A (Mon 8-12) and F1B (Thurs 13-17),MSc,Department of Applied Mathematics and Computer Science,"
The course goal is to give a solid grounding in the theory and
practice of scientific computing methods for differential equations
arising in science and engineering. This involves developing,
analyzing, and applying different numerical methods and algorithms
for the solution of both ordinary (ODE) and partial differential
equations (PDE). The experience gained is useful for the solution
and study of mathematical problems, for which no analytical
solutions exist or are readily obtainable. 
","Apply the basic principles for numerical
approximation/​discretization. Analyze properties of dynamical systems. Analyze truncation errors of numerical methods. Analyze and derive order, convergence and stability properties
of numerical methods. Implement numerical methods with automatic control of local
error. Assess the applicability and limits and appropriate use of
particular numerical methods. Setup and solve a linear system of coupled differential
equations in Matlab. Construct difference approximations for partial
derivatives. Implement finite difference and semi-difference solvers in
Matlab. Be able to classify types of partial differential
equations.","
Topics covered in the course include:

- Finite difference and finite element approximations, truncation
errors;

- Consistency, convergence of finite-difference and finite element
methods;

- Stability analysis;

- Iterative methods for systems of linear equations;

- One-step and multistep methods;

- Stiff systems of ordinary differential equations;

- Implicit/Explicit methods;

- Model partial differential equations of different types;

- Dynamical systems;

- Examples of applications; 
","02601,02631,02603","
Allan Peter Engsig-Karup,
John Bagterp Jørgensen"
,,,,,,,,,,,,
02692, Introduction to programming and data processing,Danish , 5 ECTS , 2016/2017 ,E1B (Thurs 13-17)  or  F2B (Thurs 8-12),BEng,Department of Applied Mathematics and Computer Science,"
The use of computers for technical/mathematical computations and
simulations is central for many areas at DTU, and it is therefore
necessary to have a working knowledge of computer programming. In
the course students will learn about basic concepts and techniques
in programming, as well as how to write programs with a focus on
computations with technical/engineering applications. The
participants will be able to design and develop well-structured
smaller programs, test the design and program, read various data
formats, and visualize the results graphically. One of the
programming languages Matlab, Python or R is used. 
","Explain basic programming concepts Design and implement programs to solve simple computable
engineering problems Use the integrated development environment and user interface
of the programming language Import data in different formats Use variables of different types and perform basic
computations Organize code using scripts and functions Write well-structured, commented, and readable code Use functions from existing toolboxes and libraries Graphically visualize data and information Write technical documentation","
Programming language: Matlab, Python, or R. Using the desktop
environment and language documentation. Working with numbers,
strings, logical values, vectors and matrices. Using arithmetic and
logical operators, branching statements, looping and vectorization.
Organizing code using scripts and functions. Error checking user
input and creating interactive programs. Writing comments and
technical documentation. Reading and writing data files. Graphical
visualization of data. 
","10913,11711,01905,11714","
Mikkel Nørgaard Schmidt"
,,,,,,,,,,,,
02805, Social graphs and interactions,English , 10 ECTS , 2016/2017 ,E5 (Wed 8-17),MSc,Department of Applied Mathematics and Computer Science,"
The overall objective of the course is to make students familiar
with Web 2.0 (e.g. access and analyze user generated data and text)
as well as analyze and model social relations using network theory.

","Explore web APIs for data collection. Apply a high level programming language (e.g. Python) to
utilize such APIs for data acquisition. Apply natural language processing to represent statistical
structures in text and analyze the content. Apply and discuss the main strategies for detecting sentiment
in media (e.g. text, music, images, etc). Apply standard algorithms to recommend media (text, audio,
video) according to user preferences and user context (friends,
mood, location, etc). Assess basic metrics for complex networks, and model social
relations based on network analysis. Implement software for detecting communities in social networks
and analyze the communities using network metrics Quantify relations in social networks to analyze their
dynamics, using measures from complex network theory.","
The course is based on analyzing data from online social networks
(e.g. Twitter and Facebook), as well as working with quantitative
text analysis. The course is structured around short lectures
combined with exercises, as well as a high degree of independent
project work. 
",,"
Sune Lehmann Jørgensen,
Ole Winther"
,,,,,,,,,,,,
02806, Social data analysis and visualization,English , 5 ECTS , 2016/2017 ,F3A (Tues 8-12),MSc,Department of Applied Mathematics and Computer Science,"
The course objective is to enable the students to create
visualizations of complex data sets and to apply common strategies
for detecting sentiment in media (e.g. text, music, images, etc).
The students will be able to apply and assess simple machine
learning techniques (e.g. logistic regression,k-nearest neighbors,
decision trees). Media is described using features, extracted based
on high level programming languages and APIs. The course provides a
conceptual basis for modeling social data. 
","Access and assess types of available on-line data for data
visualization. Investigate basic principles of displaying visual
information. Apply principles of visualization to create visualizations of a
complex data sets. Explain and assess common measures of similarity between
objects and users; use similarities to generate meaningful
groupings. Implement collaborative filtering for personalization of
content. Apply logistic regression for simple classification. Apply k-nearest neighbors to categorize and analyze content in
social data sets and evaluate the results. Apply Decision Trees to retrieve underlying behavioral patterns
in social data sets and evaluate the results.","
The course is based on mastering tools for analyzing data sets
generated from online social interactions. The course is structured
around short lectures combined with exercises, as well as a high
degree of independent project work 
","02102,02101,02821,02312","
Sune Lehmann Jørgensen,
Ole Winther"
,,,,,,,,,,,,
02807, Computational Tools for Big Data,English , 5 ECTS , 2016/2017 ,E4A (Tues 13-17),MSc,Department of Applied Mathematics and Computer Science,"
This course will give a short and intensive introduction to a large
set of computational tools and techniques for dealing with large
data. We will touch upon for example: The UNIX terminal, version
control, graph databases, Python, hashing tricks and cloud
computing. 
","Develop and implement algorithms for parallel execution of
code, and judge when problems can be parallelised. Utilise cluster computers - for example DTU’s own HPC-cluster,
Amazon’s EC2 and Google Compute Platform - for performing large
scale computations. Design, analyse and implement MapReduce-algorithms for simple
and complex problems, and explain when the utilisation of MapReduce
is justified. Combine different UNIX tools (e.g. sed, cut and grep) for
managing and editing large and complex data-files in the
terminal. Compare and judge methods for scaling data analysis to large
data sets. Compare database models (e.g. SQL, NoSQL and Graph Databases)
and database implementations (e.g. Postgres, MongoDB and Neo4j).
Judge which database is suitable for a specific problem. Determine additional tools for working with large data sets,
and present the pros, cons and inner workings of these tools to
other students. Read, evaluate and give feedback to work of other
students.","
UNIX, Git, Amazon EC2, DTU HPC, Python, Numpy, Scipy, Scikit-learn,
Cython, iPython, Pandas, Postgresql, MongoDB, Neo4j, feature
hashing, locality sensitive hashing, MapReduce, Apache Spark. 
",,"
David Kofoed Wind,
Ole Winther"
,,,,,,,,,,,,
02808, Personal Data Interaction for Mobile and Wearables,English , 10 ECTS , 2016/2017 ,F5 (Wed 8-17),MSc,Department of Applied Mathematics and Computer Science,"
The overall course objective is to enable students to create and
evaluate interfaces and interaction with personal data on mobile
and wearable devices. 
","Explain the concepts personal data and personal
informatics Explain models of personal informatics systems Explain and apply designs of the personal data/informatics life
cycle Prototype (feedback) user interfaces and visualizations of
personal data Design prototype apps for personal data interaction Evaluate prototype apps for personal data interaction Apply prototyping techniques Design experiments to evaluate user interfaces and
interaction Apply methods for and carry out evaluation of user interfaces
and interaction","
The course draws upon theory, methods, and techniques from
Human-Computer Interaction (HCI), Pervasive/Ubiquitous Computing,
and Mobile/Wearable Computing for the purpose of prototyping,
modeling, and evaluating personal data interaction. The information
life cycle of data acquisition, analysis, presentation
(visualization), reflection, and action is addressed. Focus is on
the utilisation of sensor inputs to create new types of
mobile/wearable personal informatics (life logging/quantified self)
type apps and interfaces enabling personal data interaction.

Throughout the course students work in groups on multiple
exercises, assignments and a final project, which involves
prototyping and evaluation of mobile apps and user interfaces for
personal data interaction. The course has a broad interpretation of
""mobile"", that is, any mobile form factor including
smartphones, tablets, smartwatch or wrist-worn devices,
smartglasses, self-tracking and (bio) sensing devices. Prototypes
are built in any practicable technical platform (Android, iOS,
whatever) as the focus is on the interaction and application
aspects. 
","02810,02266","
Jakob Eg Larsen"
,,,,,,,,,,,,
02809, UX Design Prototyping,English , 5 ECTS , 2016/2017 ,E1A (Mon 8-12),MSc,Department of Applied Mathematics and Computer Science,"
The objective of the course is to enable students to apply lean
prototyping for UX design of personalized user interfaces 
","Identify user needs for a market segment Optimize value for potential solutions Model user needs hierarchically as goals, activities and
tasks Translate user needs into UX wireframe story boards Model microinteractions for a UX system design Implement design patterns for a UX prototype design Design an MVP minimum viable product based on iterative UX
prototyping Validate an MVP minimum viable product based on iterative UX
prototyping","
The course is focused on development of functional UX design
prototypes that combine smartphones and smartwatches, using lean
methods based on hierarchical user story mapping, multidevice
design patterns and microinteractions system design. 
",,"
Michael Kai Petersen"
,,,,,,,,,,,,
02823, Introduction to Computer Game Prototyping,English , 5 ECTS , 2016/2017 ,E4A (Tues 13-17),MSc,Department of Applied Mathematics and Computer Science,"
The purpose of this course is to give an introduction to computer
game development and rapid prototyping techniques using
object-oriented dynamic programming languages. These will be
applied by the students to develop and evaluate prototypes of
computer games. The emphasis will be on casual games, though other
genres will also be considered. 
","classify games according to genres classify the types of digital media technologies applied in
games describe the functional requirements for several types of
games describe techniques for rapid prototype development develop computer programs utilizing tools of dynamic
late-binding languages construct and implement unit testing techniques design and implement a rapid prototype of their own game evaluate the playability and technical implementation of their
game","
The course will begin with an introduction to the elements of
computer game development including the basic properties of
graphics, animation and audio necessary for game development. The
emphasis will be on applying the tools that facilitate rapid
prototyping.

The course will introduce examples of the design, playability and
programming of several types of 2D games. Students will then design
and develop prototypes for simple games. 
",02110,"
Michael Rose"
,,,,,,,,,,,,
02826, Sound Design for Digital Media,English , 5 ECTS , 2016/2017 ,E5B (Wed 13-17),MSc,Department of Applied Mathematics and Computer Science,"
The aim of this course is to enable students to to develop
applications for sound and audio design using dynamic programming
languages and techniques. Application areas include computer games
and other interactive digital media. 
","design and implement programs with a functional or dataflow
language apply programming methodologies to time and event based
computing problems manipulate symbolic representations of audio and sound understand mathematical and computational principles underlying
music technologies understand and apply elements of sound synthesis and
rendering apply recursion and polymorphic higher-order functions to
digital media computation analyze correctness and scalability of audio programs apply principles of generative composition and adaptive audio
to interactive programs such as computer games","
Sound Design and Adaptive Audio: declarative modeling for sound ,
application of the Supercollider and PureData sound libraries,
sound synthesis and rendering, algorithmic music, procedural sound
generation

Programming: functional programming techniques, applications of
recursion and higher-order functions, time flow and event
programming. 
",,"
Michael Rose"
,,,,,,,,,,,,
02830, Advanced Project in Digital Media Engineering,English , 10 ECTS , 2016/2017 ,E5B (Wed 13-17),MSc,Department of Applied Mathematics and Computer Science,"
To develop the student's abilities to carry out a large project
in the area of digital media engineering. This involves a
literature study, planning, implementation, testing, experiment and
the writing of a report in the form of a scientific paper. The
project is considered a preproject for a master's thesis, thus
it is desirable to identify a supervisor who can also supervise the
subsequent master's thesis. 
","Analyze a technical problem and extract a concrete goal. Collect information about a problem domain. Describe the most recent methods in a concrete area of digital
media technologies. Select suitable methods for a given problem. Describe scenarios to derive requirements for a solution. Construct a design based on requirements. Plan a project, carrying out risk analysis and time
management. Deal with a larger amount of content and/or source code. Carry out a larger practical task in digital media. Test whether a given goal has been reached. Prepare a report in the form of a scientific paper.","
Students work in groups (one to four persons) independently on
projects which they themselves help select and delimit within
topics from the MSc in Digital Media Engineering.

The course aims to develop the students' methods and is based
on individual supervision. The students are expected to present the
status of their projects at regular intervals.

Recent literature forms the basis of the work, and it is a stated
goal to bring the students up to the research frontier in a
specific area within digital media engineering. 
",,"
Jakob Andreas Bærentzen,
Jakob Eg Larsen"
,,,,,,,,,,,,
02840, Computer Game Programming Fundamentals (DADIU),English , 15 ECTS , 2016/2017 ,Fall,MSc,Department of Applied Mathematics and Computer Science,"
To give the student thorough insight into game development from a
programmers point of view. This includes training in programming
within the domain of computer games and training in collaboration
with the other competencies in a game production. An important part
of the course is an independent development project where the
student develops a software tool in collaboration with another
competence which assumes the client role and motivates the project.

","Develop an advanced software component for a computer
game. Collaborate with people who have other competencies in game
development. Rapidly develop prototypes for for computer games. Develop for games in scripting languages as well as compiled
languages. Demonstrate broad knowledge of hardware as well as software
platforms for computer games. Demonstrate overview of the evolution of computer games. Demonstrate solid practical knowledge of a particular
environment for game development. Select the best methods for solving a given problem in game
development.","
Computer games and game development broadly, technical history of
computer games and compute game genres, Unity3D game engine,
development of a complete mini game in few days, an independent
project comparable to research and development in a game company. 
","02825,02564","
Michael Rose"
,,,,,,,,,,,,
02841, Computer Game Programming in a Production (DADIU),English , 15 ECTS , 2016/2017 ,Fall,MSc,Department of Applied Mathematics and Computer Science,"
To give the student experience in programming a complete computer
game in a realistic development environment. 
","work in all phases of a software development cycle collaborate with a team in a realistic multidisciplinary
environment provide technical feedback to project managers on feature
requirements participate in an agile development process choose data structures and algorithms appropriate to game
requirements optimize a computer program for maximum performance incorporate user feedback into software refinements design, implement and add game mechanics to an existing game
engine","
Programming of game features such as game rules and mechanics,
animation, graphics, and artificial intelligence, with the Unity3D
game engine. 
",02840,"
Michael Rose"
,,,,,,,,,,,,
02901, Advanced Topics in Machine Learning,English , 2.5 ECTS , 2016/2017 ,,Ph.D.,Department of Applied Mathematics and Computer Science,"
To introduce the student to new trends in statistical signal
processing and machine learning. 
","Comprehend and apply advanced methods within machine
learning Collect scientific knowledge and data related to topics covered
in the course Formulate and carry out a mini-project related to one or more
of the covered course topics (preferably within the scope of the
student’s PhD project) Design a complex machine learning system based on an analysis
of the problem and the project aims Implement the machine learning system Evaluate the performance of the machine learning system Assess and summarize the mini-project results in relation to
aims, methods and available data Disseminate the project results in a technical report","
The course introduces new trends and advanced topics in machine
learning. The course covers key topics in machine learning such as
Bayesian parametric and non-parametric inference, optimization,
latent variable models, kernel methods, and deep learning. The
course consists of lectures and exercises, and is followed up by a
mini-project presented in a written report. We encourage that
students apply the methods taught to data relevant for their PhD
project. Typical applications include: Bio-medical, audio,
multimedia, and topic modeling as well as collaborative filtering
and monitoring systems. 
",None,"
Morten Mørup"
,,,,,,,,,,,,
02904, Advanced System Identification,English , 5 ECTS , 2016/2017 ,Outside schedule structure,Ph.D.,Department of Applied Mathematics and Computer Science,"
The course deals with methods for modelling dynamic systems based
on measurements and system knowledge. First, we shall survey the
underlying concepts in system identification, such as parameter
estimation methods, consistency and asymptotic distribution of
parameters and transferfunction estimate, model validation and
structure determination. We shall deal with choices of prefilters
and the effect on the identification results. The focus will also
be on identifiability and systems operating in closed loop.
Secondly, the intention is to study the area of identification and
control, i.e. to study the interplay between identification and
control. If time allows we shall have a look at model reduction and
system identification based on subspace methods. This part of the
course will be based on selected papers. 
","Discuss the assumptions which the methods and models are based
on Formulate and analyse models for dynamic systems influenced by
stochastic disturbances Formulate and apply methods for estimation of system
parameters Solve equtions related to system identification Evaluate and assess properties of methods used in system
identification Analize and design experiments for the specific application
e.g. control Apply and assess properties of methods for estimation of
parameters in dynamic systems Analyse and assess models validation and verification Apply, analyse and implement recursive methods for
estimation Present results and assessment in oral and writing Perform analysis and assessments on computer","
Estimation methods, asymtotic properties, reduced order models.
Identification for control. Control relevant prefiltering. Model
reduction and subspace methods. 
",,"
Niels Kjølstad Poulsen"
,,,,,,,,,,,,
02906, Introduction to Inverse Problems,English , 5 ECTS , 2016/2017 ,June,Ph.D.,Department of Applied Mathematics and Computer Science,"
The aim of the course is to give a practical introduction to the
numerical treatment of inverse problems (also known as ill-posed
problems). Such problems arise, e.g., in connection with the
solution of first-kind Fredholm integral equations in medical
tomography, geoscience, etc. The course gives the background for
inverse problems and the mathematics underlying their solution. The
theory is illustrated by Matlab exercises, in such a way that the
student gets hands-on experience with some common techniques and
paradigms. 
","Formulate and identify simple models in the technical sciences,
in the form of inverse problems Understand the inherent difficulties of inverse problems Discretize and solve some first-kind Fredholm integral
equations Understand the mechanisms of regularization, for stabilization
of the solution to an inverse problem Implement and use numerical ""tools"" for the analysis
and solution of inverse problems by means of regularization Use different methods for choosing the regularization parameter
(i.e., the amount of regularization) Implement and use iterative methods for large-scale problems,
e.g., for tomographic image reconstruction Understand, analyze and solve selected inverse problems in
differential euqations Formulate inverse problems in medical imaging and solve such
problems Identify nonlinear inverse problems and solve them","
Integral equations of the first kind. The singular value expansion
and the Picard condition. Discretization methods. The singular
value decomposition.

Regularization methods (TSVD and Tikhonov). Parameter-choice
methods. Iterative regularization methods. Tomographical
reconstruction methods.

Inverse problems for partial differential equations. The inverse
heat conduction problem. Medical imaging, including Computed
Tomography and Electrical Impedance tomogprahy. Nonlinear inverse
problems and linearization. 
","01418,01246,02601,02610,01715,02631","
Per Christian Hansen,
Kim Knudsen,
Yiqiu Dong"
,,,,,,,,,,,,
02910, Computational data analysis,English , 5 ECTS , 2016/2017 ,Outside schedule structure,Ph.D.,Department of Applied Mathematics and Computer Science,"
To provide the student knowledge of advanced computer intensive
data analysis methods with applications to e.g. life sciences.
These include problems with many variables and relatively few
observations etc. 
","Relate parts of the course to the student's own
project Evaluate cross validation and concepts such as overfitting Evaluate and apply sparse regression and classification
models Evaluate and apply logistic regression and support vector
machines Evaluate and apply Classificaiton and regression trees
(CART) Evaluate and apply random forests Evaluate and ainterpret sparse latent methods such as sparse
principal component analysis Evalute and interpret a range of unsupervised decomposition
methods Evaluate and apply mutliway (tensor) models Evaluate clustering methods","
Methods: Cross-validation, elastic net, sparse principal
components, sparse discriminant analysis and Gaussian mixture
analysis, logistic regression, support vector machine,
classification and regression trees, random forests, clustering,
nonnegative matrix factorization, independent component analysis,
sparse coding, archetypical analysis, mutliway models. 
",,"
Line Katrine Harder Clemmensen"
,,,,,,,,,,,,
02913, Advanced Analysis Techniques,English , 5 ECTS , 2016/2017 ,January,Ph.D.,Department of Applied Mathematics and Computer Science,"
The students will learn one or more advanced techniques for
modeling and program analysis - thereby complementing their
previous knowledge of modeling and analysis techniques and giving
them the background needed for judging which approach is adequate
in a given setting. 
","explain the basic concepts; find small examples upon which to determine the precise
workings of the methods covered; make minor adaptions to selected parts of the methods
covered; discuss the methods covered and clearly indicate similarities
and dissimilarities; relate the method covered including to evaluate their strengths
and weaknesses; evaluate a scientific paper as submitted to a conference; communicate his/her results in a clear and precise manner,
using a standard format for technical reports; plan and perform a public presentation addressing a given
target audience and to provide any missing background or adapt the
presentation to scenarios previously considered.","
The course gives an overview of central background techniques or
newer results within modeling and advanced analysis techniques for
IT systems.

The course demands active participation that depending on the form
of the course may be the writing of a project report or independent
presentation of research literature.

Variations of this plan are possible if better suited to the choice
of topics. 
",02242,"
Hanne Riis Nielson,
Flemming Nielson,Jan Midtgaard"
,,,,,,,,,,,,
02921, ITMAN Graduate School Seminars,English , 2.5 ECTS , 2016/2017 ,Outside schedule structure,Ph.D.,Department of Applied Mathematics and Computer Science,"
The aim of this course is to give a broad introduction to a series
of non-technical-scientific subjects which are vital for the PhD
student’s academic and private business career.

The invited guest speakers will introduce their specialist topics
and expand on these according to the specific needs of the target
audience, e.g. “how to secure a software patent”, ""how to get
a good written English"", and “knowledge sharing in research
networks”.

The students will achieve a general knowledge and insight into
related, relevant fields which will enable them to improve their
overall communication, research and business competences in
relation to their PhD studies.

Each student will, according to own interests and goal, further
develop (a) given topic(s) in relation to his/her PhD project in a
short report.

The course is mandatory for PhD students at DTU Compute. 
","identify relevant topics and research areas i relation to own
PhD project discuss fundamental problems in the topics presented in the
seminars locate and apply further information in relation to topics
within own PhD project explain and argue for the consequences of a chosen topic in
relation to own PhD project formulate and present an interdisciplinary synthesis of the
technical-scientific PhD project and the non-technical-scientific
topic chosen for the report in an easily understod non-technical
language perform a professionally well-founded limitation of the topic
for the report evaluate critically the chosen topic(s) from a
technical-scientific point of view set up goals and intermediate goals for a process","
Patents, software patents, communication, knowledge sharing,
project management, self management, research management, open
source, publication formalia and ethics, scientific dishonesty,
paper writing, innovation, venture, career opportunities. 
",None,"
Ulla Jensen,
Kim Knudsen,
Christian D. Jensen,
Pia Lauridsen"
,,,,,,,,,,,,
02930, The Analysis of Sensory and Consumer Data,English , 2.5 ECTS , 2016/2017 ,August,Ph.D.,Department of Applied Mathematics and Computer Science,"
To improve the ability of analysing human perception data. Some of
the newest statistical methodologies will be covered using the open
source software R, among others the packages sensR, ordinal,
SensMixed and lmerTest will be used together with the PanelCheck
and ConsumerCheck softwares. 
","Work with R, Panelcheck and ConsumerCheck Plan and analyze simple discrimination and similarity
experiments using sensR Analyze replicated discrimination data Perform and understand simple Thurstonian modeling Use mixed models for sensory profile data and consumer
preference data by PanelCheck and ConsumerCheck Analyze sensory profile data with the newest scale correction
method (using R) Use PanelCheck and ConsumerCheck for simple analysis as well as
multivariate analysis (including Tucker-1) Use the R-packages lmerTest and SensMixed to analyze
non-standard data with mixed models Analyze ordinal human perception data using the R-package
ordinal Visualize ANOVA results by the newest delta-tilde method using
the SensMixed R shiny application Know about the newest sensometrics research going on at the DTU
Sensometrics group","
Course Main Topics Overview:

Monday: Simple discrimination using R (package sensR)

Tuesday: Basic mixed models using PanelCheck, Consumercheck and R.

Wednesday: Multivariate Analysis using PanelCheck and ConsumerCheck

Thursday: More advanced discrimination using R (packages sensR and
ordinal)

Friday: More advanced mixed models (packages SensMixed and
lmerTest) 
",,"
Per B. Brockhoff"
,,,,,,,,,,,,
02932, Empirical Research Methods in Informatics,English , 5 ECTS , 2016/2017 ,August,Ph.D.,Department of Applied Mathematics and Computer Science,"
After this course participants shoudl be able to get started with
own empirical research. 
","Overview over existing empirical methods and their respective
power and contribution Read and understand empirical research papers Be able to critically assess research using empirical methods,
including review papers Assess which empirical methods are appropriate for own PhD/MSc
project Apply empirical research methods to own research topic Plan controlled experiments and surveys Run controlled experiments and surveys Evaluate controlled experiments and surveys Plan and conduct qualitative research Analyse data resulting from qualitative research Present empirical findings adequately Apply and create scientific micro-theories","
- Overview

- Empirical Paradigms in Comparison

- Inception of empirical research

- Execution of empirical research projects

- Analysis of empirical data

- Presentation of research results

Besides lectures, and exercises, students prepare and present a
small research project in group work 
",,"
Harald Störrle"
,,,,,,,,,,,,
02935, Introduction to applied statistics and R for PhD students,English , 5 ECTS , 2016/2017 ,Spring  or  June,Ph.D.,Department of Applied Mathematics and Computer Science,"
Make the participants able to perform a standard statistical
analysis of their own data and relate the results to the practical
application. The participants will be able to carry out statistical
analyses using the statistical package R. 
","Perform descriptive analyses, e.g. box-plots, to describe
data. Generate a statistical hypothesis based on a practical
problem. Differentiate between the choice of different statistical
methods. Formulate and apply common statistical regression models. Perform statistical model check. Perform estimation and hypothesis test in commonly used
statistical models. Interpret the results from commonly used statistical models and
relate the results to the practical application. Perform simple statistical analyses using R. Interpret output from analyses using R. Critical assessment of results from statistical analyses. Document and present results in a written report to persons
without a statistical background. Plan, perform and present a simple statistical
analysis.","
Basic statistical methods and ideas will be taught with emphasis on
applications and the interpretation of results and their
relationship to the applications. There will be a practical project
based on the participants' own data consisting of planning,
performing and presenting a statistical analysis. 
",,"
Guillermina Eslava,
Anders Stockmarr"
,,,,,,,,,,,,
02936, Bayesian Data Analysis,English , 5 ECTS , 2016/2017 ,Spring,Ph.D.,Department of Applied Mathematics and Computer Science,"
After the course, the student can explain the central concepts in
Bayesian statistics, and name steps of the Bayesian modeling
process. The student can recognize usages for common (i.e. those
presented during the course) statistical models, and formulate the
models in these situations. The student can compare the most
popular Bayesian simulation methods, and implement them. The
student can use analytic and simulation based methods for learning
the parameters of a given model. The student can estimate the fit
of a model to data and compare models. 
","The student can explain the central concepts in Bayesian
statistics. The student can name steps of the Bayesian modeling
process. The student can recognise usages for common (i.e. those
presented during the course) statistical models. The student can formulate the models for model met in the
course. The student can compare the most popular Bayesian simulation
methods. The student can implement the most popular Bayesian simulation
methods. The student can use analytic and simulation based methods for
learning the parameters of a given model. The student can estimate the fit of a model to data and compare
models.","
Curriculum: Chapters 1-8, 10, 11 plus selected advanced topics in

Andrew Gelman, John B. Carlin, Hal S. Stern, David B. Dunson, Aki
Vehtari, Donald B. Rubin, Bayesian Data Analysis, 3rd edition, CRC
Press, 2013. 
",None,"
Ole Winther,
Aki Vehtari"
,,,,,,,,,,,,
02938, Statistical Genetics,English , 5 ECTS , 2016/2017 ,Outside schedule structure,Ph.D.,Department of Applied Mathematics and Computer Science,"
To provide the participants with a framework within statistical
methodology, in order to understand concepts in genetics that in
nature are probabilistic, in this context. A special emphasis will
be devoted to inference on issues such as linkage disequilibrium
and similar concepts in inheritance models.The course will also
focus on obtaining methods within statistics and probability
theory, with the aim of applications within the area of the course.

","Possess the knowledge, skills and tools needed to read current
theoretical, methodological and applied literature in Statistical
Genetics, to understand methods, and to interpret analyses. Understand Mendelian inheritance in a probabilistic
framework. Understand the practical implementation of basic statistical
and probabilistic methods within statistical genetics. Be able to work with methods from statistical genetics in
practice. Identify procedures for estimation of allele frequencies,
recombination frequencies, and other genetic parameters underlying
observations on Mendelian traits. Set up models for linkage equilibrium and disequilibrium, and
perform the corresponding analyses. Perform association studies for selected disease traits and
genetic markers. Estimate the degree to which a certain phenotype may be
explained based on genotype. Model genetic data at population level with mathematical and
statistical models. Evaluate which statistical model that best explains a given
data set relevant for the course contents. Be able to lead a discussion among peers on topics of
statistical genetics.","
Basic concepts of molecular genetics; genetic models; allele
frequencies estimation; population substructure; Hardy-Weinberg
equilibrium; testing equilibrium models; heritibility analyses;
linkage analysis; genetic association; codominant, recessive and
dominant models; power functions; genetic distance; adaption and
control of statistical models; predictions. 
","02405,01005,02403,02402","
Anders Stockmarr"
,,,,,,,,,,,,
02940, Modern Methods in industrial Mathematics,English , 5 ECTS , 2016/2017 ,Outside schedule structure,Ph.D.,Department of Applied Mathematics and Computer Science,"
Develop experience with concrete problem solving in industrial
mathematics 
","Interpret and simplify descriptions of industrial
processes Balance use of a variety of mathematical descriptions Clarify relevant dimensional ranges of validity for technical
descriptions Interpret the influence of parameters in mathematical
models Work effectivly in knowledge-sharing groups Analyze and use available data Apply advanced numerical tools as solution support Present concise and relevant conclusions in a tecjnical
report","
Three days of course work in current topics of applied mathematics
and industrial modelling, followed by 1 week of active
participation in the ESGI workshop. 
",,"
Poul G. Hjorth"
,,,,,,,,,,,,
02941, Physically Based Rendering and Material Appearance Modelling,English , 5 ECTS , 2016/2017 ,June,Ph.D.,Department of Applied Mathematics and Computer Science,"
This course takes its outset in the appearance of real world
materials. The goal is to get as close as possible to replicating
the appearance of real materials by computer graphical rendering
based on mathematical/physical models. The participants will get an
introduction into the physical models behind the photorealistic
rendering of a digitally modelled scene. In addition to surface
rendering techniques, this course covers techniques for simulating
the light scattering that takes place under the surface of most
real world materials. These volume rendering techniques enable
rendering of participating media such as clouds, smoke, fire, and
rainbows. They also enable rendering of translucent materials such
as skin, marble, and most drinks and food objects. Material
appearance is determined by the optical properties of materials.
Computation of optical properties from the physical composition of
a material is also introduced in this course.

In the entertainment industry, photorealistic rendering is used for
computer games, animated films, and special effects in feature
films. Moreover, the technology is applied for visualisation in
material design and architecture. The most recent physically based
rendering techniques can predict the result of taking a picture
with a digital camera and, therefore, have relevance in food
quality control, spectroscopy, and biomedical optics.

During the course, we will mainly consider exact solution methods
and only rarely work with fast real-time solutions. Graphics card
(GPU) and multi-core processing may be exploited to speed up
computations. 
","Implement rendering techniques for global illumination (for
example path tracing or photon mapping for rendering both surfaces
and volumes). Apply Monte Carlo integration in rendering. Simulate various types of light sources. Use advanced camera and eye models. Simulate examples of wavelength dependent phenomena such as
dispersion, interference and diffraction. Simulate subsurface scattering. Combine shading and tracing techniques with theory for
light-material interaction. Compare real-time and off-line rendering. Compute the optical properties of a material from a physical
description of the material composition. Analyse real-world light-material interaction and suggest ways
of simulating it.","
Visual effects: global illumination, Fresnel effects (metallic
reflection as well as reflection, refraction, and dispersion in
transparent objects such as water and glass), absorption,
translucency, interference, diffraction, light scattering in
volumes.

Methods: path tracing, photon mapping, microfacet modelling
(BRDF/BTDF), subsurface scattering (BSSRDF), Lorenz-Mie theory.

Core elements: Monte Carlo integration, geometrical optics,
radiative transfer, light scattering, electromagnetic radiation. 
",02562,"
Jeppe Revall Frisvad"
,,,,,,,,,,,,
02943, Image Analysis and Computer Graphics Summer School on Semi,English , 3 ECTS , 2016/2017 ,August,Ph.D.,Department of Applied Mathematics and Computer Science,"
One of the main challenges in medical image analysis, computer
vision, and machine learning is to discover relations between low
level data representations (pixels and features) and semantic
labels. This is handled by the growing field of supervised machine
learning applied to image analysis. The central idea is, in a
principled way, to choose among hypothesis in a hypothesis space,
that best fit the data and the semantic labels at hand. The
generation of the hypothesis space, and the algorithms to choose
the ”best” fit, is the discipline of machine learning. This is
being used increasingly in image analysis, computer vision, and its
applications to among others medicine.

However, often, it is very ”expensive” to obtain the semantic
labels on the data, whereas the data themselves are ”cheaper” to
obtain. This may be in the situation of video streams, where
annotations of actions must be performed by hand, in medical
imaging, where manual outlining of organs of interest are performed
by trained radiologists. It may take one radiologist up to a full
work day to manually outline the bone and cartilage in a knee MRI,
as an example. Hence, often we are in the situation where much more
data is available than what can be obtained semantic labels for.

The idea of semi-supervised learning is to use also the unlabelled
data to improve the hypotheses that can be obtained from the very
limited amount of labelled data. 
","Understand semi-supervised learning. Be able to differentiate between the different types of
models. Have a strong knowledge about the theoretical foundations of
semi-supervised learning. Have a strong knowledge about the relations to active learning
and domain adaptations techniques. Have a knowledge about different applications for
semi-supervised learning. Be able to implement basic machine learning from scratch. Be able to train basic machine learning using appropriate
initialization and optimization techniques. Be able to apply semi-supervised learning for his/her own
research projects.","
The summer school will consist of 5 days of lectures and exercises.
The students will be expected to read a predefined set of
scientific articles on machine learning methods prior to the
course. Additionally, the students should bring a poster presenting
their research field (preferably with an angle towards machine
learning in image analysis).

The course will consist of the following parts:

• A crash course on supervised learning and unsupervised learning.

• A theoretical insight in the challenges of semi-supervised
learning.

• A practical session with hands-on exercises.

• Applications of semi-supervised learning in image analysis. 
",None,"
Ulla Jensen,
Anders Bjorholm Dahl,
Stine Harder"
,,,,,,,,,,,,
02947, PDE constrained optimization,English , 2.5 ECTS , 2016/2017 ,Fall,Ph.D.,Department of Applied Mathematics and Computer Science,"
Students following the course should be able to recognise problems
from the technical sciences that can be modelled as PDE constrained
optimization problems. They should be able to formulate such
problems in a mathematically satisfactory way, derive and prove
properties of the models. Finally students should be able to
approximate solutions to the problems using numerical algorithms. 
","Recognise and formulate problems involving optimization with
PDE constraints Understand and apply theory for optimization problems in Banach
spaces Derive the adjoint PDE based on the Lagrangian formulation of
PDE constraints Derive necessary optimitality conditions for PDE constrained
problems Understand and apply gradient descent methods for the numerical
solution of PDE constrained problems Understand and apply Newton methods for the numerical solution
of PDE constrained problems Derive and understand the structure of saddle point systems
related to PDE constrained optimization problems and apply suitable
preconditioners Practice presentation and discussion of scientific
material Reflect upon seminars delivered by leading experts in PDE
constrained optimization","
Basic Theory of Partial Differential Equations and Their
Discretization; Theory of PDE-Constrained Optimization; Numerical
Optimization Methods; Box-Constrained Problems; Nonsmooth
PDE-Constrained Optimization; Saddle Point Systems; ODE-Constrained
Optimization. 
",None,"
Kim Knudsen"
,,,,,,,,,,,,
02948, Projects in analysis of dynamical energy systems,English , 2.5 ECTS , 2016/2017 ,,Ph.D.,Department of Applied Mathematics and Computer Science,"
The objective of the course is for the participants to use the
techniques they learned in 02907 Dynamic Calculation Methods For
Building Energy Assessment for modelling in relation to their own
projects with assistance of the teachers. 
","Being able to apply time series modeling techniques. Carry out model validation using time series techniques and
tests. Carry out model selection using statistical tests. Analyse and interpret parameter estimates and
uncertainties. Analyse and interpret the statistical measures of a model fit,
i.e. RMSE and likelihood. Interpret the parameters in a time series model in a physical
context, e.g. the UA- and gA-value are the stationary response of
linear transfer function. Understand and analyze if the fundamental assumptions behind
the applied models are fulfilled. Organize and present results in a scientific paper or technical
report.","
Statistical modelling of building and building component energy
performance applied to specific problems related to the
participants own projects. 
",None,"
Peder Bacher,
Henrik Madsen"
,,,,,,,,,,,,
02949, DTU Compute PhD Seminar,English , 2.5 ECTS , 2016/2017 ,Fall and Spring,Ph.D.,Department of Applied Mathematics and Computer Science,"
The aim of this course is to give a broad introduction the life as
PhD student and to a series of non-technical-scientific subjects
which are vital for the PhD student’s academic and private business
career, and on the other side to give an introduction to urgent
scientific developments at DTU Compute.

Each student will, according to own interests and goal, further
develop (a) given topic(s) in relation to his/her PhD project in a
short report. 
","identify relevant topics and research areas i relation to own
PhD project discuss fundamental problems in the topics presented in the
seminars locate and apply further information in relation to topics
within own PhD project explain and argue for the consequences of a chosen topic in
relation to own PhD project formulate and present an interdisciplinary synthesis of the
technical-scientific PhD project and the non-technical-scientific
topic chosen for the report in an easily understod non-technical
language perform a professionally well-founded limitation of the topic
for the report evaluate critically the chosen topic(s) from a
technical-scientific point of view set up goals and intermediate goals for a process know urgent scientific themes at DTU Compute","
Patents, software patents, communication, knowledge sharing,
project management, self management, research management, open
source, publication formalia and ethics, scientific dishonesty,
paper writing, innovation, venture, career opportunities. 
",None,"
Ulla Jensen,
Kim Knudsen,
Christian D. Jensen,
Pia Lauridsen"
,,,,,,,,,,,,
02950, Statistical Genetics,English , 2.5 ECTS , 2016/2017 ,January,Ph.D.,Department of Applied Mathematics and Computer Science,"
To provide the participants with a framework within statistical
methodology, in order to understand concepts in genetics that in
nature are probabilistic, in this context. A special emphasis will
be devoted to inference on issues such as linkage disequilibrium
and similar concepts in inheritance models.The course will also
focus on obtaining methods within statistics and probability
theory, with the aim of applications within the area of the course.

","Possess the knowledge, skills and tools needed to read current
theoretical, methodological and applied literature in Statistical
Genetics, to understand methods, and to interpret analyses. Understand Mendelian inheritance in a probabilistic
framework. Understand the practical implementation of basic statistical
and probabilistic methods within statistical genetics. Be able to work with methods from statistical genetics in
practice. Identify procedures for estimation of allele frequencies,
recombination frequencies, and other genetic parameters underlying
observations on Mendelian traits. Set up models for linkage equilibrium and disequilibrium, and
perform the corresponding analyses. Perform association studies for selected disease traits and
genetic markers. Estimate the degree to which a certain phenotype may be
explained based on genotype. Model genetic data at population level with mathematical and
statistical models. Evaluate which statistical model that best explains a given
data set relevant for the course contents. Be able to lead a discussion among peers on topics of
statistical genetics.","
Basic concepts of molecular genetics; genetic models; allele
frequencies estimation; population substructure; Hardy-Weinberg
equilibrium; testing equilibrium models; heritibility analyses;
linkage analysis; genetic association; codominant, recessive and
dominant models; power functions; genetic distance; adaption and
control of statistical models; predictions. 
","02405,01005,02403,02402","
Anders Stockmarr"
